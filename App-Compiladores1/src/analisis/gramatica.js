/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,9,14,27,76,77,78,79,80],$V1=[2,12],$V2=[1,11],$V3=[1,13],$V4=[1,14],$V5=[1,15],$V6=[1,16],$V7=[1,17],$V8=[1,18],$V9=[6,9,14,27,76,77,78,79,80],$Va=[1,27],$Vb=[9,38],$Vc=[2,171],$Vd=[1,45],$Ve=[1,48],$Vf=[1,53],$Vg=[1,49],$Vh=[1,47],$Vi=[1,43],$Vj=[1,46],$Vk=[1,50],$Vl=[1,51],$Vm=[1,52],$Vn=[1,63],$Vo=[9,17,32,38,81],$Vp=[9,17,32,38,81,83],$Vq=[9,17,32,38,81,83,85],$Vr=[9,17,32,38,81,83,85,87,88],$Vs=[9,17,32,38,81,83,85,87,88,90,91,92,93,94],$Vt=[9,17,32,38,81,83,85,87,88,90,91,92,93,94,96,97],$Vu=[1,78],$Vv=[9,17,32,38,81,83,85,87,88,90,91,92,93,94,96,97,99,100,101,102],$Vw=[1,83],$Vx=[1,86],$Vy=[9,32,38,74],$Vz=[17,32],$VA=[9,17,32,38,81,83,85,87,88,90,91,92,93,94,96,97,99,100,101],$VB=[1,121],$VC=[1,120],$VD=[1,128],$VE=[1,141],$VF=[2,157],$VG=[1,149],$VH=[1,150],$VI=[1,148],$VJ=[1,143],$VK=[1,144],$VL=[1,147],$VM=[1,146],$VN=[1,145],$VO=[1,151],$VP=[9,47],$VQ=[1,195],$VR=[1,196],$VS=[1,199],$VT=[1,198],$VU=[1,203],$VV=[1,219],$VW=[2,122],$VX=[1,221],$VY=[1,220],$VZ=[1,222],$V_=[2,105],$V$=[1,229],$V01=[1,230],$V11=[1,277],$V21=[2,137],$V31=[1,286],$V41=[1,285],$V51=[1,290],$V61=[1,298],$V71=[2,89],$V81=[1,314],$V91=[1,313],$Va1=[1,312],$Vb1=[1,310],$Vc1=[1,311],$Vd1=[1,346],$Ve1=[1,345],$Vf1=[2,73],$Vg1=[1,361],$Vh1=[1,362],$Vi1=[1,366],$Vj1=[1,379],$Vk1=[2,53],$Vl1=[1,388],$Vm1=[1,389],$Vn1=[2,40],$Vo1=[1,414],$Vp1=[1,415];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"encabezado":4,"instrucciones":5,"EOF":6,"INCERTEZA":7,"DECIMAL":8,"SALTO":9,"instruccion":10,"declaracion":11,"asignacion":12,"funcion":13,"VOID":14,"PRINCIPAL":15,"PARIZQ":16,"PARDER":17,"DOSPTS":18,"instrucciones_funcion":19,"dibujar_EXP":20,"DIBUJAREXP":21,"expresion":22,"dibujar_TS":23,"DIBUJARTS":24,"dibujar_AST":25,"DIBUJARAST":26,"ID":27,"mostrar":28,"MOSTRAR":29,"CADENA":30,"expresion_mostrar":31,"COMA":32,"mientras":33,"MIENTRAS":34,"instrucciones_para":35,"para":36,"PARA":37,"PTCOMA":38,"aumentar":39,"INCREMENTO":40,"DECREMENTO":41,"mientras_anidado_2":42,"instrucciones_anidadas_2":43,"para_anidado_2":44,"si_anidado_2":45,"SI":46,"TAB":47,"SINO":48,"instrucciones_anidadas_else_2":49,"instruccion_anidadas_else_2":50,"llamada":51,"DETENER":52,"CONTINUAR":53,"instruccion_anidadas_2":54,"mientras_anidado":55,"instrucciones_anidadas":56,"para_anidado":57,"si_anidado":58,"instrucciones_anidadas_else":59,"instruccion_anidadas_else":60,"instruccion_anidadas":61,"instruccion_para":62,"si":63,"instrucciones_if":64,"instrucciones_else":65,"instruccion_if":66,"retorno":67,"instruccion_else":68,"tipo":69,"parametros":70,"instruccion_funcion":71,"RETORNO":72,"lista_valores":73,"IGUAL":74,"identificadores_declaracion":75,"INT":76,"DOUBLE":77,"BOOLEAN":78,"CHAR":79,"STRING":80,"OR":81,"expresion_1":82,"AND":83,"expresion_2":84,"XOR":85,"expresion_relacional":86,"DOBLE_IGUAL":87,"DIFERENTE":88,"expresion_relacional_1":89,"MAYOR":90,"MENOR":91,"MAYOR_IGUAL":92,"MENOR_IGUAL":93,"INCERT":94,"expresion_aritmetica":95,"MAS":96,"MENOS":97,"expresion_aritmetica_1":98,"POR":99,"DIVIDIDO":100,"MODULO":101,"POTENCIA":102,"expresion_not":103,"NOT":104,"valores":105,"ENTERO":106,"CARACTER":107,"TRUE":108,"FALSE":109,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",7:"INCERTEZA",8:"DECIMAL",9:"SALTO",14:"VOID",15:"PRINCIPAL",16:"PARIZQ",17:"PARDER",18:"DOSPTS",21:"DIBUJAREXP",24:"DIBUJARTS",26:"DIBUJARAST",27:"ID",29:"MOSTRAR",30:"CADENA",32:"COMA",34:"MIENTRAS",37:"PARA",38:"PTCOMA",40:"INCREMENTO",41:"DECREMENTO",46:"SI",47:"TAB",48:"SINO",52:"DETENER",53:"CONTINUAR",72:"RETORNO",74:"IGUAL",76:"INT",77:"DOUBLE",78:"BOOLEAN",79:"CHAR",80:"STRING",81:"OR",83:"AND",85:"XOR",87:"DOBLE_IGUAL",88:"DIFERENTE",90:"MAYOR",91:"MENOR",92:"MAYOR_IGUAL",93:"MENOR_IGUAL",94:"INCERT",96:"MAS",97:"MENOS",99:"POR",100:"DIVIDIDO",101:"MODULO",102:"POTENCIA",104:"NOT",106:"ENTERO",107:"CARACTER",108:"TRUE",109:"FALSE"},
productions_: [0,[3,3],[3,1],[4,3],[4,0],[5,3],[5,2],[5,1],[10,1],[10,1],[10,1],[10,7],[10,0],[20,4],[23,3],[25,4],[28,4],[28,5],[31,3],[31,2],[33,7],[36,11],[39,1],[39,1],[42,7],[44,11],[45,14],[45,7],[49,7],[49,6],[49,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,0],[43,7],[43,6],[43,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,0],[55,7],[57,11],[58,13],[58,7],[59,6],[59,5],[59,1],[60,1],[60,1],[60,1],[60,1],[60,1],[60,1],[60,1],[60,1],[60,1],[60,1],[60,1],[60,1],[60,0],[56,6],[56,5],[56,1],[61,1],[61,1],[61,1],[61,1],[61,1],[61,1],[61,1],[61,1],[61,1],[61,1],[61,1],[61,1],[61,0],[35,5],[35,4],[35,1],[62,1],[62,1],[62,1],[62,1],[62,1],[62,1],[62,1],[62,1],[62,1],[62,1],[62,1],[62,1],[62,0],[63,12],[63,7],[64,5],[64,4],[64,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,0],[66,1],[65,5],[65,4],[68,1],[68,1],[68,1],[68,1],[68,1],[68,1],[68,1],[68,1],[68,1],[68,1],[68,1],[68,0],[68,1],[13,8],[13,8],[13,7],[13,7],[19,4],[19,3],[19,1],[71,1],[71,1],[71,1],[71,1],[71,1],[71,1],[71,1],[71,1],[71,1],[71,1],[71,1],[71,0],[71,1],[67,1],[67,2],[51,4],[51,3],[73,3],[73,1],[70,4],[70,2],[12,3],[11,4],[11,2],[75,3],[75,1],[69,1],[69,1],[69,1],[69,1],[69,1],[22,3],[22,1],[82,3],[82,1],[84,3],[84,1],[86,3],[86,3],[86,1],[89,3],[89,3],[89,3],[89,3],[89,3],[89,1],[95,3],[95,3],[95,1],[98,3],[98,3],[98,3],[98,3],[98,1],[103,2],[103,1],[105,1],[105,1],[105,2],[105,2],[105,3],[105,1],[105,1],[105,1],[105,1],[105,1],[105,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

	
		tabla.comprobarIncerteza();
		var nuevaSalida = new Salida();
        nuevaSalida.agregarParametros(salida);
        salida.limpiarSalida();
        for(var i = 0; i< operaciones.length; i++){
            if(operaciones[i]){
                operaciones[i].operar(tabla, salida);
			}	
        }
		var nuevaTabla = new Tabla(tabla);
		var funcionPrincipal = tabla.obtenerFuncion('Principal',0);
		if (funcionPrincipal != null){
			funcionPrincipal.operar(nuevaTabla, nuevaSalida);		
		} else {
			console.log("error");
		}
		operaciones = [];
		tabla.limpiarTabla();
		return nuevaSalida;
		
	
break;
case 3:
tabla.agregarIncerteza(new Incerteza("Incerteza", $$[$0-1], yylineno, this._$.first_column));
break;
case 5:
this.$ = operaciones; if($$[$0-1] != null){operaciones.push($$[$0-1])};
break;
case 6:
if($$[$0-1] != null){operaciones.push($$[$0-1])};
break;
case 7: case 123: case 138: case 158:
salida.agregarError(Tipo.SINTACTICO, "Error en el lexema: " + yytext, yylineno, this._$.first_column); console.error('Este es un error sintÃ¡ctico: ' + yytext + ', en la linea: ' + (yylineno) + ', en la columna: ' + this._$.first_column)
break;
case 8:
if ($$[$0]!=null){this.$ = $$[$0]}
break;
case 9: case 178: case 180: case 182:
this.$ = $$[$0]
break;
case 10:
 this.$ = null;
break;
case 11:
this.$ = null; tabla.agregarFuncion(new Funcion("Funcion","Principal",null,operaciones_funcion,null,Tipo.VOID,Tipo.VALOR,yylineno,this._$.first_column), salida); operaciones_funcion = [];
break;
case 12: case 40: case 53: case 73: case 89: case 105: case 122: case 137: case 157:
this.$ = null
break;
case 13:
this.$ = new DibujarEXP("DibujarEXP",$$[$0-1],yylineno,this._$.first_column)
break;
case 14:
this.$ = new DibujarTS("DibujarTS",yylineno,this._$.first_column)
break;
case 15:
this.$ = new DibujarAST("DibujarAST",$$[$0-1],yylineno,this._$.first_column)
break;
case 16:
this.$ = new Mostrar("Mostrar",$$[$0-1],null,0,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 17:
this.$ = new Mostrar("Mostrar",$$[$0-2],parametros_mostrar,parametros_mostrar.length,Tipo.VALOR,yylineno,this._$.first_column); parametros_mostrar = [];
break;
case 18: case 19:
parametros_mostrar.push($$[$0]);
break;
case 20:
this.$ = new Mientras("Mientras",$$[$0-4],operaciones_ciclo,operaciones_ciclo.length,yylineno,this._$.first_column); operaciones_ciclo = [];
break;
case 21:
this.$ = new Para("Para",$$[$0-8],$$[$0-6],$$[$0-4],operaciones_ciclo,operaciones_ciclo.length,yylineno,this._$.first_column); operaciones_ciclo = [];
break;
case 22:
this.$ = new Iteracion("Iteracion",Tipo.INCREMENTO,yylineno,this._$.first_column);
break;
case 23:
this.$ = new Iteracion("Iteracion",Tipo.DECREMENTO,yylineno,this._$.first_column);
break;
case 24:
this.$ = new Mientras("Mientras",$$[$0-4],operaciones_anidadas_2,operaciones_anidadas_2.length,yylineno,this._$.first_column); operaciones_anidadas_2 = [];
break;
case 25:
this.$ = new Para("Para",$$[$0-8],$$[$0-6],$$[$0-4],operaciones_anidadas_2,operaciones_anidadas_2.length,yylineno,this._$.first_column); operaciones_anidadas_2 = [];
break;
case 26:
this.$ = new Si("Si",$$[$0-11],Tipo.SI,operaciones_anidadas_2,operaciones_anidadas_2.length,operaciones_anidadas_else_2,operaciones_anidadas_else_2.length,yylineno,this._$.first_column); console.log(operaciones_si.length);operaciones_anidadas_2 = []; operaciones_anidadas_else_2 = [];
break;
case 27:
this.$ = new Si("Si",$$[$0-4],Tipo.SI,operaciones_anidadas_2,operaciones_anidadas_2.length,null,0,yylineno,this._$.first_column); operaciones_anidadas_2 = [];
break;
case 31:
if ($$[$0]!=null){operaciones_anidadas_else_2.push($$[$0]);}
break;
case 32: case 33: case 34: case 35: case 36: case 37:
operaciones_anidadas_else_2.push($$[$0]);
break;
case 38:
operaciones_anidadas_else_2.push(new Detener("Detener",yylineno,this._$.first_column));
break;
case 39:
operaciones_anidadas_else_2.push(new Detener("Continuar",yylineno,this._$.first_column));
break;
case 44:
if ($$[$0]!=null){operaciones_anidadas_2.push($$[$0]);}
break;
case 45: case 46: case 47: case 48: case 49: case 50:
operaciones_anidadas_2.push($$[$0]);
break;
case 51:
operaciones_anidadas_2.push(new Detener("Detener",yylineno,this._$.first_column));
break;
case 52:
operaciones_anidadas_2.push(new Detener("Continuar",yylineno,this._$.first_column));
break;
case 54:
this.$ = new Mientras("Mientras",$$[$0-4],operaciones_anidadas,operaciones_anidadas.length,yylineno,this._$.first_column); operaciones_anidadas = [];
break;
case 55:
this.$ = new Para("Para",$$[$0-8],$$[$0-6],$$[$0-4],operaciones_anidadas,operaciones_anidadas.length,yylineno,this._$.first_column); operaciones_anidadas = [];
break;
case 56:
this.$ = new Si("Si",$$[$0-10],Tipo.SI,operaciones_anidadas,operaciones_anidadas.length,operaciones_anidadas_else,operaciones_anidadas_else.length,yylineno,this._$.first_column); console.log(operaciones_si.length);operaciones_anidadas = []; operaciones_anidadas_else = [];
break;
case 57:
this.$ = new Si("Si",$$[$0-4],Tipo.SI,operaciones_anidadas,operaciones_anidadas.length,null,0,yylineno,this._$.first_column); operaciones_anidadas = [];
break;
case 61:
if ($$[$0]!=null){operaciones_anidadas_else.push($$[$0]);}
break;
case 62: case 63: case 64: case 65: case 66: case 67: case 68: case 69: case 70:
operaciones_anidadas_else.push($$[$0]);
break;
case 71:
operaciones_anidadas_else.push(new Detener("Detener",yylineno,this._$.first_column));
break;
case 72:
operaciones_anidadas_else.push(new Detener("Continuar",yylineno,this._$.first_column));
break;
case 77:
if ($$[$0]!=null){operaciones_anidadas.push($$[$0]);}
break;
case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86:
operaciones_anidadas.push($$[$0]);
break;
case 87:
operaciones_anidadas.push(new Detener("Detener",yylineno,this._$.first_column));
break;
case 88:
operaciones_anidadas.push(new Detener("Continuar",yylineno,this._$.first_column));
break;
case 93:
if ($$[$0]!=null){operaciones_ciclo.push($$[$0]);}
break;
case 94: case 95: case 98: case 99: case 100: case 101: case 102: case 103: case 104:
operaciones_ciclo.push($$[$0]);
break;
case 96:
operaciones_ciclo.push(new Detener("Detener",yylineno,this._$.first_column));
break;
case 97:
operaciones_ciclo.push(new Detener("Continuar",yylineno,this._$.first_column));
break;
case 106:
this.$ = new Si("Si",$$[$0-9],Tipo.SI,operaciones_si,operaciones_si.length,operaciones_else,operaciones_else.length,yylineno,this._$.first_column); console.log(operaciones_si.length);operaciones_si = []; operaciones_else = [];
break;
case 107:
this.$ = new Si("Si",$$[$0-4],Tipo.SI,operaciones_si,operaciones_si.length,null,0,yylineno,this._$.first_column); operaciones_si = [];
break;
case 111:
if ($$[$0]!=null){operaciones_si.push($$[$0]);}
break;
case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121:
operaciones_si.push($$[$0]);
break;
case 126:
if ($$[$0]!=null){operaciones_else.push($$[$0]);}
break;
case 127: case 128: case 129: case 130: case 131: case 132: case 133: case 134: case 135: case 136:
operaciones_else.push($$[$0]);
break;
case 139:
this.$ = null; tabla.agregarFuncion(new Funcion("Funcion",$$[$0-6],parametros_metodo,operaciones_funcion,$$[$0-7],Tipo.VALOR,yylineno,this._$.first_column), salida); operaciones_funcion = []; parametros_metodo = []; 
break;
case 140:
this.$ = null; tabla.agregarFuncion(new Funcion("Funcion",$$[$0-6],parametros_metodo,operaciones_funcion,Tipo.VOID,Tipo.VALOR,yylineno,this._$.first_column), salida); operaciones_funcion = []; parametros_metodo = [];
break;
case 141:
this.$ = null; tabla.agregarFuncion(new Funcion("Funcion",$$[$0-5],null,operaciones_funcion,$$[$0-6],Tipo.VALOR,yylineno,this._$.first_column), salida); operaciones_funcion = [];
break;
case 142:
this.$ = null; tabla.agregarFuncion(new Funcion("Funcion",$$[$0-5],null,operaciones_funcion,Tipo.VOID,Tipo.VALOR,yylineno,this._$.first_column), salida); operaciones_funcion = []; 
break;
case 146:
if ($$[$0]!=null){operaciones_funcion.push($$[$0]);}
break;
case 147: case 148: case 149: case 150: case 151: case 152: case 153: case 154: case 155: case 156:
operaciones_funcion.push($$[$0]);
break;
case 159:
this.$ = new Retorno("Retorno",null, yylineno,this._$.first_column);
break;
case 160:
this.$ = new Retorno("Retorno",$$[$0], yylineno,this._$.first_column);
break;
case 161:
this.$ = new Llamada("Llamada",$$[$0-3],valores_llamada,Tipo.LLAMADA,Tipo.VALOR,yylineno,this._$.first_column); valores_llamada = []
break;
case 162:
this.$ = new Llamada("Llamada",$$[$0-2],null,Tipo.LLAMADA,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 163: case 164:
valores_llamada.push($$[$0]);
break;
case 165:
this.$ = parametros_metodo; identificadores_decla.push($$[$0]); parametros_metodo.push(new Declaracion("Declaracion",identificadores_decla,null,$$[$0-1],Tipo.VALOR,yylineno,this._$.first_column)); identificadores_decla = [];
break;
case 166:
identificadores_decla.push($$[$0]); parametros_metodo.push(new Declaracion("Declaracion",identificadores_decla,null,$$[$0-1],Tipo.VALOR,yylineno,this._$.first_column)); identificadores_decla = [];
break;
case 167:
this.$ = new Asignacion("Asignacion",$$[$0-2],$$[$0],yylineno,this._$.first_column);
break;
case 168:
this.$ = new Declaracion("Declaracion",identificadores_decla,$$[$0],$$[$0-3],Tipo.VALOR,yylineno,this._$.first_column); identificadores_decla = [];
break;
case 169:
this.$ = new Declaracion("Declaracion",identificadores_decla,null,$$[$0-1],Tipo.VALOR,yylineno,this._$.first_column); identificadores_decla = [];
break;
case 170: case 171:
identificadores_decla.push($$[$0]);
break;
case 172:
this.$ = Tipo.ENTERO;
break;
case 173:
this.$ = Tipo.DECIMAL;
break;
case 174:
this.$ = Tipo.BOOLEAN;
break;
case 175:
this.$ = Tipo.CARACTER;
break;
case 176:
this.$ = Tipo.CADENA;
break;
case 177:
this.$ = new Logica("Logica",$$[$0-2],$$[$0],Tipo.OR,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 179:
this.$ = new Logica("Logica",$$[$0-2],$$[$0],Tipo.AND,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 181:
this.$ = new Logica("Logica",$$[$0-2],$$[$0],Tipo.XOR,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 183:
this.$ = new Relacion("Relacion",$$[$0-2],$$[$0],Tipo.IGUAL,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 184:
this.$ = new Relacion("Relacion",$$[$0-2],$$[$0],Tipo.DIFERENTE,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 185: case 191: case 194: case 199: case 201:
this.$ = $$[$0];
break;
case 186:
this.$ = new Relacion("Relacion",$$[$0-2],$$[$0],Tipo.MAYOR,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 187:
this.$ = new Relacion("Relacion",$$[$0-2],$$[$0],Tipo.MENOR,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 188:
this.$ = new Relacion("Relacion",$$[$0-2],$$[$0],Tipo.MAYORIGUAL,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 189:
this.$ = new Relacion("Relacion",$$[$0-2],$$[$0],Tipo.MENORIGUAL,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 190:
this.$ = new Relacion("Relacion",$$[$0-2],$$[$0],Tipo.INCERTEZA,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 192:
this.$ = new Operacion("Operacion",$$[$0-2],$$[$0],Tipo.SUMA,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 193:
this.$ = new Operacion("Operacion",$$[$0-2],$$[$0],Tipo.RESTA,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 195:
this.$ = new Operacion("Operacion",$$[$0-2],$$[$0],Tipo.MULTIPLICACION,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 196:
this.$ = new Operacion("Operacion",$$[$0-2],$$[$0],Tipo.DIVISION,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 197:
this.$ = new Operacion("Operacion",$$[$0-2],$$[$0],Tipo.MODULO,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 198:
this.$ = new Operacion("Operacion",$$[$0-2],$$[$0],Tipo.POTENCIA,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 200:
this.$ = new Logica("Logica",$$[$0],null,Tipo.NOT,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 202:
this.$ = new Valor("Valor", Number($$[$0]),Tipo.DECIMAL,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 203:
this.$ = new Valor("Valor", Number($$[$0]),Tipo.ENTERO,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 204:
this.$ = new Valor("Valor", -1*Number($$[$0]),Tipo.DECIMAL,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 205:
this.$ = new Valor("Valor", -1*Number($$[$0]),Tipo.ENTERO,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 206:
this.$ = $$[$0-1];
break;
case 207:
this.$ = new Valor("Valor", $$[$0],Tipo.CADENA,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 208:
this.$ = new Valor("Valor", $$[$0],Tipo.CARACTER,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 209:
this.$ = new Valor("Valor", true,Tipo.BOOLEAN,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 210:
this.$ = new Valor("Valor", false,Tipo.BOOLEAN,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 211:
this.$ = new Valor("Valor", $$[$0],Tipo.ID,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 212:
this.$ = new Valor("Valor", $$[$0],Tipo.LLAMADA,Tipo.VALOR,yylineno,this._$.first_column);
break;
}
},
table: [o($V0,[2,4],{3:1,4:2,6:[1,3],7:[1,4]}),{1:[3]},{2:[1,7],5:5,9:$V1,10:6,11:8,12:9,13:10,14:$V2,27:$V3,69:12,76:$V4,77:$V5,78:$V6,79:$V7,80:$V8},{1:[2,2]},{8:[1,19]},{6:[1,20],9:$V1,10:21,11:8,12:9,13:10,14:$V2,27:$V3,69:12,76:$V4,77:$V5,78:$V6,79:$V7,80:$V8},{9:[1,22]},o($V9,[2,7]),{9:[2,8]},{9:[2,9]},{9:[2,10]},{15:[1,23],27:[1,24]},{27:[1,26],75:25},{74:$Va},{27:[2,172]},{27:[2,173]},{27:[2,174]},{27:[2,175]},{27:[2,176]},{9:[1,28]},{1:[2,1]},{9:[1,29]},o($V9,[2,6]),{16:[1,30]},{16:[1,31]},o($Vb,[2,169],{32:[1,33],74:[1,32]}),o([9,32,74],$Vc,{16:[1,34]}),{8:$Vd,16:$Ve,22:35,27:$Vf,30:$Vg,51:54,82:36,84:37,86:38,89:39,95:40,97:$Vh,98:41,103:42,104:$Vi,105:44,106:$Vj,107:$Vk,108:$Vl,109:$Vm},o($V0,[2,3]),o($V9,[2,5]),{17:[1,55]},{17:[1,57],69:58,70:56,76:$V4,77:$V5,78:$V6,79:$V7,80:$V8},{8:$Vd,16:$Ve,22:59,27:$Vf,30:$Vg,51:54,82:36,84:37,86:38,89:39,95:40,97:$Vh,98:41,103:42,104:$Vi,105:44,106:$Vj,107:$Vk,108:$Vl,109:$Vm},{27:[1,60]},{17:[1,62],69:58,70:61,76:$V4,77:$V5,78:$V6,79:$V7,80:$V8},{9:[2,167],81:$Vn},o($Vo,[2,178],{83:[1,64]}),o($Vp,[2,180],{85:[1,65]}),o($Vq,[2,182],{87:[1,66],88:[1,67]}),o($Vr,[2,185],{90:[1,68],91:[1,69],92:[1,70],93:[1,71],94:[1,72]}),o($Vs,[2,191],{96:[1,73],97:[1,74]}),o($Vt,[2,194],{99:[1,75],100:[1,76],101:[1,77],102:$Vu}),o($Vv,[2,199]),{8:$Vd,16:$Ve,27:$Vf,30:$Vg,51:54,97:$Vh,103:79,104:$Vi,105:44,106:$Vj,107:$Vk,108:$Vl,109:$Vm},o($Vv,[2,201]),o($Vv,[2,202]),o($Vv,[2,203]),{8:[1,80],106:[1,81]},{8:$Vd,16:$Ve,22:82,27:$Vf,30:$Vg,51:54,82:36,84:37,86:38,89:39,95:40,97:$Vh,98:41,103:42,104:$Vi,105:44,106:$Vj,107:$Vk,108:$Vl,109:$Vm},o($Vv,[2,207]),o($Vv,[2,208]),o($Vv,[2,209]),o($Vv,[2,210]),o($Vv,[2,211],{16:$Vw}),o($Vv,[2,212]),{18:[1,84]},{17:[1,85],32:$Vx},{18:[1,87]},{27:[1,88]},o($Vb,[2,168],{81:$Vn}),o($Vy,[2,170]),{17:[1,89],32:$Vx},{18:[1,90]},{8:$Vd,16:$Ve,22:91,27:$Vf,30:$Vg,51:54,82:36,84:37,86:38,89:39,95:40,97:$Vh,98:41,103:42,104:$Vi,105:44,106:$Vj,107:$Vk,108:$Vl,109:$Vm},{8:$Vd,16:$Ve,27:$Vf,30:$Vg,51:54,82:92,84:37,86:38,89:39,95:40,97:$Vh,98:41,103:42,104:$Vi,105:44,106:$Vj,107:$Vk,108:$Vl,109:$Vm},{8:$Vd,16:$Ve,27:$Vf,30:$Vg,51:54,84:93,86:38,89:39,95:40,97:$Vh,98:41,103:42,104:$Vi,105:44,106:$Vj,107:$Vk,108:$Vl,109:$Vm},{8:$Vd,16:$Ve,27:$Vf,30:$Vg,51:54,86:94,89:39,95:40,97:$Vh,98:41,103:42,104:$Vi,105:44,106:$Vj,107:$Vk,108:$Vl,109:$Vm},{8:$Vd,16:$Ve,27:$Vf,30:$Vg,51:54,86:95,89:39,95:40,97:$Vh,98:41,103:42,104:$Vi,105:44,106:$Vj,107:$Vk,108:$Vl,109:$Vm},{8:$Vd,16:$Ve,27:$Vf,30:$Vg,51:54,89:96,95:40,97:$Vh,98:41,103:42,104:$Vi,105:44,106:$Vj,107:$Vk,108:$Vl,109:$Vm},{8:$Vd,16:$Ve,27:$Vf,30:$Vg,51:54,89:97,95:40,97:$Vh,98:41,103:42,104:$Vi,105:44,106:$Vj,107:$Vk,108:$Vl,109:$Vm},{8:$Vd,16:$Ve,27:$Vf,30:$Vg,51:54,89:98,95:40,97:$Vh,98:41,103:42,104:$Vi,105:44,106:$Vj,107:$Vk,108:$Vl,109:$Vm},{8:$Vd,16:$Ve,27:$Vf,30:$Vg,51:54,89:99,95:40,97:$Vh,98:41,103:42,104:$Vi,105:44,106:$Vj,107:$Vk,108:$Vl,109:$Vm},{8:$Vd,16:$Ve,27:$Vf,30:$Vg,51:54,89:100,95:40,97:$Vh,98:41,103:42,104:$Vi,105:44,106:$Vj,107:$Vk,108:$Vl,109:$Vm},{8:$Vd,16:$Ve,27:$Vf,30:$Vg,51:54,95:101,97:$Vh,98:41,103:42,104:$Vi,105:44,106:$Vj,107:$Vk,108:$Vl,109:$Vm},{8:$Vd,16:$Ve,27:$Vf,30:$Vg,51:54,95:102,97:$Vh,98:41,103:42,104:$Vi,105:44,106:$Vj,107:$Vk,108:$Vl,109:$Vm},{8:$Vd,16:$Ve,27:$Vf,30:$Vg,51:54,97:$Vh,98:103,103:42,104:$Vi,105:44,106:$Vj,107:$Vk,108:$Vl,109:$Vm},{8:$Vd,16:$Ve,27:$Vf,30:$Vg,51:54,97:$Vh,98:104,103:42,104:$Vi,105:44,106:$Vj,107:$Vk,108:$Vl,109:$Vm},{8:$Vd,16:$Ve,27:$Vf,30:$Vg,51:54,97:$Vh,98:105,103:42,104:$Vi,105:44,106:$Vj,107:$Vk,108:$Vl,109:$Vm},{8:$Vd,16:$Ve,27:$Vf,30:$Vg,51:54,97:$Vh,98:106,103:42,104:$Vi,105:44,106:$Vj,107:$Vk,108:$Vl,109:$Vm},o($Vv,[2,200]),o($Vv,[2,204]),o($Vv,[2,205]),{17:[1,107],81:$Vn},{8:$Vd,16:$Ve,17:[1,109],22:110,27:$Vf,30:$Vg,51:54,73:108,82:36,84:37,86:38,89:39,95:40,97:$Vh,98:41,103:42,104:$Vi,105:44,106:$Vj,107:$Vk,108:$Vl,109:$Vm},{9:[1,111]},{18:[1,112]},{69:113,76:$V4,77:$V5,78:$V6,79:$V7,80:$V8},{9:[1,114]},o($Vz,[2,166]),{18:[1,115]},{9:[1,116]},o($Vo,[2,177]),o($Vp,[2,179]),o($Vq,[2,181]),o($Vr,[2,183]),o($Vr,[2,184]),o($Vs,[2,186]),o($Vs,[2,187]),o($Vs,[2,188]),o($Vs,[2,189]),o($Vs,[2,190]),o($Vt,[2,192]),o($Vt,[2,193]),o($VA,[2,195],{102:$Vu}),o($VA,[2,196],{102:$Vu}),o($VA,[2,197],{102:$Vu}),o($VA,[2,198],{102:$Vu}),o($Vv,[2,206]),{17:[1,117],32:[1,118]},o($Vv,[2,162]),o($Vz,[2,164],{81:$Vn}),{9:$VB,19:119,47:$VC},{9:[1,122]},{27:[1,123]},{9:$VB,19:124,47:$VC},{9:[1,125]},{9:$VB,19:126,47:$VC},o($Vv,[2,161]),{8:$Vd,16:$Ve,22:127,27:$Vf,30:$Vg,51:54,82:36,84:37,86:38,89:39,95:40,97:$Vh,98:41,103:42,104:$Vi,105:44,106:$Vj,107:$Vk,108:$Vl,109:$Vm},{9:[2,11],47:$VD},{2:$VE,9:$VF,11:130,12:131,20:138,21:$VG,23:139,24:$VH,25:137,26:$VI,27:$VJ,28:133,29:$VK,33:136,34:$VL,36:135,37:$VM,46:$VN,51:132,63:134,67:140,69:142,71:129,72:$VO,76:$V4,77:$V5,78:$V6,79:$V7,80:$V8},o($VP,[2,145]),{9:$VB,19:152,47:$VC},o($Vz,[2,165]),{9:[2,142],47:$VD},{9:$VB,19:153,47:$VC},{9:[2,141],47:$VD},o($Vz,[2,163],{81:$Vn}),{2:$VE,9:$VF,11:130,12:131,20:138,21:$VG,23:139,24:$VH,25:137,26:$VI,27:$VJ,28:133,29:$VK,33:136,34:$VL,36:135,37:$VM,46:$VN,51:132,63:134,67:140,69:142,71:154,72:$VO,76:$V4,77:$V5,78:$V6,79:$V7,80:$V8},{9:[1,155]},{9:[2,146]},{9:[2,147]},{9:[2,148]},{9:[2,149]},{9:[2,150]},{9:[2,151]},{9:[2,152]},{9:[2,153]},{9:[2,154]},{9:[2,155]},{9:[2,156]},{9:[2,158]},{27:[1,156],75:25},{16:$Vw,74:$Va},{16:[1,157]},{16:[1,158]},{16:[1,159]},{16:[1,160]},{16:[1,161]},{16:[1,162]},{16:[1,163]},{8:$Vd,9:[2,159],16:$Ve,22:164,27:$Vf,30:$Vg,51:54,82:36,84:37,86:38,89:39,95:40,97:$Vh,98:41,103:42,104:$Vi,105:44,106:$Vj,107:$Vk,108:$Vl,109:$Vm},{9:[2,140],47:$VD},{9:[2,139],47:$VD},{9:[1,165]},o($VP,[2,144]),o($Vy,$Vc),{30:[1,166]},{8:$Vd,16:$Ve,22:167,27:$Vf,30:$Vg,51:54,82:36,84:37,86:38,89:39,95:40,97:$Vh,98:41,103:42,104:$Vi,105:44,106:$Vj,107:$Vk,108:$Vl,109:$Vm},{11:168,69:142,76:$V4,77:$V5,78:$V6,79:$V7,80:$V8},{8:$Vd,16:$Ve,22:169,27:$Vf,30:$Vg,51:54,82:36,84:37,86:38,89:39,95:40,97:$Vh,98:41,103:42,104:$Vi,105:44,106:$Vj,107:$Vk,108:$Vl,109:$Vm},{27:[1,170]},{8:$Vd,16:$Ve,22:171,27:$Vf,30:$Vg,51:54,82:36,84:37,86:38,89:39,95:40,97:$Vh,98:41,103:42,104:$Vi,105:44,106:$Vj,107:$Vk,108:$Vl,109:$Vm},{17:[1,172]},{9:[2,160],81:$Vn},o($VP,[2,143]),{17:[1,173],31:174,32:[1,175]},{17:[1,176],81:$Vn},{38:[1,177]},{17:[1,178],81:$Vn},{17:[1,179]},{17:[1,180],81:$Vn},{9:[2,14]},{9:[2,16]},{17:[1,181],32:[1,182]},{8:$Vd,16:$Ve,22:183,27:$Vf,30:$Vg,51:54,82:36,84:37,86:38,89:39,95:40,97:$Vh,98:41,103:42,104:$Vi,105:44,106:$Vj,107:$Vk,108:$Vl,109:$Vm},{18:[1,184]},{8:$Vd,16:$Ve,22:185,27:$Vf,30:$Vg,51:54,82:36,84:37,86:38,89:39,95:40,97:$Vh,98:41,103:42,104:$Vi,105:44,106:$Vj,107:$Vk,108:$Vl,109:$Vm},{18:[1,186]},{9:[2,15]},{9:[2,13]},{9:[2,17]},{8:$Vd,16:$Ve,22:187,27:$Vf,30:$Vg,51:54,82:36,84:37,86:38,89:39,95:40,97:$Vh,98:41,103:42,104:$Vi,105:44,106:$Vj,107:$Vk,108:$Vl,109:$Vm},o($Vz,[2,19],{81:$Vn}),{9:[1,188]},{38:[1,189],81:$Vn},{9:[1,190]},o($Vz,[2,18],{81:$Vn}),{9:[1,193],47:[1,192],64:191},{39:194,40:$VQ,41:$VR},{9:$VS,35:197,47:$VT},{9:[2,107],47:[1,200]},{47:[1,201]},o($VP,[2,110]),{17:[1,202]},{17:[2,22]},{17:[2,23]},{9:[2,20],47:$VU},{47:[1,204]},o($VP,[2,92]),{47:[1,206],48:[1,205]},{2:$VV,9:$VW,11:208,12:209,20:213,21:$VG,23:214,24:$VH,25:212,26:$VI,27:$VJ,28:211,29:$VK,34:$VX,37:$VY,46:$VZ,51:210,55:216,57:215,58:217,66:207,67:218,69:142,72:$VO,76:$V4,77:$V5,78:$V6,79:$V7,80:$V8},{18:[1,223]},{47:[1,224]},{9:$V_,11:226,12:227,20:233,21:$VG,23:234,24:$VH,25:232,26:$VI,27:$VJ,28:231,29:$VK,34:$VX,37:$VY,46:$VZ,51:228,52:$V$,53:$V01,55:236,57:235,58:237,62:225,69:142,76:$V4,77:$V5,78:$V6,79:$V7,80:$V8},{18:[1,238]},{2:$VV,9:$VW,11:208,12:209,20:213,21:$VG,23:214,24:$VH,25:212,26:$VI,27:$VJ,28:211,29:$VK,34:$VX,37:$VY,46:$VZ,51:210,55:216,57:215,58:217,66:239,67:218,69:142,72:$VO,76:$V4,77:$V5,78:$V6,79:$V7,80:$V8},{9:[1,240]},{9:[2,111]},{9:[2,112]},{9:[2,113]},{9:[2,114]},{9:[2,115]},{9:[2,116]},{9:[2,117]},{9:[2,118]},{9:[2,119]},{9:[2,120]},{9:[2,121]},{9:[2,123]},{16:[1,241]},{16:[1,242]},{16:[1,243]},{9:[1,244]},{9:$V_,11:226,12:227,20:233,21:$VG,23:234,24:$VH,25:232,26:$VI,27:$VJ,28:231,29:$VK,34:$VX,37:$VY,46:$VZ,51:228,52:$V$,53:$V01,55:236,57:235,58:237,62:245,69:142,76:$V4,77:$V5,78:$V6,79:$V7,80:$V8},{9:[1,246]},{9:[2,93]},{9:[2,94]},{9:[2,95]},{9:[2,96]},{9:[2,97]},{9:[2,98]},{9:[2,99]},{9:[2,100]},{9:[2,101]},{9:[2,102]},{9:[2,103]},{9:[2,104]},{9:[1,247]},{9:[1,248]},o($VP,[2,109]),{11:249,69:142,76:$V4,77:$V5,78:$V6,79:$V7,80:$V8},{8:$Vd,16:$Ve,22:250,27:$Vf,30:$Vg,51:54,82:36,84:37,86:38,89:39,95:40,97:$Vh,98:41,103:42,104:$Vi,105:44,106:$Vj,107:$Vk,108:$Vl,109:$Vm},{8:$Vd,16:$Ve,22:251,27:$Vf,30:$Vg,51:54,82:36,84:37,86:38,89:39,95:40,97:$Vh,98:41,103:42,104:$Vi,105:44,106:$Vj,107:$Vk,108:$Vl,109:$Vm},{9:$VS,35:252,47:$VT},{9:[1,253]},o($VP,[2,91]),{47:[1,255],65:254},o($VP,[2,108]),{38:[1,256]},{17:[1,257],81:$Vn},{17:[1,258],81:$Vn},{9:[2,21],47:$VU},o($VP,[2,90]),{9:[2,106],47:[1,259]},{47:[1,260]},{8:$Vd,16:$Ve,22:261,27:$Vf,30:$Vg,51:54,82:36,84:37,86:38,89:39,95:40,97:$Vh,98:41,103:42,104:$Vi,105:44,106:$Vj,107:$Vk,108:$Vl,109:$Vm},{18:[1,262]},{18:[1,263]},{47:[1,264]},{2:$V11,9:$V21,11:266,12:267,20:271,21:$VG,23:272,24:$VH,25:270,26:$VI,27:$VJ,28:269,29:$VK,34:$VX,37:$VY,46:$VZ,51:268,55:274,57:273,58:275,67:276,68:265,69:142,72:$VO,76:$V4,77:$V5,78:$V6,79:$V7,80:$V8},{38:[1,278],81:$Vn},{9:[1,279]},{9:[1,280]},{2:$V11,9:$V21,11:266,12:267,20:271,21:$VG,23:272,24:$VH,25:270,26:$VI,27:$VJ,28:269,29:$VK,34:$VX,37:$VY,46:$VZ,51:268,55:274,57:273,58:275,67:276,68:281,69:142,72:$VO,76:$V4,77:$V5,78:$V6,79:$V7,80:$V8},{9:[1,282]},{9:[2,126]},{9:[2,127]},{9:[2,128]},{9:[2,129]},{9:[2,130]},{9:[2,131]},{9:[2,132]},{9:[2,133]},{9:[2,134]},{9:[2,135]},{9:[2,136]},{9:[2,138]},{39:283,40:$VQ,41:$VR},{9:$V31,47:$V41,56:284},{9:$V31,47:$V41,56:287},{9:[1,288]},o($VP,[2,125]),{17:[1,289]},{9:[2,54],47:$V51},{47:[1,291]},o($VP,[2,76]),{9:[2,57],47:[1,292]},o($VP,[2,124]),{18:[1,293]},{47:[1,294]},{47:[1,295]},{47:[1,296]},{9:[1,297]},{47:$V61},{9:$V71,11:300,12:301,20:305,21:$VG,23:306,24:$VH,25:304,26:$VI,27:$VJ,28:303,29:$VK,34:$V81,37:$V91,42:309,44:308,45:307,46:$Va1,51:302,52:$Vb1,53:$Vc1,61:299,69:142,76:$V4,77:$V5,78:$V6,79:$V7,80:$V8},{47:$V61,48:[1,315]},{9:$V31,47:$V41,56:316},{9:$V71,11:300,12:301,20:305,21:$VG,23:306,24:$VH,25:304,26:$VI,27:$VJ,28:303,29:$VK,34:$V81,37:$V91,42:309,44:308,45:307,46:$Va1,51:302,52:$Vb1,53:$Vc1,61:317,69:142,76:$V4,77:$V5,78:$V6,79:$V7,80:$V8},{9:[1,318]},{9:[2,77]},{9:[2,78]},{9:[2,79]},{9:[2,80]},{9:[2,81]},{9:[2,82]},{9:[2,83]},{9:[2,84]},{9:[2,85]},{9:[2,86]},{9:[2,87]},{9:[2,88]},{16:[1,319]},{16:[1,320]},{16:[1,321]},{18:[1,322]},{9:[2,55],47:$V51},{9:[1,323]},o($VP,[2,75]),{8:$Vd,16:$Ve,22:324,27:$Vf,30:$Vg,51:54,82:36,84:37,86:38,89:39,95:40,97:$Vh,98:41,103:42,104:$Vi,105:44,106:$Vj,107:$Vk,108:$Vl,109:$Vm},{11:325,69:142,76:$V4,77:$V5,78:$V6,79:$V7,80:$V8},{8:$Vd,16:$Ve,22:326,27:$Vf,30:$Vg,51:54,82:36,84:37,86:38,89:39,95:40,97:$Vh,98:41,103:42,104:$Vi,105:44,106:$Vj,107:$Vk,108:$Vl,109:$Vm},{9:[1,327]},o($VP,[2,74]),{17:[1,328],81:$Vn},{38:[1,329]},{17:[1,330],81:$Vn},{9:[1,333],47:[1,332],59:331},{18:[1,334]},{8:$Vd,16:$Ve,22:335,27:$Vf,30:$Vg,51:54,82:36,84:37,86:38,89:39,95:40,97:$Vh,98:41,103:42,104:$Vi,105:44,106:$Vj,107:$Vk,108:$Vl,109:$Vm},{18:[1,336]},{9:[2,56],47:[1,337]},{47:[1,338]},o($VP,[2,60]),{9:[1,339]},{38:[1,340],81:$Vn},{9:[1,341]},{47:[1,342]},{47:[1,343]},{9:$Vd1,43:344,47:$Ve1},{39:347,40:$VQ,41:$VR},{9:$Vd1,43:348,47:$Ve1},{47:[1,349]},{9:$Vf1,11:351,12:352,20:356,21:$VG,23:357,24:$VH,25:355,26:$VI,27:$VJ,28:354,29:$VK,34:$V81,37:$V91,42:360,44:359,45:358,46:$Va1,51:353,52:$Vg1,53:$Vh1,60:350,69:142,76:$V4,77:$V5,78:$V6,79:$V7,80:$V8},{9:[2,27],47:[1,363]},{47:[1,364]},o($VP,[2,43]),{17:[1,365]},{9:[2,24],47:$Vi1},{9:$Vf1,11:351,12:352,20:356,21:$VG,23:357,24:$VH,25:355,26:$VI,27:$VJ,28:354,29:$VK,34:$V81,37:$V91,42:360,44:359,45:358,46:$Va1,51:353,52:$Vg1,53:$Vh1,60:367,69:142,76:$V4,77:$V5,78:$V6,79:$V7,80:$V8},{9:[1,368]},{9:[2,61]},{9:[2,62]},{9:[2,63]},{9:[2,64]},{9:[2,65]},{9:[2,66]},{9:[2,67]},{9:[2,68]},{9:[2,69]},{9:[2,70]},{9:[2,71]},{9:[2,72]},{47:[1,369]},{47:[1,370]},{18:[1,371]},{47:[1,372]},{9:[1,373]},o($VP,[2,59]),{47:[1,374]},{47:[1,375]},{9:[1,376]},{47:[1,377]},o($VP,[2,58]),{47:$Vj1,48:[1,378]},{9:$Vk1,11:381,12:382,20:386,21:$VG,23:387,24:$VH,25:385,26:$VI,27:$VJ,28:384,29:$VK,51:383,52:$Vl1,53:$Vm1,54:380,69:142,76:$V4,77:$V5,78:$V6,79:$V7,80:$V8},{9:$Vd1,43:390,47:$Ve1},{47:$Vj1},{18:[1,391]},{9:$Vk1,11:381,12:382,20:386,21:$VG,23:387,24:$VH,25:385,26:$VI,27:$VJ,28:384,29:$VK,51:383,52:$Vl1,53:$Vm1,54:392,69:142,76:$V4,77:$V5,78:$V6,79:$V7,80:$V8},{9:[1,393]},{9:[2,44]},{9:[2,45]},{9:[2,46]},{9:[2,47]},{9:[2,48]},{9:[2,49]},{9:[2,50]},{9:[2,51]},{9:[2,52]},{9:[2,25],47:$Vi1},{9:[1,394]},{9:[1,395]},o($VP,[2,42]),{9:[1,398],47:[1,397],49:396},o($VP,[2,41]),{9:[2,26],47:[1,399]},{47:[1,400]},o($VP,[2,30]),{47:[1,401]},{47:[1,402]},{47:[1,403]},{47:[1,404]},{47:[1,405]},{9:$Vn1,11:407,12:408,20:412,21:$VG,23:413,24:$VH,25:411,26:$VI,27:$VJ,28:410,29:$VK,50:406,51:409,52:$Vo1,53:$Vp1,69:142,76:$V4,77:$V5,78:$V6,79:$V7,80:$V8},{9:$Vn1,11:407,12:408,20:412,21:$VG,23:413,24:$VH,25:411,26:$VI,27:$VJ,28:410,29:$VK,50:416,51:409,52:$Vo1,53:$Vp1,69:142,76:$V4,77:$V5,78:$V6,79:$V7,80:$V8},{9:[1,417]},{9:[2,31]},{9:[2,32]},{9:[2,33]},{9:[2,34]},{9:[2,35]},{9:[2,36]},{9:[2,37]},{9:[2,38]},{9:[2,39]},{9:[1,418]},o($VP,[2,29]),o($VP,[2,28])],
defaultActions: {3:[2,2],8:[2,8],9:[2,9],10:[2,10],14:[2,172],15:[2,173],16:[2,174],17:[2,175],18:[2,176],20:[2,1],130:[2,146],131:[2,147],132:[2,148],133:[2,149],134:[2,150],135:[2,151],136:[2,152],137:[2,153],138:[2,154],139:[2,155],140:[2,156],141:[2,158],172:[2,14],173:[2,16],179:[2,15],180:[2,13],181:[2,17],195:[2,22],196:[2,23],208:[2,111],209:[2,112],210:[2,113],211:[2,114],212:[2,115],213:[2,116],214:[2,117],215:[2,118],216:[2,119],217:[2,120],218:[2,121],219:[2,123],226:[2,93],227:[2,94],228:[2,95],229:[2,96],230:[2,97],231:[2,98],232:[2,99],233:[2,100],234:[2,101],235:[2,102],236:[2,103],237:[2,104],266:[2,126],267:[2,127],268:[2,128],269:[2,129],270:[2,130],271:[2,131],272:[2,132],273:[2,133],274:[2,134],275:[2,135],276:[2,136],277:[2,138],300:[2,77],301:[2,78],302:[2,79],303:[2,80],304:[2,81],305:[2,82],306:[2,83],307:[2,84],308:[2,85],309:[2,86],310:[2,87],311:[2,88],351:[2,61],352:[2,62],353:[2,63],354:[2,64],355:[2,65],356:[2,66],357:[2,67],358:[2,68],359:[2,69],360:[2,70],361:[2,71],362:[2,72],381:[2,44],382:[2,45],383:[2,46],384:[2,47],385:[2,48],386:[2,49],387:[2,50],388:[2,51],389:[2,52],407:[2,31],408:[2,32],409:[2,33],410:[2,34],411:[2,35],412:[2,36],413:[2,37],414:[2,38],415:[2,39]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	const Tipo = require('./clases/Tipo');
	const Tabla = require('./clases/Tabla');
	const Salida = require("./clases/Salida");
	const Valor = require('./clases/Valor');
	const Operacion = require('./clases/Operacion');
	const Relacion = require('./clases/Relacion');
	const Logica = require('./clases/Logica');
	const Declaracion = require('./clases/Declaracion');
	const Mostrar = require('./clases/Mostrar');
	const Asignacion = require('./clases/Asignacion');
	const Funcion = require('./clases/Funcion');
	const Retorno = require('./clases/Retorno');
	const Llamada = require('./clases/Llamada');
	const Si = require('./clases/Si');
	const Para = require('./clases/Para');
	const Mientras = require('./clases/Mientras');
	const Iteracion = require('./clases/Iteracion');
	const Detener = require('./clases/Detener');
	const Continuar = require('./clases/Continuar');
	const DibujarAST = require('./clases/DibujarAST');
	const DibujarEXP = require('./clases/DibujarEXP');
	const DibujarTS = require('./clases/DibujarTS');
	const Incerteza = require('./clases/Incerteza');
	var tabla = new Tabla(null);
	var salida = new Salida();
	var operaciones = [];
	var operaciones_anidadas = [];
	var operaciones_anidadas_else = [];
	var operaciones_funcion = [];
	var operaciones_si = [];
	var operaciones_else = [];
	var parametros_metodo = [];
	var valores_llamada = [];
	var operaciones_ciclo = [];
	var parametros_mostrar = [];
	var identificadores_decla = [];
	var operaciones_anidadas_2 = [];
	var operaciones_anidadas_else_2 = [];


/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:return 47;
break;
case 2:return 9;
break;
case 3:
break;
case 4:// Comentario de una linea
break;
case 5:// comentario multiple lÃ­neas
break;
case 6:return 'IMPORTAR';
break;
case 7:return 7;
break;
case 8:return 77;
break;
case 9:return 78;
break;
case 10:return 80;
break;
case 11:return 76;
break;
case 12:return 79;
break;
case 13:return 14;
break;
case 14:return 108;
break;
case 15:return 109;
break;
case 16:return 72;
break;
case 17:return 15;
break;
case 18:return 46;
break;
case 19:return 48;
break;
case 20:return 37;
break;
case 21:return 34;
break;
case 22:return 52;
break;
case 23:return 53;
break;
case 24:return 29;
break;
case 25:return 26;
break;
case 26:return 21;
break;
case 27:return 24;
break;
case 28:return 32;
break;
case 29:return 18;
break;
case 30:return 38;
break;
case 31:return 'LLAVIZQ';
break;
case 32:return 'LLAVDER';
break;
case 33:return 16;
break;
case 34:return 17;
break;
case 35:return 40;
break;
case 36:return 41;
break;
case 37:return 96;
break;
case 38:return 97;
break;
case 39:return 99;
break;
case 40:return 100;
break;
case 41:return 101;
break;
case 42:return 102;
break;
case 43:return 93;
break;
case 44:return 92;
break;
case 45:return 87;
break;
case 46:return 88;
break;
case 47:return 91;
break;
case 48:return 90;
break;
case 49:return 74;
break;
case 50:return 94;
break;
case 51:return 83
break;
case 52:return 81;
break;
case 53:return 85;
break;
case 54:return 104;
break;
case 55:return 107;
break;
case 56:return 8;
break;
case 57:return 106;
break;
case 58:return 30;
break;
case 59:return 27;
break;
case 60:return 6;
break;
case 61:salida.agregarError(Tipo.LEXICO, "Error en el lexema: " + yy_.yytext, yy_.yylloc.first_line,yy_.yylloc.first_column); console.error('Este es un error lÃ©xico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:[ ]+)/,/^(?:[	])/,/^(?:\n)/,/^(?:[\r]+)/,/^(?:!!.*)/,/^(?:[\"][\"][\"][^*]*[*]*([^/*][^*]*[*]+)*[\"][\"][\"])/,/^(?:Importar\b)/,/^(?:Incerteza\b)/,/^(?:Double\b)/,/^(?:Boolean\b)/,/^(?:String\b)/,/^(?:Int\b)/,/^(?:Char\b)/,/^(?:Void\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:Retorno\b)/,/^(?:Principal\b)/,/^(?:Si\b)/,/^(?:Sino\b)/,/^(?:Para\b)/,/^(?:Mientras\b)/,/^(?:Detener\b)/,/^(?:Continuar\b)/,/^(?:Mostrar\b)/,/^(?:DibujarAST\b)/,/^(?:DibujarEXP\b)/,/^(?:DibujarTS\b)/,/^(?:,)/,/^(?::)/,/^(?:;)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\^)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:!=)/,/^(?:<)/,/^(?:>)/,/^(?:=)/,/^(?:~)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:\|&)/,/^(?:!)/,/^(?:'([^']|\\n|\\r|\\t)')/,/^(?:[0-9]+\.[0-9]+\b)/,/^(?:[0-9]+\b)/,/^(?:([\"](\\"|[^"])*[^\\][\"])|[\"][\"])/,/^(?:([a-zA-Z"_"])[a-z0-9A-Z"_""Ã±""Ã"]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    //var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}