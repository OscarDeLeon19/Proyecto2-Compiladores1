/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,9,13,60,61,62,63,64],$V1=[2,11],$V2=[1,10],$V3=[1,12],$V4=[1,13],$V5=[1,14],$V6=[1,15],$V7=[1,16],$V8=[6,9,13,60,61,62,63,64],$V9=[2,89],$Va=[1,28],$Vb=[1,43],$Vc=[1,46],$Vd=[1,51],$Ve=[1,45],$Vf=[1,41],$Vg=[1,44],$Vh=[1,47],$Vi=[1,48],$Vj=[1,49],$Vk=[1,50],$Vl=[1,57],$Vm=[9,34],$Vn=[1,60],$Vo=[9,16,34,58,65],$Vp=[9,16,34,58,65,67],$Vq=[9,16,34,58,65,67,69,70],$Vr=[9,16,34,58,65,67,69,70,72,73,74,75,76],$Vs=[9,16,34,58,65,67,69,70,72,73,74,75,76,78,79],$Vt=[1,74],$Vu=[9,16,34,58,65,67,69,70,72,73,74,75,76,78,79,81,82,83,84],$Vv=[1,79],$Vw=[16,58],$Vx=[1,109],$Vy=[1,108],$Vz=[9,16,34,58,65,67,69,70,72,73,74,75,76,78,79,81,82,83],$VA=[1,129],$VB=[2,75],$VC=[1,137],$VD=[1,138],$VE=[1,136],$VF=[1,131],$VG=[1,132],$VH=[1,135],$VI=[1,134],$VJ=[1,133],$VK=[9,38],$VL=[2,80],$VM=[1,141],$VN=[1,145],$VO=[1,195],$VP=[1,194],$VQ=[1,199],$VR=[1,211],$VS=[2,45],$VT=[2,32],$VU=[1,218],$VV=[1,219],$VW=[1,247],$VX=[2,56];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"encabezado":4,"instrucciones":5,"EOF":6,"INCERTEZA":7,"DECIMAL":8,"SALTO":9,"instruccion":10,"declaracion":11,"funcion":12,"VOID":13,"PRINCIPAL":14,"PARIZQ":15,"PARDER":16,"DOSPTS":17,"instrucciones_funcion":18,"dibujar_EXP":19,"DIBUJAREXP":20,"expresion":21,"dibujar_TS":22,"DIBUJARTS":23,"dibujar_AST":24,"DIBUJARAST":25,"ID":26,"mostrar":27,"MOSTRAR":28,"mientras":29,"MIENTRAS":30,"instrucciones_para":31,"para":32,"PARA":33,"PTCOMA":34,"aumentar":35,"INCREMENTO":36,"DECREMENTO":37,"TAB":38,"instruccion_para":39,"asignacion":40,"llamada":41,"DETENER":42,"CONTINUAR":43,"si":44,"SI":45,"instrucciones_if":46,"SINO":47,"instrucciones_else":48,"instruccion_if":49,"instruccion_else":50,"tipo":51,"parametros":52,"retorno_metodo":53,"retorno":54,"instruccion_funcion":55,"RETORNO":56,"lista_valores":57,"COMA":58,"IGUAL":59,"INT":60,"DOUBLE":61,"BOOLEAN":62,"CHAR":63,"STRING":64,"OR":65,"expresion_1":66,"AND":67,"expresion_relacional":68,"DOBLE_IGUAL":69,"DIFERENTE":70,"expresion_relacional_1":71,"MAYOR":72,"MENOR":73,"MAYOR_IGUAL":74,"MENOR_IGUAL":75,"INCERT":76,"expresion_aritmetica":77,"MAS":78,"MENOS":79,"expresion_aritmetica_1":80,"POR":81,"DIVIDIDO":82,"MODULO":83,"POTENCIA":84,"expresion_not":85,"NOT":86,"valores":87,"ENTERO":88,"CADENA":89,"CARACTER":90,"TRUE":91,"FALSE":92,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",7:"INCERTEZA",8:"DECIMAL",9:"SALTO",13:"VOID",14:"PRINCIPAL",15:"PARIZQ",16:"PARDER",17:"DOSPTS",20:"DIBUJAREXP",23:"DIBUJARTS",25:"DIBUJARAST",26:"ID",28:"MOSTRAR",30:"MIENTRAS",33:"PARA",34:"PTCOMA",36:"INCREMENTO",37:"DECREMENTO",38:"TAB",42:"DETENER",43:"CONTINUAR",45:"SI",47:"SINO",56:"RETORNO",58:"COMA",59:"IGUAL",60:"INT",61:"DOUBLE",62:"BOOLEAN",63:"CHAR",64:"STRING",65:"OR",67:"AND",69:"DOBLE_IGUAL",70:"DIFERENTE",72:"MAYOR",73:"MENOR",74:"MAYOR_IGUAL",75:"MENOR_IGUAL",76:"INCERT",78:"MAS",79:"MENOS",81:"POR",82:"DIVIDIDO",83:"MODULO",84:"POTENCIA",86:"NOT",88:"ENTERO",89:"CADENA",90:"CARACTER",91:"TRUE",92:"FALSE"},
productions_: [0,[3,3],[3,1],[4,3],[4,0],[5,3],[5,2],[5,1],[10,1],[10,1],[10,7],[10,0],[19,4],[22,3],[24,4],[27,4],[29,7],[32,11],[35,1],[35,1],[31,5],[31,4],[31,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,0],[44,12],[44,7],[46,5],[46,4],[46,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,0],[49,1],[48,5],[48,4],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,0],[50,1],[12,10],[12,10],[12,9],[12,9],[18,4],[18,3],[18,1],[55,1],[55,1],[55,1],[55,1],[55,1],[55,1],[55,1],[55,1],[55,1],[55,1],[55,0],[55,1],[53,3],[53,2],[54,2],[54,0],[41,4],[41,3],[57,3],[57,1],[52,4],[52,2],[40,3],[11,4],[11,2],[51,1],[51,1],[51,1],[51,1],[51,1],[21,3],[21,1],[66,3],[66,1],[68,3],[68,3],[68,1],[71,3],[71,3],[71,3],[71,3],[71,3],[71,1],[77,3],[77,3],[77,1],[80,3],[80,3],[80,3],[80,3],[80,1],[85,2],[85,1],[87,1],[87,1],[87,2],[87,2],[87,3],[87,1],[87,1],[87,1],[87,1],[87,1],[87,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

	
		tabla.comprobarIncerteza();
		var nuevaSalida = new Salida();
        nuevaSalida.agregarParametros(salida);
        salida.limpiarSalida();
        for(var i = 0; i< operaciones.length; i++){
            if(operaciones[i]){
                operaciones[i].operar(tabla, salida);
			}	
        }
		var nuevaTabla = new Tabla(tabla);
		var funcionPrincipal = tabla.obtenerFuncion('Principal',0);
		if (funcionPrincipal != null){
			funcionPrincipal.operar(nuevaTabla, nuevaSalida);		
		} else {
			console.log("error");
		}
		operaciones = [];
		tabla.limpiarTabla();
		return nuevaSalida;
		
	
break;
case 3:
tabla.agregarIncerteza(new Incerteza("Incerteza", $$[$0-1], yylineno, this._$.first_column));
break;
case 5:
this.$ = operaciones; if($$[$0-1] != null){operaciones.push($$[$0-1])};
break;
case 6:
if($$[$0-1] != null){operaciones.push($$[$0-1])};
break;
case 7: case 46: case 57: case 76:
salida.agregarError(Tipo.SINTACTICO, "Error en el lexema: " + yytext, yylineno, this._$.first_column); console.error('Este es un error sintÃ¡ctico: ' + yytext + ', en la linea: ' + (yylineno) + ', en la columna: ' + this._$.first_column)
break;
case 8:
if ($$[$0]!=null){this.$ = $$[$0]}
break;
case 9:
 this.$ = null;
break;
case 10:
this.$ = null; tabla.agregarFuncion(new Funcion("Funcion","Principal",null,operaciones_funcion,null,Tipo.VOID,Tipo.VALOR,yylineno,this._$.first_column), salida); operaciones_funcion = [];
break;
case 11: case 32: case 45: case 56: case 75:
this.$ = null
break;
case 12:
this.$ = new DibujarEXP("DibujarAST",$$[$0-1],yylineno,this._$.first_column)
break;
case 13:
this.$ = new DibujarTS("DibujarTS",yylineno,this._$.first_column)
break;
case 14:
this.$ = new DibujarAST("DibujarAST",$$[$0-1],yylineno,this._$.first_column)
break;
case 15:
this.$ = new Mostrar("Mostrar",$$[$0-1],Tipo.VALOR,yylineno,this._$.first_column);
break;
case 16:
this.$ = new Mientras("Mientras",$$[$0-4],operaciones_ciclo,operaciones_ciclo.length,yylineno,this._$.first_column); operaciones_ciclo = [];
break;
case 17:
this.$ = new Para("Para",$$[$0-8],$$[$0-6],$$[$0-4],operaciones_ciclo,operaciones_ciclo.length,yylineno,this._$.first_column); operaciones_ciclo = [];
break;
case 18:
this.$ = new Iteracion("Iteracion",Tipo.INCREMENTO,yylineno,this._$.first_column);
break;
case 19:
this.$ = new Iteracion("Iteracion",Tipo.DECREMENTO,yylineno,this._$.first_column);
break;
case 23:
if ($$[$0]!=null){operaciones_ciclo.push($$[$0]);}
break;
case 24: case 25: case 28: case 29: case 30: case 31:
operaciones_ciclo.push($$[$0]);
break;
case 26:
operaciones_ciclo.push(new Detener("Detener",yylineno,this._$.first_column));
break;
case 27:
operaciones_ciclo.push(new Detener("Continuar",yylineno,this._$.first_column));
break;
case 33:
this.$ = new Si("Si",$$[$0-9],Tipo.SI,operaciones_si,operaciones_si.length,operaciones_else,operaciones_else.length,yylineno,this._$.first_column); console.log(operaciones_si.length);operaciones_si = []; operaciones_else = [];
break;
case 34:
this.$ = new Si("Si",$$[$0-4],Tipo.SI,operaciones_si,operaciones_si.length,null,0,yylineno,this._$.first_column); operaciones_si = [];
break;
case 38:
if ($$[$0]!=null){operaciones_si.push($$[$0]);}
break;
case 39: case 40: case 41: case 42: case 43: case 44:
operaciones_si.push($$[$0]);
break;
case 49:
if ($$[$0]!=null){operaciones_else.push($$[$0]);}
break;
case 50: case 51: case 52: case 53: case 54: case 55:
operaciones_else.push($$[$0]);
break;
case 58:
this.$ = null; tabla.agregarFuncion(new Funcion("Funcion",$$[$0-8],parametros_metodo,operaciones_funcion,$$[$0-1],$$[$0-9],Tipo.VALOR,yylineno,this._$.first_column), salida); operaciones_funcion = []; parametros_metodo = []; 
break;
case 59:
this.$ = null; tabla.agregarFuncion(new Funcion("Funcion",$$[$0-8],parametros_metodo,operaciones_funcion,$$[$0-1],Tipo.VOID,Tipo.VALOR,yylineno,this._$.first_column), salida); operaciones_funcion = []; parametros_metodo = [];
break;
case 60:
this.$ = null; tabla.agregarFuncion(new Funcion("Funcion",$$[$0-7],null,operaciones_funcion,$$[$0-1],$$[$0-8],Tipo.VALOR,yylineno,this._$.first_column), salida); operaciones_funcion = [];
break;
case 61:
this.$ = null; tabla.agregarFuncion(new Funcion("Funcion",$$[$0-7],null,operaciones_funcion,$$[$0-1],Tipo.VOID,Tipo.VALOR,yylineno,this._$.first_column), salida); operaciones_funcion = []; 
break;
case 65:
if ($$[$0]!=null){operaciones_funcion.push($$[$0]);}
break;
case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74:
operaciones_funcion.push($$[$0]);
break;
case 77:
this.$ = new Retorno("Retorno",$$[$0], yylineno,this._$.first_column);
break;
case 78: case 79: case 80:
this.$ = new Retorno("Retorno",null, yylineno,this._$.first_column);
break;
case 81:
this.$ = new Llamada("Llamada",$$[$0-3],valores_llamada,Tipo.LLAMADA,Tipo.VALOR,yylineno,this._$.first_column); valores_llamada = []
break;
case 82:
this.$ = new Llamada("Llamada",$$[$0-2],null,Tipo.LLAMADA,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 83: case 84:
valores_llamada.push($$[$0]);
break;
case 85:
this.$ = parametros_metodo; parametros_metodo.push(new Declaracion("Declaracion",$$[$0],null,$$[$0-1],Tipo.VALOR,yylineno,this._$.first_column));
break;
case 86:
parametros_metodo.push(new Declaracion("Declaracion",$$[$0],null,$$[$0-1],Tipo.VALOR,yylineno,this._$.first_column));
break;
case 87:
this.$ = new Asignacion("Asignacion",$$[$0-2],$$[$0],yylineno,this._$.first_column);
break;
case 88:
this.$ = new Declaracion("Declaracion",$$[$0-2],$$[$0],$$[$0-3],Tipo.VALOR,yylineno,this._$.first_column);
break;
case 89:
this.$ = new Declaracion("Declaracion",$$[$0],null,$$[$0-1],Tipo.VALOR,yylineno,this._$.first_column);
break;
case 90:
this.$ = Tipo.ENTERO;
break;
case 91:
this.$ = Tipo.DECIMAL;
break;
case 92:
this.$ = Tipo.BOOLEAN;
break;
case 93:
this.$ = Tipo.CARACTER;
break;
case 94:
this.$ = Tipo.CADENA;
break;
case 95:
this.$ = new Logica("Logica",$$[$0-2],$$[$0],Tipo.OR,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 96: case 98:
this.$ = $$[$0]
break;
case 97:
this.$ = new Logica("Logica",$$[$0-2],$$[$0],Tipo.AND,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 99:
this.$ = new Relacion("Relacion",$$[$0-2],$$[$0],Tipo.IGUAL,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 100:
this.$ = new Relacion("Relacion",$$[$0-2],$$[$0],Tipo.DIFERENTE,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 101: case 107: case 110: case 115: case 117:
this.$ = $$[$0];
break;
case 102:
this.$ = new Relacion("Relacion",$$[$0-2],$$[$0],Tipo.MAYOR,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 103:
this.$ = new Relacion("Relacion",$$[$0-2],$$[$0],Tipo.MENOR,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 104:
this.$ = new Relacion("Relacion",$$[$0-2],$$[$0],Tipo.MAYORIGUAL,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 105:
this.$ = new Relacion("Relacion",$$[$0-2],$$[$0],Tipo.MENORIGUAL,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 106:
this.$ = new Relacion("Relacion",$$[$0-2],$$[$0],Tipo.INCERTEZA,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 108:
this.$ = new Operacion("Operacion",$$[$0-2],$$[$0],Tipo.SUMA,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 109:
this.$ = new Operacion("Operacion",$$[$0-2],$$[$0],Tipo.RESTA,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 111:
this.$ = new Operacion("Operacion",$$[$0-2],$$[$0],Tipo.MULTIPLICACION,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 112:
this.$ = new Operacion("Operacion",$$[$0-2],$$[$0],Tipo.DIVISION,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 113:
this.$ = new Operacion("Operacion",$$[$0-2],$$[$0],Tipo.MODULO,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 114:
this.$ = new Operacion("Operacion",$$[$0-2],$$[$0],Tipo.POTENCIA,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 116:
this.$ = new Logica("Logica",$$[$0],null,Tipo.NOT,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 118:
this.$ = new Valor(Number($$[$0]),Tipo.DECIMAL,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 119:
this.$ = new Valor(Number($$[$0]),Tipo.ENTERO,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 120:
this.$ = new Valor(-1*Number($$[$0]),Tipo.DECIMAL,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 121:
this.$ = new Valor(-1*Number($$[$0]),Tipo.ENTERO,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 122:
this.$ = $$[$0-1];
break;
case 123:
this.$ = new Valor($$[$0],Tipo.CADENA,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 124:
this.$ = new Valor($$[$0],Tipo.CARACTER,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 125:
this.$ = new Valor(true,Tipo.BOOLEAN,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 126:
this.$ = new Valor(false,Tipo.BOOLEAN,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 127:
this.$ = new Valor($$[$0],Tipo.ID,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 128:
this.$ = new Valor($$[$0],Tipo.LLAMADA,Tipo.VALOR,yylineno,this._$.first_column);
break;
}
},
table: [o($V0,[2,4],{3:1,4:2,6:[1,3],7:[1,4]}),{1:[3]},{2:[1,7],5:5,9:$V1,10:6,11:8,12:9,13:$V2,51:11,60:$V3,61:$V4,62:$V5,63:$V6,64:$V7},{1:[2,2]},{8:[1,17]},{6:[1,18],9:$V1,10:19,11:8,12:9,13:$V2,51:11,60:$V3,61:$V4,62:$V5,63:$V6,64:$V7},{9:[1,20]},o($V8,[2,7]),{9:[2,8]},{9:[2,9]},{14:[1,21],26:[1,22]},{26:[1,23]},{26:[2,90]},{26:[2,91]},{26:[2,92]},{26:[2,93]},{26:[2,94]},{9:[1,24]},{1:[2,1]},{9:[1,25]},o($V8,[2,6]),{15:[1,26]},{15:[1,27]},{9:$V9,15:[1,29],59:$Va},o($V0,[2,3]),o($V8,[2,5]),{16:[1,30]},{16:[1,32],51:33,52:31,60:$V3,61:$V4,62:$V5,63:$V6,64:$V7},{8:$Vb,15:$Vc,21:34,26:$Vd,41:52,66:35,68:36,71:37,77:38,79:$Ve,80:39,85:40,86:$Vf,87:42,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk},{16:[1,54],51:33,52:53,60:$V3,61:$V4,62:$V5,63:$V6,64:$V7},{17:[1,55]},{16:[1,56],58:$Vl},{17:[1,58]},{26:[1,59]},o($Vm,[2,88],{65:$Vn}),o($Vo,[2,96],{67:[1,61]}),o($Vp,[2,98],{69:[1,62],70:[1,63]}),o($Vq,[2,101],{72:[1,64],73:[1,65],74:[1,66],75:[1,67],76:[1,68]}),o($Vr,[2,107],{78:[1,69],79:[1,70]}),o($Vs,[2,110],{81:[1,71],82:[1,72],83:[1,73],84:$Vt}),o($Vu,[2,115]),{8:$Vb,15:$Vc,26:$Vd,41:52,79:$Ve,85:75,86:$Vf,87:42,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk},o($Vu,[2,117]),o($Vu,[2,118]),o($Vu,[2,119]),{8:[1,76],88:[1,77]},{8:$Vb,15:$Vc,21:78,26:$Vd,41:52,66:35,68:36,71:37,77:38,79:$Ve,80:39,85:40,86:$Vf,87:42,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk},o($Vu,[2,123]),o($Vu,[2,124]),o($Vu,[2,125]),o($Vu,[2,126]),o($Vu,[2,127],{15:$Vv}),o($Vu,[2,128]),{16:[1,80],58:$Vl},{17:[1,81]},{9:[1,82]},{17:[1,83]},{51:84,60:$V3,61:$V4,62:$V5,63:$V6,64:$V7},{9:[1,85]},o($Vw,[2,86]),{8:$Vb,15:$Vc,21:86,26:$Vd,41:52,66:35,68:36,71:37,77:38,79:$Ve,80:39,85:40,86:$Vf,87:42,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk},{8:$Vb,15:$Vc,26:$Vd,41:52,66:87,68:36,71:37,77:38,79:$Ve,80:39,85:40,86:$Vf,87:42,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk},{8:$Vb,15:$Vc,26:$Vd,41:52,68:88,71:37,77:38,79:$Ve,80:39,85:40,86:$Vf,87:42,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk},{8:$Vb,15:$Vc,26:$Vd,41:52,68:89,71:37,77:38,79:$Ve,80:39,85:40,86:$Vf,87:42,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk},{8:$Vb,15:$Vc,26:$Vd,41:52,71:90,77:38,79:$Ve,80:39,85:40,86:$Vf,87:42,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk},{8:$Vb,15:$Vc,26:$Vd,41:52,71:91,77:38,79:$Ve,80:39,85:40,86:$Vf,87:42,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk},{8:$Vb,15:$Vc,26:$Vd,41:52,71:92,77:38,79:$Ve,80:39,85:40,86:$Vf,87:42,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk},{8:$Vb,15:$Vc,26:$Vd,41:52,71:93,77:38,79:$Ve,80:39,85:40,86:$Vf,87:42,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk},{8:$Vb,15:$Vc,26:$Vd,41:52,71:94,77:38,79:$Ve,80:39,85:40,86:$Vf,87:42,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk},{8:$Vb,15:$Vc,26:$Vd,41:52,77:95,79:$Ve,80:39,85:40,86:$Vf,87:42,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk},{8:$Vb,15:$Vc,26:$Vd,41:52,77:96,79:$Ve,80:39,85:40,86:$Vf,87:42,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk},{8:$Vb,15:$Vc,26:$Vd,41:52,79:$Ve,80:97,85:40,86:$Vf,87:42,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk},{8:$Vb,15:$Vc,26:$Vd,41:52,79:$Ve,80:98,85:40,86:$Vf,87:42,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk},{8:$Vb,15:$Vc,26:$Vd,41:52,79:$Ve,80:99,85:40,86:$Vf,87:42,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk},{8:$Vb,15:$Vc,26:$Vd,41:52,79:$Ve,80:100,85:40,86:$Vf,87:42,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk},o($Vu,[2,116]),o($Vu,[2,120]),o($Vu,[2,121]),{16:[1,101],65:$Vn},{8:$Vb,15:$Vc,16:[1,103],21:104,26:$Vd,41:52,57:102,66:35,68:36,71:37,77:38,79:$Ve,80:39,85:40,86:$Vf,87:42,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk},{17:[1,105]},{9:[1,106]},{9:$Vx,18:107,38:$Vy},{9:[1,110]},{26:[1,111]},{9:$Vx,18:112,38:$Vy},o($Vo,[2,95]),o($Vp,[2,97]),o($Vq,[2,99]),o($Vq,[2,100]),o($Vr,[2,102]),o($Vr,[2,103]),o($Vr,[2,104]),o($Vr,[2,105]),o($Vr,[2,106]),o($Vs,[2,108]),o($Vs,[2,109]),o($Vz,[2,111],{84:$Vt}),o($Vz,[2,112],{84:$Vt}),o($Vz,[2,113],{84:$Vt}),o($Vz,[2,114],{84:$Vt}),o($Vu,[2,122]),{16:[1,113],58:[1,114]},o($Vu,[2,82]),o($Vw,[2,84],{65:$Vn}),{9:[1,115]},{9:$Vx,18:116,38:$Vy},{9:[2,10],38:[1,117]},{2:$VA,9:$VB,11:119,19:127,20:$VC,22:128,23:$VD,24:126,25:$VE,26:$VF,27:122,28:$VG,29:125,30:$VH,32:124,33:$VI,40:120,41:121,44:123,45:$VJ,51:130,55:118,60:$V3,61:$V4,62:$V5,63:$V6,64:$V7},o($VK,[2,64]),{9:$Vx,18:139,38:$Vy},o($Vw,[2,85]),{9:$VL,38:$VM,54:140},o($Vu,[2,81]),{8:$Vb,15:$Vc,21:142,26:$Vd,41:52,66:35,68:36,71:37,77:38,79:$Ve,80:39,85:40,86:$Vf,87:42,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk},{9:$Vx,18:143,38:$Vy},{38:$VN,53:144},{2:$VA,9:$VB,11:119,19:127,20:$VC,22:128,23:$VD,24:126,25:$VE,26:$VF,27:122,28:$VG,29:125,30:$VH,32:124,33:$VI,40:120,41:121,44:123,45:$VJ,51:130,55:146,60:$V3,61:$V4,62:$V5,63:$V6,64:$V7},{9:[1,147]},{9:[2,65]},{9:[2,66]},{9:[2,67]},{9:[2,68]},{9:[2,69]},{9:[2,70]},{9:[2,71]},{9:[2,72]},{9:[2,73]},{9:[2,74]},{9:[2,76]},{26:[1,148]},{15:$Vv,59:[1,149]},{15:[1,150]},{15:[1,151]},{15:[1,152]},{15:[1,153]},{15:[1,154]},{15:[1,155]},{15:[1,156]},{9:$VL,38:$VM,54:157},{9:[1,158]},{2:$VA,9:$VB,11:119,19:127,20:$VC,22:128,23:$VD,24:126,25:$VE,26:$VF,27:122,28:$VG,29:125,30:$VH,32:124,33:$VI,40:120,41:121,44:123,45:$VJ,51:130,55:146,56:[1,159],60:$V3,61:$V4,62:$V5,63:$V6,64:$V7},o($Vw,[2,83],{65:$Vn}),{38:$VN,53:160},{9:[1,161]},{2:$VA,9:$VB,11:119,19:127,20:$VC,22:128,23:$VD,24:126,25:$VE,26:$VF,27:122,28:$VG,29:125,30:$VH,32:124,33:$VI,40:120,41:121,44:123,45:$VJ,51:130,55:146,56:[1,162],60:$V3,61:$V4,62:$V5,63:$V6,64:$V7},{9:[1,163]},o($VK,[2,63]),o($Vm,$V9,{59:$Va}),{8:$Vb,15:$Vc,21:164,26:$Vd,41:52,66:35,68:36,71:37,77:38,79:$Ve,80:39,85:40,86:$Vf,87:42,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk},{8:$Vb,15:$Vc,21:165,26:$Vd,41:52,66:35,68:36,71:37,77:38,79:$Ve,80:39,85:40,86:$Vf,87:42,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk},{8:$Vb,15:$Vc,21:166,26:$Vd,41:52,66:35,68:36,71:37,77:38,79:$Ve,80:39,85:40,86:$Vf,87:42,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk},{11:167,51:130,60:$V3,61:$V4,62:$V5,63:$V6,64:$V7},{8:$Vb,15:$Vc,21:168,26:$Vd,41:52,66:35,68:36,71:37,77:38,79:$Ve,80:39,85:40,86:$Vf,87:42,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk},{26:[1,169]},{8:$Vb,15:$Vc,21:170,26:$Vd,41:52,66:35,68:36,71:37,77:38,79:$Ve,80:39,85:40,86:$Vf,87:42,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk},{16:[1,171]},{9:[1,172]},{9:[2,61]},{9:[2,79]},{9:[1,173]},{9:[2,60]},{8:$Vb,9:[2,78],15:$Vc,21:174,26:$Vd,41:52,66:35,68:36,71:37,77:38,79:$Ve,80:39,85:40,86:$Vf,87:42,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk},o($VK,[2,62]),{9:[2,87],65:$Vn},{16:[1,175],65:$Vn},{16:[1,176],65:$Vn},{34:[1,177]},{16:[1,178],65:$Vn},{16:[1,179]},{16:[1,180],65:$Vn},{9:[2,13]},{9:[2,59]},{9:[2,58]},{9:[2,77],65:$Vn},{9:[2,15]},{17:[1,181]},{8:$Vb,15:$Vc,21:182,26:$Vd,41:52,66:35,68:36,71:37,77:38,79:$Ve,80:39,85:40,86:$Vf,87:42,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk},{17:[1,183]},{9:[2,14]},{9:[2,12]},{9:[1,184]},{34:[1,185],65:$Vn},{9:[1,186]},{9:[1,189],38:[1,188],46:187},{35:190,36:[1,191],37:[1,192]},{9:$VO,31:193,38:$VP},{9:[2,34],38:[1,196]},{38:[1,197]},o($VK,[2,37]),{16:[1,198]},{16:[2,18]},{16:[2,19]},{9:[2,16],38:$VQ},{38:[1,200]},o($VK,[2,22]),{38:[1,202],47:[1,201]},{2:$VR,9:$VS,11:204,19:209,20:$VC,22:210,23:$VD,24:208,25:$VE,26:$VF,27:207,28:$VG,40:205,41:206,49:203,51:130,60:$V3,61:$V4,62:$V5,63:$V6,64:$V7},{17:[1,212]},{38:[1,213]},{9:$VT,11:215,19:222,20:$VC,22:223,23:$VD,24:221,25:$VE,26:$VF,27:220,28:$VG,39:214,40:216,41:217,42:$VU,43:$VV,51:130,60:$V3,61:$V4,62:$V5,63:$V6,64:$V7},{17:[1,224]},{2:$VR,9:$VS,11:204,19:209,20:$VC,22:210,23:$VD,24:208,25:$VE,26:$VF,27:207,28:$VG,40:205,41:206,49:225,51:130,60:$V3,61:$V4,62:$V5,63:$V6,64:$V7},{9:[1,226]},{9:[2,38]},{9:[2,39]},{9:[2,40]},{9:[2,41]},{9:[2,42]},{9:[2,43]},{9:[2,44]},{9:[2,46]},{9:[1,227]},{9:$VT,11:215,19:222,20:$VC,22:223,23:$VD,24:221,25:$VE,26:$VF,27:220,28:$VG,39:228,40:216,41:217,42:$VU,43:$VV,51:130,60:$V3,61:$V4,62:$V5,63:$V6,64:$V7},{9:[1,229]},{9:[2,23]},{9:[2,24]},{9:[2,25]},{9:[2,26]},{9:[2,27]},{9:[2,28]},{9:[2,29]},{9:[2,30]},{9:[2,31]},{9:[1,230]},{9:[1,231]},o($VK,[2,36]),{9:$VO,31:232,38:$VP},{9:[1,233]},o($VK,[2,21]),{38:[1,235],48:234},o($VK,[2,35]),{9:[2,17],38:$VQ},o($VK,[2,20]),{9:[2,33],38:[1,236]},{38:[1,237]},{38:[1,238]},{2:$VW,9:$VX,11:240,19:245,20:$VC,22:246,23:$VD,24:244,25:$VE,26:$VF,27:243,28:$VG,40:241,41:242,50:239,51:130,60:$V3,61:$V4,62:$V5,63:$V6,64:$V7},{2:$VW,9:$VX,11:240,19:245,20:$VC,22:246,23:$VD,24:244,25:$VE,26:$VF,27:243,28:$VG,40:241,41:242,50:248,51:130,60:$V3,61:$V4,62:$V5,63:$V6,64:$V7},{9:[1,249]},{9:[2,49]},{9:[2,50]},{9:[2,51]},{9:[2,52]},{9:[2,53]},{9:[2,54]},{9:[2,55]},{9:[2,57]},{9:[1,250]},o($VK,[2,48]),o($VK,[2,47])],
defaultActions: {3:[2,2],8:[2,8],9:[2,9],12:[2,90],13:[2,91],14:[2,92],15:[2,93],16:[2,94],18:[2,1],119:[2,65],120:[2,66],121:[2,67],122:[2,68],123:[2,69],124:[2,70],125:[2,71],126:[2,72],127:[2,73],128:[2,74],129:[2,76],158:[2,61],159:[2,79],161:[2,60],171:[2,13],172:[2,59],173:[2,58],175:[2,15],179:[2,14],180:[2,12],191:[2,18],192:[2,19],204:[2,38],205:[2,39],206:[2,40],207:[2,41],208:[2,42],209:[2,43],210:[2,44],211:[2,46],215:[2,23],216:[2,24],217:[2,25],218:[2,26],219:[2,27],220:[2,28],221:[2,29],222:[2,30],223:[2,31],240:[2,49],241:[2,50],242:[2,51],243:[2,52],244:[2,53],245:[2,54],246:[2,55],247:[2,57]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	const Tipo = require('./clases/Tipo');
	const Tabla = require('./clases/Tabla');
	const Salida = require("./clases/Salida");
	const Valor = require('./clases/Valor');
	const Operacion = require('./clases/Operacion');
	const Relacion = require('./clases/Relacion');
	const Logica = require('./clases/Logica');
	const Declaracion = require('./clases/Declaracion');
	const Mostrar = require('./clases/Mostrar');
	const Asignacion = require('./clases/Asignacion');
	const Funcion = require('./clases/Funcion');
	const Retorno = require('./clases/Retorno');
	const Llamada = require('./clases/Llamada');
	const Si = require('./clases/Si');
	const Para = require('./clases/Para');
	const Mientras = require('./clases/Mientras');
	const Iteracion = require('./clases/Iteracion');
	const Detener = require('./clases/Detener');
	const Continuar = require('./clases/Continuar');
	const DibujarAST = require('./clases/DibujarAST');
	const DibujarEXP = require('./clases/DibujarEXP');
	const DibujarTS = require('./clases/DibujarTS');
	const Incerteza = require('./clases/Incerteza');
	var tabla = new Tabla(null);
	var salida = new Salida();
	var operaciones = [];
	var operaciones_funcion = [];
	var operaciones_si = [];
	var operaciones_else = [];
	var parametros_metodo = [];
	var valores_llamada = [];
	var operaciones_ciclo = [];


/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:return 38;
break;
case 2:return 9;
break;
case 3:
break;
case 4:// Comentario de una linea
break;
case 5:// comentario multiple lÃ­neas
break;
case 6:return 'IMPORTAR';
break;
case 7:return 7;
break;
case 8:return 61;
break;
case 9:return 62;
break;
case 10:return 64;
break;
case 11:return 60;
break;
case 12:return 63;
break;
case 13:return 13;
break;
case 14:return 91;
break;
case 15:return 92;
break;
case 16:return 56;
break;
case 17:return 14;
break;
case 18:return 45;
break;
case 19:return 47;
break;
case 20:return 33;
break;
case 21:return 30;
break;
case 22:return 42;
break;
case 23:return 43;
break;
case 24:return 28;
break;
case 25:return 25;
break;
case 26:return 20;
break;
case 27:return 23;
break;
case 28:return 58;
break;
case 29:return 17;
break;
case 30:return 34;
break;
case 31:return 'LLAVIZQ';
break;
case 32:return 'LLAVDER';
break;
case 33:return 15;
break;
case 34:return 16;
break;
case 35:return 36;
break;
case 36:return 37;
break;
case 37:return 78;
break;
case 38:return 79;
break;
case 39:return 81;
break;
case 40:return 82;
break;
case 41:return 83;
break;
case 42:return 84;
break;
case 43:return 75;
break;
case 44:return 74;
break;
case 45:return 69;
break;
case 46:return 70;
break;
case 47:return 73;
break;
case 48:return 72;
break;
case 49:return 59;
break;
case 50:return 76;
break;
case 51:return 67
break;
case 52:return 65;
break;
case 53:return 'XOR';
break;
case 54:return 86;
break;
case 55:return 90;
break;
case 56:return 8;
break;
case 57:return 88;
break;
case 58:return 89;
break;
case 59:return 26;
break;
case 60:return 6;
break;
case 61:salida.agregarError(Tipo.LEXICO, "Error en el lexema: " + yy_.yytext, yy_.yylloc.first_line,yy_.yylloc.first_column); console.error('Este es un error lÃ©xico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:[ ]+)/,/^(?:[	])/,/^(?:\n)/,/^(?:[\r]+)/,/^(?:!!.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:Importar\b)/,/^(?:Incerteza\b)/,/^(?:Double\b)/,/^(?:Boolean\b)/,/^(?:String\b)/,/^(?:Int\b)/,/^(?:Char\b)/,/^(?:Void\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:Retorno\b)/,/^(?:Principal\b)/,/^(?:Si\b)/,/^(?:Sino\b)/,/^(?:Para\b)/,/^(?:Mientras\b)/,/^(?:Detener\b)/,/^(?:Continuar\b)/,/^(?:Mostrar\b)/,/^(?:DibujarAST\b)/,/^(?:DibujarEXP\b)/,/^(?:DibujarTS\b)/,/^(?:,)/,/^(?::)/,/^(?:;)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\^)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:!=)/,/^(?:<)/,/^(?:>)/,/^(?:=)/,/^(?:~)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!&)/,/^(?:!)/,/^(?:'([^']|\\n|\\r|\\t)')/,/^(?:[0-9]+\.[0-9]+\b)/,/^(?:[0-9]+\b)/,/^(?:([\"](\\"|[^"])*[^\\][\"])|[\"][\"])/,/^(?:([a-zA-Z"_"])[a-z0-9A-Z"_""Ã±""Ã"]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    //var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}