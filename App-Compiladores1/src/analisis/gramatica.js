/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,9,14,21,82,83,84,85,86],$V1=[2,18],$V2=[1,15],$V3=[1,13],$V4=[1,16],$V5=[1,17],$V6=[1,18],$V7=[1,19],$V8=[1,20],$V9=[1,22],$Va=[1,23],$Vb=[6,9,14,21,82,83,84,85,86],$Vc=[1,34],$Vd=[9,44],$Ve=[2,184],$Vf=[1,50],$Vg=[1,49],$Vh=[1,57],$Vi=[1,52],$Vj=[1,53],$Vk=[1,51],$Vl=[1,47],$Vm=[1,54],$Vn=[1,55],$Vo=[1,56],$Vp=[1,70],$Vq=[1,71],$Vr=[1,72],$Vs=[1,73],$Vt=[1,74],$Vu=[1,75],$Vv=[1,76],$Vw=[1,77],$Vx=[1,78],$Vy=[1,79],$Vz=[1,80],$VA=[1,81],$VB=[1,82],$VC=[1,83],$VD=[1,84],$VE=[1,85],$VF=[9,24,38,44,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102],$VG=[1,90],$VH=[1,95],$VI=[9,38,44,80],$VJ=[2,7,9,13,14,21,82,83,84,85,86],$VK=[24,38],$VL=[9,24,38,44,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101],$VM=[9,24,38,44,90,91,97,98,99,100,101],$VN=[9,24,38,44,90,91,92,93,94,95,96,97,98,99,100,101],$VO=[9,24,38,44,97,98],$VP=[9,24,38,44,97,98,99,100,101],$VQ=[1,131],$VR=[1,130],$VS=[1,138],$VT=[1,151],$VU=[2,170],$VV=[1,153],$VW=[1,159],$VX=[1,160],$VY=[1,158],$VZ=[1,154],$V_=[1,157],$V$=[1,156],$V01=[1,155],$V11=[1,161],$V21=[9,53],$V31=[1,205],$V41=[1,206],$V51=[1,209],$V61=[1,208],$V71=[1,213],$V81=[1,229],$V91=[2,135],$Va1=[1,231],$Vb1=[1,230],$Vc1=[1,232],$Vd1=[1,248],$Ve1=[2,117],$Vf1=[1,239],$Vg1=[1,240],$Vh1=[1,288],$Vi1=[2,150],$Vj1=[1,297],$Vk1=[1,296],$Vl1=[1,301],$Vm1=[1,309],$Vn1=[1,324],$Vo1=[2,100],$Vp1=[1,327],$Vq1=[1,326],$Vr1=[1,325],$Vs1=[1,321],$Vt1=[1,322],$Vu1=[1,359],$Vv1=[1,358],$Vw1=[1,377],$Vx1=[2,82],$Vy1=[1,374],$Vz1=[1,375],$VA1=[1,381],$VB1=[1,394],$VC1=[1,405],$VD1=[2,60],$VE1=[1,403],$VF1=[1,404],$VG1=[1,432],$VH1=[2,46],$VI1=[1,430],$VJ1=[1,431];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"encabezado":4,"instrucciones":5,"EOF":6,"INCERTEZA":7,"numeroIncerteza":8,"SALTO":9,"importacion":10,"ENTERO":11,"DECIMAL":12,"IMPORTAR":13,"ID":14,"PUNTO":15,"CRL":16,"instruccion":17,"declaracion":18,"asignacion":19,"funcion":20,"VOID":21,"PRINCIPAL":22,"PARIZQ":23,"PARDER":24,"DOSPTS":25,"instrucciones_funcion":26,"dibujar_EXP":27,"DIBUJAREXP":28,"expresion":29,"dibujar_TS":30,"DIBUJARTS":31,"dibujar_AST":32,"DIBUJARAST":33,"mostrar":34,"MOSTRAR":35,"CADENA":36,"expresion_mostrar":37,"COMA":38,"mientras":39,"MIENTRAS":40,"instrucciones_para":41,"para":42,"PARA":43,"PTCOMA":44,"aumentar":45,"INCREMENTO":46,"DECREMENTO":47,"mientras_anidado_2":48,"instrucciones_anidadas_2":49,"para_anidado_2":50,"si_anidado_2":51,"SI":52,"TAB":53,"SINO":54,"instrucciones_anidadas_else_2":55,"instruccion_anidadas_else_2":56,"llamada":57,"DETENER":58,"CONTINUAR":59,"instruccion_anidadas_2":60,"mientras_anidado":61,"instrucciones_anidadas":62,"para_anidado":63,"si_anidado":64,"instrucciones_anidadas_else":65,"instruccion_anidadas_else":66,"retorno":67,"instruccion_anidadas":68,"instruccion_para":69,"si":70,"instrucciones_if":71,"instrucciones_else":72,"instruccion_if":73,"instruccion_else":74,"tipo":75,"parametros":76,"instruccion_funcion":77,"RETORNO":78,"lista_valores":79,"IGUAL":80,"identificadores_declaracion":81,"INT":82,"DOUBLE":83,"BOOLEAN":84,"CHAR":85,"STRING":86,"OR":87,"AND":88,"XOR":89,"DOBLE_IGUAL":90,"DIFERENTE":91,"MAYOR":92,"MENOR":93,"MAYOR_IGUAL":94,"MENOR_IGUAL":95,"INCERT":96,"MAS":97,"MENOS":98,"POR":99,"DIVIDIDO":100,"MODULO":101,"POTENCIA":102,"expresion_not":103,"NOT":104,"valores":105,"CARACTER":106,"TRUE":107,"FALSE":108,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",7:"INCERTEZA",9:"SALTO",11:"ENTERO",12:"DECIMAL",13:"IMPORTAR",14:"ID",15:"PUNTO",16:"CRL",21:"VOID",22:"PRINCIPAL",23:"PARIZQ",24:"PARDER",25:"DOSPTS",28:"DIBUJAREXP",31:"DIBUJARTS",33:"DIBUJARAST",35:"MOSTRAR",36:"CADENA",38:"COMA",40:"MIENTRAS",43:"PARA",44:"PTCOMA",46:"INCREMENTO",47:"DECREMENTO",52:"SI",53:"TAB",54:"SINO",58:"DETENER",59:"CONTINUAR",78:"RETORNO",80:"IGUAL",82:"INT",83:"DOUBLE",84:"BOOLEAN",85:"CHAR",86:"STRING",87:"OR",88:"AND",89:"XOR",90:"DOBLE_IGUAL",91:"DIFERENTE",92:"MAYOR",93:"MENOR",94:"MAYOR_IGUAL",95:"MENOR_IGUAL",96:"INCERT",97:"MAS",98:"MENOS",99:"POR",100:"DIVIDIDO",101:"MODULO",102:"POTENCIA",104:"NOT",106:"CARACTER",107:"TRUE",108:"FALSE"},
productions_: [0,[3,3],[3,1],[4,3],[4,1],[4,4],[4,0],[8,1],[8,1],[10,6],[10,5],[5,3],[5,2],[5,1],[17,1],[17,1],[17,1],[17,7],[17,0],[27,4],[30,3],[32,4],[34,4],[34,5],[37,3],[37,2],[39,7],[42,11],[45,1],[45,1],[48,7],[50,11],[51,14],[51,7],[55,7],[55,6],[55,1],[56,1],[56,1],[56,1],[56,1],[56,1],[56,1],[56,1],[56,1],[56,1],[56,0],[56,1],[49,7],[49,6],[49,1],[60,1],[60,1],[60,1],[60,1],[60,1],[60,1],[60,1],[60,1],[60,1],[60,0],[60,1],[61,7],[63,11],[64,13],[64,7],[65,6],[65,5],[65,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,0],[66,1],[62,6],[62,5],[62,1],[68,1],[68,1],[68,1],[68,1],[68,1],[68,1],[68,1],[68,1],[68,1],[68,1],[68,1],[68,1],[68,1],[68,0],[68,1],[41,5],[41,4],[41,1],[69,1],[69,1],[69,1],[69,1],[69,1],[69,1],[69,1],[69,1],[69,1],[69,1],[69,1],[69,1],[69,0],[69,1],[70,12],[70,7],[71,5],[71,4],[71,1],[73,1],[73,1],[73,1],[73,1],[73,1],[73,1],[73,1],[73,1],[73,1],[73,1],[73,1],[73,0],[73,1],[72,5],[72,4],[74,1],[74,1],[74,1],[74,1],[74,1],[74,1],[74,1],[74,1],[74,1],[74,1],[74,1],[74,0],[74,1],[20,8],[20,8],[20,7],[20,7],[26,4],[26,3],[26,1],[77,1],[77,1],[77,1],[77,1],[77,1],[77,1],[77,1],[77,1],[77,1],[77,1],[77,1],[77,0],[77,1],[67,1],[67,2],[57,4],[57,3],[79,3],[79,1],[76,4],[76,2],[19,3],[18,4],[18,2],[81,3],[81,1],[75,1],[75,1],[75,1],[75,1],[75,1],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,1],[103,2],[103,1],[105,1],[105,1],[105,2],[105,2],[105,3],[105,1],[105,1],[105,1],[105,1],[105,1],[105,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

	
		tabla.comprobarIncerteza();
		var nuevaSalida = new Salida();
        nuevaSalida.agregarParametros(salida);
        salida.limpiarSalida();
        for(var i = 0; i< operaciones.length; i++){
            if(operaciones[i]){
                operaciones[i].operar(tabla, salida);
			}	
        }
		var nuevaTabla = new Tabla(tabla);
		var funcionPrincipal = tabla.obtenerFuncion('Principal',0);
		nuevaTabla.setAmbito("Ambito: Funcion Principal");
		if (funcionPrincipal != null){
			funcionPrincipal.operar(nuevaTabla, nuevaSalida);		
		} else {
			nuevaSalida.agregarError(Tipo.SEMANTICO, "No hay funcion principal", yylineno, this._$.first_column); 
		}
		operaciones = [];
		tabla.limpiarTabla();
		return nuevaSalida;
		
	
break;
case 3: case 5:
tabla.agregarIncerteza(new Incerteza("Incerteza", $$[$0-1], yylineno, this._$.first_column));
break;
case 7: case 8: case 15:
this.$ = $$[$0]
break;
case 11:
this.$ = operaciones; if($$[$0-1] != null){operaciones.push($$[$0-1])};
break;
case 12:
if($$[$0-1] != null){operaciones.push($$[$0-1])};
break;
case 13:
salida.agregarError(Tipo.SINTACTICO, "Error en el lexema: " + yytext, yylineno, this._$.first_column); console.error('Este es un error sintÃ¡ctico: ' + yytext + ', en la linea: ' + (yylineno) + ', en la columna: ' + this._$.first_column)
break;
case 14:
if ($$[$0]!=null){this.$ = $$[$0]}
break;
case 16:
 this.$ = null;
break;
case 17:
this.$ = null; tabla.agregarFuncion(new Funcion("Funcion","Principal",null,operaciones_funcion,Tipo.VOID,Tipo.VALOR,yylineno,this._$.first_column), salida); operaciones_funcion = [];
break;
case 18: case 46: case 60: case 82: case 100: case 117: case 135: case 150: case 170:
this.$ = null
break;
case 19:
this.$ = new DibujarEXP("DibujarEXP",$$[$0-1],yylineno,this._$.first_column)
break;
case 20:
this.$ = new DibujarTS("DibujarTS",yylineno,this._$.first_column)
break;
case 21:
this.$ = new DibujarAST("DibujarAST",$$[$0-1],yylineno,this._$.first_column)
break;
case 22:
this.$ = new Mostrar("Mostrar",$$[$0-1],null,0,Tipo.VALOR,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 23:
this.$ = new Mostrar("Mostrar",$$[$0-2],parametros_mostrar,parametros_mostrar.length,Tipo.VALOR,Tipo.VALOR,yylineno,this._$.first_column); parametros_mostrar = [];
break;
case 24: case 25:
parametros_mostrar.push($$[$0]);
break;
case 26:
this.$ = new Mientras("Mientras",$$[$0-4],operaciones_ciclo,operaciones_ciclo.length,_$[$0-6].first_line,this._$.first_column); operaciones_ciclo = [];
break;
case 27:
this.$ = new Para("Para",$$[$0-8],$$[$0-6],$$[$0-4],operaciones_ciclo,operaciones_ciclo.length,_$[$0-10].first_line,this._$.first_column); operaciones_ciclo = [];
break;
case 28:
this.$ = new Iteracion("Iteracion",Tipo.INCREMENTO,yylineno,this._$.first_column);
break;
case 29:
this.$ = new Iteracion("Iteracion",Tipo.DECREMENTO,yylineno,this._$.first_column);
break;
case 30:
this.$ = new Mientras("Mientras",$$[$0-4],operaciones_anidadas_2,operaciones_anidadas_2.length,_$[$0-6].first_line,this._$.first_column); operaciones_anidadas_2 = [];
break;
case 31:
this.$ = new Para("Para",$$[$0-8],$$[$0-6],$$[$0-4],operaciones_anidadas_2,operaciones_anidadas_2.length,_$[$0-10].first_line,this._$.first_column); operaciones_anidadas_2 = [];
break;
case 32:
this.$ = new Si("Si",$$[$0-11],Tipo.SI,operaciones_anidadas_2,operaciones_anidadas_2.length,operaciones_anidadas_else_2,operaciones_anidadas_else_2.length,_$[$0-13].first_line,this._$.first_column); operaciones_anidadas_2 = []; operaciones_anidadas_else_2 = [];
break;
case 33:
this.$ = new Si("Si",$$[$0-4],Tipo.SI,operaciones_anidadas_2,operaciones_anidadas_2.length,null,0,_$[$0-6].first_line,this._$.first_column); operaciones_anidadas_2 = [];
break;
case 37:
if ($$[$0]!=null){operaciones_anidadas_else_2.push($$[$0]);}
break;
case 38: case 39: case 40: case 41: case 42: case 43:
operaciones_anidadas_else_2.push($$[$0]);
break;
case 44:
operaciones_anidadas_else_2.push(new Detener("Detener",yylineno,this._$.first_column));
break;
case 45:
operaciones_anidadas_else_2.push(new Detener("Continuar",yylineno,this._$.first_column));
break;
case 47:
salida.agregarError(Tipo.SINTACTICO, "Error en el lexema: " + yytext, yylineno, this._$.first_column); operaciones_anidadas_else_2 = [];
break;
case 51:
if ($$[$0]!=null){operaciones_anidadas_2.push($$[$0]);}
break;
case 52: case 53: case 54: case 55: case 56: case 57:
operaciones_anidadas_2.push($$[$0]);
break;
case 58:
operaciones_anidadas_2.push(new Detener("Detener",yylineno,this._$.first_column));
break;
case 59:
operaciones_anidadas_2.push(new Detener("Continuar",yylineno,this._$.first_column));
break;
case 61:
salida.agregarError(Tipo.SINTACTICO, "Error en el lexema: " + yytext, yylineno, this._$.first_column); operaciones_anidadas_2 = [];
break;
case 62:
this.$ = new Mientras("Mientras",$$[$0-4],operaciones_anidadas,operaciones_anidadas.length,_$[$0-6].first_line,this._$.first_column); operaciones_anidadas = [];
break;
case 63:
this.$ = new Para("Para",$$[$0-8],$$[$0-6],$$[$0-4],operaciones_anidadas,operaciones_anidadas.length,_$[$0-10].first_line,this._$.first_column); operaciones_anidadas = [];
break;
case 64:
this.$ = new Si("Si",$$[$0-10],Tipo.SI,operaciones_anidadas,operaciones_anidadas.length,operaciones_anidadas_else,operaciones_anidadas_else.length,_$[$0-12].first_line,this._$.first_column); operaciones_anidadas = []; operaciones_anidadas_else = [];
break;
case 65:
this.$ = new Si("Si",$$[$0-4],Tipo.SI,operaciones_anidadas,operaciones_anidadas.length,null,0,_$[$0-6].first_line,this._$.first_column); operaciones_anidadas = [];
break;
case 69:
if ($$[$0]!=null){operaciones_anidadas_else.push($$[$0]);}
break;
case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 81:
operaciones_anidadas_else.push($$[$0]);
break;
case 79:
operaciones_anidadas_else.push(new Detener("Detener",yylineno,this._$.first_column));
break;
case 80:
operaciones_anidadas_else.push(new Detener("Continuar",yylineno,this._$.first_column));
break;
case 83:
salida.agregarError(Tipo.SINTACTICO, "Error en el lexema: " + yytext, yylineno, this._$.first_column); operaciones_anidadas_else = [];
break;
case 87:
if ($$[$0]!=null){operaciones_anidadas.push($$[$0]);}
break;
case 88: case 89: case 90: case 91: case 92: case 93: case 94: case 95: case 96: case 99:
operaciones_anidadas.push($$[$0]);
break;
case 97:
operaciones_anidadas.push(new Detener("Detener",yylineno,this._$.first_column));
break;
case 98:
operaciones_anidadas.push(new Detener("Continuar",yylineno,this._$.first_column));
break;
case 101:
salida.agregarError(Tipo.SINTACTICO, "Error en el lexema: " + yytext, yylineno, this._$.first_column); operaciones_anidadas = [];
break;
case 105:
if ($$[$0]!=null){operaciones_ciclo.push($$[$0]);}
break;
case 106: case 107: case 110: case 111: case 112: case 113: case 114: case 115: case 116:
operaciones_ciclo.push($$[$0]);
break;
case 108:
operaciones_ciclo.push(new Detener("Detener",yylineno,this._$.first_column));
break;
case 109:
operaciones_ciclo.push(new Detener("Continuar",yylineno,this._$.first_column));
break;
case 118:
salida.agregarError(Tipo.SINTACTICO, "Error en el lexema: " + yytext, yylineno, this._$.first_column); operaciones_ciclo = [];
break;
case 119:
this.$ = new Si("Si",$$[$0-9],Tipo.SI,operaciones_si,operaciones_si.length,operaciones_else,operaciones_else.length,_$[$0-11].first_line,this._$.first_column); operaciones_si = []; operaciones_else = [];
break;
case 120:
this.$ = new Si("Si",$$[$0-4],Tipo.SI,operaciones_si,operaciones_si.length,null,0,_$[$0-6].first_line,this._$.first_column); operaciones_si = [];
break;
case 124:
if ($$[$0]!=null){operaciones_si.push($$[$0]);}
break;
case 125: case 126: case 127: case 128: case 129: case 130: case 131: case 132: case 133: case 134:
operaciones_si.push($$[$0]);
break;
case 136:
salida.agregarError(Tipo.SINTACTICO, "Error en el lexema: " + yytext, yylineno, this._$.first_column); operaciones_si = [];
break;
case 139:
if ($$[$0]!=null){operaciones_else.push($$[$0]);}
break;
case 140: case 141: case 142: case 143: case 144: case 145: case 146: case 147: case 148: case 149:
operaciones_else.push($$[$0]);
break;
case 151:
salida.agregarError(Tipo.SINTACTICO, "Error en el lexema: " + yytext, yylineno, this._$.first_column); operaciones_else = [];
break;
case 152:
this.$ = null; tabla.agregarFuncion(new Funcion("Funcion",$$[$0-6],parametros_metodo,operaciones_funcion,$$[$0-7],Tipo.VALOR,_$[$0-7].first_line,this._$.first_column), salida); operaciones_funcion = []; parametros_metodo = []; 
break;
case 153:
this.$ = null; tabla.agregarFuncion(new Funcion("Funcion",$$[$0-6],parametros_metodo,operaciones_funcion,Tipo.VOID,Tipo.VALOR,_$[$0-7].first_line,this._$.first_column), salida); operaciones_funcion = []; parametros_metodo = [];
break;
case 154:
this.$ = null; tabla.agregarFuncion(new Funcion("Funcion",$$[$0-5],null,operaciones_funcion,$$[$0-6],Tipo.VALOR,_$[$0-6].first_line,this._$.first_column), salida); operaciones_funcion = [];
break;
case 155:
this.$ = null; tabla.agregarFuncion(new Funcion("Funcion",$$[$0-5],null,operaciones_funcion,Tipo.VOID,Tipo.VALOR,_$[$0-6].first_line,this._$.first_column), salida); operaciones_funcion = []; 
break;
case 159:
if ($$[$0]!=null){operaciones_funcion.push($$[$0]);}
break;
case 160: case 161: case 162: case 163: case 164: case 165: case 166: case 167: case 168: case 169:
operaciones_funcion.push($$[$0]);
break;
case 171:
salida.agregarError(Tipo.SINTACTICO, "Error en el lexema: " + yytext, yylineno, this._$.first_column);
break;
case 172:
this.$ = new Retorno("Retorno",null, yylineno,this._$.first_column);
break;
case 173:
this.$ = new Retorno("Retorno",$$[$0], yylineno,this._$.first_column);
break;
case 174:
this.$ = new Llamada("Llamada",$$[$0-3],$$[$0-1],Tipo.LLAMADA,Tipo.VALOR,yylineno,this._$.first_column); valores_llamada = [];
break;
case 175:
this.$ = new Llamada("Llamada",$$[$0-2],null,Tipo.LLAMADA,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 176:
this.$.push($$[$0]);
break;
case 177:
this.$ = []; this.$.push($$[$0]);
break;
case 178:
this.$ = parametros_metodo; identificadores_decla.push($$[$0]); parametros_metodo.push(new Declaracion("Declaracion",identificadores_decla,null,$$[$0-1],Tipo.VALOR,yylineno,this._$.first_column)); identificadores_decla = [];
break;
case 179:
identificadores_decla.push($$[$0]); parametros_metodo.push(new Declaracion("Declaracion",identificadores_decla,null,$$[$0-1],Tipo.VALOR,yylineno,this._$.first_column)); identificadores_decla = [];
break;
case 180:
this.$ = new Asignacion("Asignacion",$$[$0-2],$$[$0],yylineno,this._$.first_column);
break;
case 181:
this.$ = new Declaracion("Declaracion",identificadores_decla,$$[$0],$$[$0-3],Tipo.VALOR,_$[$0-3].first_line,this._$.first_column); identificadores_decla = [];
break;
case 182:
this.$ = new Declaracion("Declaracion",identificadores_decla,null,$$[$0-1],Tipo.VALOR,_$[$0-1].first_line,this._$.first_column); identificadores_decla = [];
break;
case 183: case 184:
identificadores_decla.push($$[$0]);
break;
case 185:
this.$ = Tipo.ENTERO;
break;
case 186:
this.$ = Tipo.DECIMAL;
break;
case 187:
this.$ = Tipo.BOOLEAN;
break;
case 188:
this.$ = Tipo.CARACTER;
break;
case 189:
this.$ = Tipo.CADENA;
break;
case 190:
this.$ = new Logica("Logica",$$[$0-2],$$[$0],Tipo.OR,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 191:
this.$ = new Logica("Logica",$$[$0-2],$$[$0],Tipo.AND,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 192:
this.$ = new Logica("Logica",$$[$0-2],$$[$0],Tipo.XOR,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 193:
this.$ = new Relacion("Relacion",$$[$0-2],$$[$0],Tipo.IGUAL,Tipo.VALOR,_$[$0-2].first_line,this._$.first_column);
break;
case 194:
this.$ = new Relacion("Relacion",$$[$0-2],$$[$0],Tipo.DIFERENTE,Tipo.VALOR,_$[$0-2].first_line,this._$.first_column);
break;
case 195:
this.$ = new Relacion("Relacion",$$[$0-2],$$[$0],Tipo.MAYOR,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 196:
this.$ = new Relacion("Relacion",$$[$0-2],$$[$0],Tipo.MENOR,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 197:
this.$ = new Relacion("Relacion",$$[$0-2],$$[$0],Tipo.MAYORIGUAL,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 198:
this.$ = new Relacion("Relacion",$$[$0-2],$$[$0],Tipo.MENORIGUAL,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 199:
this.$ = new Relacion("Relacion",$$[$0-2],$$[$0],Tipo.INCERTEZA,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 200:
this.$ = new Operacion("Operacion",$$[$0-2],$$[$0],Tipo.SUMA,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 201:
this.$ = new Operacion("Operacion",$$[$0-2],$$[$0],Tipo.RESTA,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 202:
this.$ = new Operacion("Operacion",$$[$0-2],$$[$0],Tipo.MULTIPLICACION,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 203:
this.$ = new Operacion("Operacion",$$[$0-2],$$[$0],Tipo.DIVISION,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 204:
this.$ = new Operacion("Operacion",$$[$0-2],$$[$0],Tipo.MODULO,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 205:
this.$ = new Operacion("Operacion",$$[$0-2],$$[$0],Tipo.POTENCIA,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 206: case 208:
this.$ = $$[$0];
break;
case 207:
this.$ = new Logica("Logica",$$[$0],null,Tipo.NOT,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 209:
this.$ = new Valor("Valor", Number($$[$0]),Tipo.DECIMAL,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 210:
this.$ = new Valor("Valor", Number($$[$0]),Tipo.ENTERO,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 211:
this.$ = new Valor("Valor", -1*Number($$[$0]),Tipo.DECIMAL,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 212:
this.$ = new Valor("Valor", -1*Number($$[$0]),Tipo.ENTERO,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 213:
this.$ = $$[$0-1];
break;
case 214:
this.$ = new Valor("Valor", $$[$0],Tipo.CADENA,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 215:
this.$ = new Valor("Valor", $$[$0],Tipo.CARACTER,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 216:
this.$ = new Valor("Valor", true,Tipo.BOOLEAN,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 217:
this.$ = new Valor("Valor", false,Tipo.BOOLEAN,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 218:
this.$ = new Valor("Valor", $$[$0],Tipo.ID,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 219:
this.$ = new Valor("Valor", $$[$0],Tipo.LLAMADA,Tipo.VALOR,yylineno,this._$.first_column);
break;
}
},
table: [o($V0,[2,6],{3:1,4:2,10:5,6:[1,3],7:[1,4],13:[1,6]}),{1:[3]},{2:[1,9],5:7,9:$V1,14:$V2,17:8,18:10,19:11,20:12,21:$V3,75:14,82:$V4,83:$V5,84:$V6,85:$V7,86:$V8},{1:[2,2]},{8:21,11:$V9,12:$Va},o($V0,[2,4],{7:[1,24],13:[1,25]}),{14:[1,26]},{6:[1,27],9:$V1,14:$V2,17:28,18:10,19:11,20:12,21:$V3,75:14,82:$V4,83:$V5,84:$V6,85:$V7,86:$V8},{9:[1,29]},o($Vb,[2,13]),{9:[2,14]},{9:[2,15]},{9:[2,16]},{14:[1,31],22:[1,30]},{14:[1,33],81:32},{80:$Vc},{14:[2,185]},{14:[2,186]},{14:[2,187]},{14:[2,188]},{14:[2,189]},{9:[1,35]},{9:[2,7]},{9:[2,8]},{8:36,11:$V9,12:$Va},{14:[1,37]},{15:[1,38]},{1:[2,1]},{9:[1,39]},o($Vb,[2,12]),{23:[1,40]},{23:[1,41]},o($Vd,[2,182],{38:[1,43],80:[1,42]}),o([9,38,80],$Ve,{23:[1,44]}),{11:$Vf,12:$Vg,14:$Vh,23:$Vi,29:45,36:$Vj,57:58,98:$Vk,103:46,104:$Vl,105:48,106:$Vm,107:$Vn,108:$Vo},o($V0,[2,3]),{9:[1,59]},{15:[1,60]},{16:[1,61]},o($Vb,[2,11]),{24:[1,62]},{24:[1,64],75:65,76:63,82:$V4,83:$V5,84:$V6,85:$V7,86:$V8},{11:$Vf,12:$Vg,14:$Vh,23:$Vi,29:66,36:$Vj,57:58,98:$Vk,103:46,104:$Vl,105:48,106:$Vm,107:$Vn,108:$Vo},{14:[1,67]},{24:[1,69],75:65,76:68,82:$V4,83:$V5,84:$V6,85:$V7,86:$V8},{9:[2,180],87:$Vp,88:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC,101:$VD,102:$VE},o($VF,[2,206]),{11:$Vf,12:$Vg,14:$Vh,23:$Vi,36:$Vj,57:58,98:$Vk,103:86,104:$Vl,105:48,106:$Vm,107:$Vn,108:$Vo},o($VF,[2,208]),o($VF,[2,209]),o($VF,[2,210]),{11:[1,88],12:[1,87]},{11:$Vf,12:$Vg,14:$Vh,23:$Vi,29:89,36:$Vj,57:58,98:$Vk,103:46,104:$Vl,105:48,106:$Vm,107:$Vn,108:$Vo},o($VF,[2,214]),o($VF,[2,215]),o($VF,[2,216]),o($VF,[2,217]),o($VF,[2,218],{23:$VG}),o($VF,[2,219]),o($V0,[2,5]),{16:[1,91]},{9:[1,92]},{25:[1,93]},{24:[1,94],38:$VH},{25:[1,96]},{14:[1,97]},o($Vd,[2,181],{87:$Vp,88:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC,101:$VD,102:$VE}),o($VI,[2,183]),{24:[1,98],38:$VH},{25:[1,99]},{11:$Vf,12:$Vg,14:$Vh,23:$Vi,29:100,36:$Vj,57:58,98:$Vk,103:46,104:$Vl,105:48,106:$Vm,107:$Vn,108:$Vo},{11:$Vf,12:$Vg,14:$Vh,23:$Vi,29:101,36:$Vj,57:58,98:$Vk,103:46,104:$Vl,105:48,106:$Vm,107:$Vn,108:$Vo},{11:$Vf,12:$Vg,14:$Vh,23:$Vi,29:102,36:$Vj,57:58,98:$Vk,103:46,104:$Vl,105:48,106:$Vm,107:$Vn,108:$Vo},{11:$Vf,12:$Vg,14:$Vh,23:$Vi,29:103,36:$Vj,57:58,98:$Vk,103:46,104:$Vl,105:48,106:$Vm,107:$Vn,108:$Vo},{11:$Vf,12:$Vg,14:$Vh,23:$Vi,29:104,36:$Vj,57:58,98:$Vk,103:46,104:$Vl,105:48,106:$Vm,107:$Vn,108:$Vo},{11:$Vf,12:$Vg,14:$Vh,23:$Vi,29:105,36:$Vj,57:58,98:$Vk,103:46,104:$Vl,105:48,106:$Vm,107:$Vn,108:$Vo},{11:$Vf,12:$Vg,14:$Vh,23:$Vi,29:106,36:$Vj,57:58,98:$Vk,103:46,104:$Vl,105:48,106:$Vm,107:$Vn,108:$Vo},{11:$Vf,12:$Vg,14:$Vh,23:$Vi,29:107,36:$Vj,57:58,98:$Vk,103:46,104:$Vl,105:48,106:$Vm,107:$Vn,108:$Vo},{11:$Vf,12:$Vg,14:$Vh,23:$Vi,29:108,36:$Vj,57:58,98:$Vk,103:46,104:$Vl,105:48,106:$Vm,107:$Vn,108:$Vo},{11:$Vf,12:$Vg,14:$Vh,23:$Vi,29:109,36:$Vj,57:58,98:$Vk,103:46,104:$Vl,105:48,106:$Vm,107:$Vn,108:$Vo},{11:$Vf,12:$Vg,14:$Vh,23:$Vi,29:110,36:$Vj,57:58,98:$Vk,103:46,104:$Vl,105:48,106:$Vm,107:$Vn,108:$Vo},{11:$Vf,12:$Vg,14:$Vh,23:$Vi,29:111,36:$Vj,57:58,98:$Vk,103:46,104:$Vl,105:48,106:$Vm,107:$Vn,108:$Vo},{11:$Vf,12:$Vg,14:$Vh,23:$Vi,29:112,36:$Vj,57:58,98:$Vk,103:46,104:$Vl,105:48,106:$Vm,107:$Vn,108:$Vo},{11:$Vf,12:$Vg,14:$Vh,23:$Vi,29:113,36:$Vj,57:58,98:$Vk,103:46,104:$Vl,105:48,106:$Vm,107:$Vn,108:$Vo},{11:$Vf,12:$Vg,14:$Vh,23:$Vi,29:114,36:$Vj,57:58,98:$Vk,103:46,104:$Vl,105:48,106:$Vm,107:$Vn,108:$Vo},{11:$Vf,12:$Vg,14:$Vh,23:$Vi,29:115,36:$Vj,57:58,98:$Vk,103:46,104:$Vl,105:48,106:$Vm,107:$Vn,108:$Vo},o($VF,[2,207]),o($VF,[2,211]),o($VF,[2,212]),{24:[1,116],87:$Vp,88:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC,101:$VD,102:$VE},{11:$Vf,12:$Vg,14:$Vh,23:$Vi,24:[1,118],29:119,36:$Vj,57:58,79:117,98:$Vk,103:46,104:$Vl,105:48,106:$Vm,107:$Vn,108:$Vo},{9:[1,120]},o($VJ,[2,10]),{9:[1,121]},{25:[1,122]},{75:123,82:$V4,83:$V5,84:$V6,85:$V7,86:$V8},{9:[1,124]},o($VK,[2,179]),{25:[1,125]},{9:[1,126]},o([9,24,38,44,87,89,90,91,92,93,94,95,96,97,98,99,100,101],[2,190],{88:$Vq,102:$VE}),o($VL,[2,191],{102:$VE}),o([9,24,38,44,89,90,91,92,93,94,95,96,97,98,99,100,101],[2,192],{87:$Vp,88:$Vq,102:$VE}),o($VM,[2,193],{87:$Vp,88:$Vq,89:$Vr,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,102:$VE}),o($VM,[2,194],{87:$Vp,88:$Vq,89:$Vr,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,102:$VE}),o($VN,[2,195],{87:$Vp,88:$Vq,89:$Vr,102:$VE}),o($VN,[2,196],{87:$Vp,88:$Vq,89:$Vr,102:$VE}),o($VN,[2,197],{87:$Vp,88:$Vq,89:$Vr,102:$VE}),o($VN,[2,198],{87:$Vp,88:$Vq,89:$Vr,102:$VE}),o($VN,[2,199],{87:$Vp,88:$Vq,89:$Vr,102:$VE}),o($VO,[2,200],{87:$Vp,88:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,99:$VB,100:$VC,101:$VD,102:$VE}),o($VO,[2,201],{87:$Vp,88:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,99:$VB,100:$VC,101:$VD,102:$VE}),o($VP,[2,202],{87:$Vp,88:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,102:$VE}),o($VP,[2,203],{87:$Vp,88:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,102:$VE}),o($VP,[2,204],{87:$Vp,88:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,102:$VE}),o($VL,[2,205],{102:$VE}),o($VF,[2,213]),{24:[1,127],38:[1,128]},o($VF,[2,175]),o($VK,[2,177],{87:$Vp,88:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC,101:$VD,102:$VE}),o($VJ,[2,9]),{9:$VQ,26:129,53:$VR},{9:[1,132]},{14:[1,133]},{9:$VQ,26:134,53:$VR},{9:[1,135]},{9:$VQ,26:136,53:$VR},o($VF,[2,174]),{11:$Vf,12:$Vg,14:$Vh,23:$Vi,29:137,36:$Vj,57:58,98:$Vk,103:46,104:$Vl,105:48,106:$Vm,107:$Vn,108:$Vo},{9:[2,17],53:$VS},{2:$VT,9:$VU,14:$VV,18:140,19:141,27:148,28:$VW,30:149,31:$VX,32:147,33:$VY,34:143,35:$VZ,39:146,40:$V_,42:145,43:$V$,52:$V01,57:142,67:150,70:144,75:152,77:139,78:$V11,82:$V4,83:$V5,84:$V6,85:$V7,86:$V8},o($V21,[2,158]),{9:$VQ,26:162,53:$VR},o($VK,[2,178]),{9:[2,155],53:$VS},{9:$VQ,26:163,53:$VR},{9:[2,154],53:$VS},o($VK,[2,176],{87:$Vp,88:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC,101:$VD,102:$VE}),{2:$VT,9:$VU,14:$VV,18:140,19:141,27:148,28:$VW,30:149,31:$VX,32:147,33:$VY,34:143,35:$VZ,39:146,40:$V_,42:145,43:$V$,52:$V01,57:142,67:150,70:144,75:152,77:164,78:$V11,82:$V4,83:$V5,84:$V6,85:$V7,86:$V8},{9:[1,165]},{9:[2,159]},{9:[2,160]},{9:[2,161]},{9:[2,162]},{9:[2,163]},{9:[2,164]},{9:[2,165]},{9:[2,166]},{9:[2,167]},{9:[2,168]},{9:[2,169]},{9:[2,171]},{14:[1,166],81:32},{23:$VG,80:$Vc},{23:[1,167]},{23:[1,168]},{23:[1,169]},{23:[1,170]},{23:[1,171]},{23:[1,172]},{23:[1,173]},{9:[2,172],11:$Vf,12:$Vg,14:$Vh,23:$Vi,29:174,36:$Vj,57:58,98:$Vk,103:46,104:$Vl,105:48,106:$Vm,107:$Vn,108:$Vo},{9:[2,153],53:$VS},{9:[2,152],53:$VS},{9:[1,175]},o($V21,[2,157]),o($VI,$Ve),{36:[1,176]},{11:$Vf,12:$Vg,14:$Vh,23:$Vi,29:177,36:$Vj,57:58,98:$Vk,103:46,104:$Vl,105:48,106:$Vm,107:$Vn,108:$Vo},{18:178,75:152,82:$V4,83:$V5,84:$V6,85:$V7,86:$V8},{11:$Vf,12:$Vg,14:$Vh,23:$Vi,29:179,36:$Vj,57:58,98:$Vk,103:46,104:$Vl,105:48,106:$Vm,107:$Vn,108:$Vo},{14:[1,180]},{11:$Vf,12:$Vg,14:$Vh,23:$Vi,29:181,36:$Vj,57:58,98:$Vk,103:46,104:$Vl,105:48,106:$Vm,107:$Vn,108:$Vo},{24:[1,182]},{9:[2,173],87:$Vp,88:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC,101:$VD,102:$VE},o($V21,[2,156]),{24:[1,183],37:184,38:[1,185]},{24:[1,186],87:$Vp,88:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC,101:$VD,102:$VE},{44:[1,187]},{24:[1,188],87:$Vp,88:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC,101:$VD,102:$VE},{24:[1,189]},{24:[1,190],87:$Vp,88:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC,101:$VD,102:$VE},{9:[2,20]},{9:[2,22]},{24:[1,191],38:[1,192]},{11:$Vf,12:$Vg,14:$Vh,23:$Vi,29:193,36:$Vj,57:58,98:$Vk,103:46,104:$Vl,105:48,106:$Vm,107:$Vn,108:$Vo},{25:[1,194]},{11:$Vf,12:$Vg,14:$Vh,23:$Vi,29:195,36:$Vj,57:58,98:$Vk,103:46,104:$Vl,105:48,106:$Vm,107:$Vn,108:$Vo},{25:[1,196]},{9:[2,21]},{9:[2,19]},{9:[2,23]},{11:$Vf,12:$Vg,14:$Vh,23:$Vi,29:197,36:$Vj,57:58,98:$Vk,103:46,104:$Vl,105:48,106:$Vm,107:$Vn,108:$Vo},o($VK,[2,25],{87:$Vp,88:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC,101:$VD,102:$VE}),{9:[1,198]},{44:[1,199],87:$Vp,88:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC,101:$VD,102:$VE},{9:[1,200]},o($VK,[2,24],{87:$Vp,88:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC,101:$VD,102:$VE}),{9:[1,203],53:[1,202],71:201},{45:204,46:$V31,47:$V41},{9:$V51,41:207,53:$V61},{9:[2,120],53:[1,210]},{53:[1,211]},o($V21,[2,123]),{24:[1,212]},{24:[2,28]},{24:[2,29]},{9:[2,26],53:$V71},{53:[1,214]},o($V21,[2,104]),{53:[1,216],54:[1,215]},{2:$V81,9:$V91,14:$VV,18:218,19:219,27:223,28:$VW,30:224,31:$VX,32:222,33:$VY,34:221,35:$VZ,40:$Va1,43:$Vb1,52:$Vc1,57:220,61:226,63:225,64:227,67:228,73:217,75:152,78:$V11,82:$V4,83:$V5,84:$V6,85:$V7,86:$V8},{25:[1,233]},{53:[1,234]},{2:$Vd1,9:$Ve1,14:$VV,18:236,19:237,27:243,28:$VW,30:244,31:$VX,32:242,33:$VY,34:241,35:$VZ,40:$Va1,43:$Vb1,52:$Vc1,57:238,58:$Vf1,59:$Vg1,61:246,63:245,64:247,69:235,75:152,82:$V4,83:$V5,84:$V6,85:$V7,86:$V8},{25:[1,249]},{2:$V81,9:$V91,14:$VV,18:218,19:219,27:223,28:$VW,30:224,31:$VX,32:222,33:$VY,34:221,35:$VZ,40:$Va1,43:$Vb1,52:$Vc1,57:220,61:226,63:225,64:227,67:228,73:250,75:152,78:$V11,82:$V4,83:$V5,84:$V6,85:$V7,86:$V8},{9:[1,251]},{9:[2,124]},{9:[2,125]},{9:[2,126]},{9:[2,127]},{9:[2,128]},{9:[2,129]},{9:[2,130]},{9:[2,131]},{9:[2,132]},{9:[2,133]},{9:[2,134]},{9:[2,136]},{23:[1,252]},{23:[1,253]},{23:[1,254]},{9:[1,255]},{2:$Vd1,9:$Ve1,14:$VV,18:236,19:237,27:243,28:$VW,30:244,31:$VX,32:242,33:$VY,34:241,35:$VZ,40:$Va1,43:$Vb1,52:$Vc1,57:238,58:$Vf1,59:$Vg1,61:246,63:245,64:247,69:256,75:152,82:$V4,83:$V5,84:$V6,85:$V7,86:$V8},{9:[1,257]},{9:[2,105]},{9:[2,106]},{9:[2,107]},{9:[2,108]},{9:[2,109]},{9:[2,110]},{9:[2,111]},{9:[2,112]},{9:[2,113]},{9:[2,114]},{9:[2,115]},{9:[2,116]},{9:[2,118]},{9:[1,258]},{9:[1,259]},o($V21,[2,122]),{18:260,75:152,82:$V4,83:$V5,84:$V6,85:$V7,86:$V8},{11:$Vf,12:$Vg,14:$Vh,23:$Vi,29:261,36:$Vj,57:58,98:$Vk,103:46,104:$Vl,105:48,106:$Vm,107:$Vn,108:$Vo},{11:$Vf,12:$Vg,14:$Vh,23:$Vi,29:262,36:$Vj,57:58,98:$Vk,103:46,104:$Vl,105:48,106:$Vm,107:$Vn,108:$Vo},{9:$V51,41:263,53:$V61},{9:[1,264]},o($V21,[2,103]),{53:[1,266],72:265},o($V21,[2,121]),{44:[1,267]},{24:[1,268],87:$Vp,88:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC,101:$VD,102:$VE},{24:[1,269],87:$Vp,88:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC,101:$VD,102:$VE},{9:[2,27],53:$V71},o($V21,[2,102]),{9:[2,119],53:[1,270]},{53:[1,271]},{11:$Vf,12:$Vg,14:$Vh,23:$Vi,29:272,36:$Vj,57:58,98:$Vk,103:46,104:$Vl,105:48,106:$Vm,107:$Vn,108:$Vo},{25:[1,273]},{25:[1,274]},{53:[1,275]},{2:$Vh1,9:$Vi1,14:$VV,18:277,19:278,27:282,28:$VW,30:283,31:$VX,32:281,33:$VY,34:280,35:$VZ,40:$Va1,43:$Vb1,52:$Vc1,57:279,61:285,63:284,64:286,67:287,74:276,75:152,78:$V11,82:$V4,83:$V5,84:$V6,85:$V7,86:$V8},{44:[1,289],87:$Vp,88:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC,101:$VD,102:$VE},{9:[1,290]},{9:[1,291]},{2:$Vh1,9:$Vi1,14:$VV,18:277,19:278,27:282,28:$VW,30:283,31:$VX,32:281,33:$VY,34:280,35:$VZ,40:$Va1,43:$Vb1,52:$Vc1,57:279,61:285,63:284,64:286,67:287,74:292,75:152,78:$V11,82:$V4,83:$V5,84:$V6,85:$V7,86:$V8},{9:[1,293]},{9:[2,139]},{9:[2,140]},{9:[2,141]},{9:[2,142]},{9:[2,143]},{9:[2,144]},{9:[2,145]},{9:[2,146]},{9:[2,147]},{9:[2,148]},{9:[2,149]},{9:[2,151]},{45:294,46:$V31,47:$V41},{9:$Vj1,53:$Vk1,62:295},{9:$Vj1,53:$Vk1,62:298},{9:[1,299]},o($V21,[2,138]),{24:[1,300]},{9:[2,62],53:$Vl1},{53:[1,302]},o($V21,[2,86]),{9:[2,65],53:[1,303]},o($V21,[2,137]),{25:[1,304]},{53:[1,305]},{53:[1,306]},{53:[1,307]},{9:[1,308]},{53:$Vm1},{2:$Vn1,9:$Vo1,14:$VV,18:311,19:312,27:316,28:$VW,30:317,31:$VX,32:315,33:$VY,34:314,35:$VZ,40:$Vp1,43:$Vq1,48:320,50:319,51:318,52:$Vr1,57:313,58:$Vs1,59:$Vt1,67:323,68:310,75:152,78:$V11,82:$V4,83:$V5,84:$V6,85:$V7,86:$V8},{53:$Vm1,54:[1,328]},{9:$Vj1,53:$Vk1,62:329},{2:$Vn1,9:$Vo1,14:$VV,18:311,19:312,27:316,28:$VW,30:317,31:$VX,32:315,33:$VY,34:314,35:$VZ,40:$Vp1,43:$Vq1,48:320,50:319,51:318,52:$Vr1,57:313,58:$Vs1,59:$Vt1,67:323,68:330,75:152,78:$V11,82:$V4,83:$V5,84:$V6,85:$V7,86:$V8},{9:[1,331]},{9:[2,87]},{9:[2,88]},{9:[2,89]},{9:[2,90]},{9:[2,91]},{9:[2,92]},{9:[2,93]},{9:[2,94]},{9:[2,95]},{9:[2,96]},{9:[2,97]},{9:[2,98]},{9:[2,99]},{9:[2,101]},{23:[1,332]},{23:[1,333]},{23:[1,334]},{25:[1,335]},{9:[2,63],53:$Vl1},{9:[1,336]},o($V21,[2,85]),{11:$Vf,12:$Vg,14:$Vh,23:$Vi,29:337,36:$Vj,57:58,98:$Vk,103:46,104:$Vl,105:48,106:$Vm,107:$Vn,108:$Vo},{18:338,75:152,82:$V4,83:$V5,84:$V6,85:$V7,86:$V8},{11:$Vf,12:$Vg,14:$Vh,23:$Vi,29:339,36:$Vj,57:58,98:$Vk,103:46,104:$Vl,105:48,106:$Vm,107:$Vn,108:$Vo},{9:[1,340]},o($V21,[2,84]),{24:[1,341],87:$Vp,88:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC,101:$VD,102:$VE},{44:[1,342]},{24:[1,343],87:$Vp,88:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC,101:$VD,102:$VE},{9:[1,346],53:[1,345],65:344},{25:[1,347]},{11:$Vf,12:$Vg,14:$Vh,23:$Vi,29:348,36:$Vj,57:58,98:$Vk,103:46,104:$Vl,105:48,106:$Vm,107:$Vn,108:$Vo},{25:[1,349]},{9:[2,64],53:[1,350]},{53:[1,351]},o($V21,[2,68]),{9:[1,352]},{44:[1,353],87:$Vp,88:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC,101:$VD,102:$VE},{9:[1,354]},{53:[1,355]},{53:[1,356]},{9:$Vu1,49:357,53:$Vv1},{45:360,46:$V31,47:$V41},{9:$Vu1,49:361,53:$Vv1},{53:[1,362]},{2:$Vw1,9:$Vx1,14:$VV,18:364,19:365,27:369,28:$VW,30:370,31:$VX,32:368,33:$VY,34:367,35:$VZ,40:$Vp1,43:$Vq1,48:373,50:372,51:371,52:$Vr1,57:366,58:$Vy1,59:$Vz1,66:363,67:376,75:152,78:$V11,82:$V4,83:$V5,84:$V6,85:$V7,86:$V8},{9:[2,33],53:[1,378]},{53:[1,379]},o($V21,[2,50]),{24:[1,380]},{9:[2,30],53:$VA1},{2:$Vw1,9:$Vx1,14:$VV,18:364,19:365,27:369,28:$VW,30:370,31:$VX,32:368,33:$VY,34:367,35:$VZ,40:$Vp1,43:$Vq1,48:373,50:372,51:371,52:$Vr1,57:366,58:$Vy1,59:$Vz1,66:382,67:376,75:152,78:$V11,82:$V4,83:$V5,84:$V6,85:$V7,86:$V8},{9:[1,383]},{9:[2,69]},{9:[2,70]},{9:[2,71]},{9:[2,72]},{9:[2,73]},{9:[2,74]},{9:[2,75]},{9:[2,76]},{9:[2,77]},{9:[2,78]},{9:[2,79]},{9:[2,80]},{9:[2,81]},{9:[2,83]},{53:[1,384]},{53:[1,385]},{25:[1,386]},{53:[1,387]},{9:[1,388]},o($V21,[2,67]),{53:[1,389]},{53:[1,390]},{9:[1,391]},{53:[1,392]},o($V21,[2,66]),{53:$VB1,54:[1,393]},{2:$VC1,9:$VD1,14:$VV,18:396,19:397,27:401,28:$VW,30:402,31:$VX,32:400,33:$VY,34:399,35:$VZ,57:398,58:$VE1,59:$VF1,60:395,75:152,82:$V4,83:$V5,84:$V6,85:$V7,86:$V8},{9:$Vu1,49:406,53:$Vv1},{53:$VB1},{25:[1,407]},{2:$VC1,9:$VD1,14:$VV,18:396,19:397,27:401,28:$VW,30:402,31:$VX,32:400,33:$VY,34:399,35:$VZ,57:398,58:$VE1,59:$VF1,60:408,75:152,82:$V4,83:$V5,84:$V6,85:$V7,86:$V8},{9:[1,409]},{9:[2,51]},{9:[2,52]},{9:[2,53]},{9:[2,54]},{9:[2,55]},{9:[2,56]},{9:[2,57]},{9:[2,58]},{9:[2,59]},{9:[2,61]},{9:[2,31],53:$VA1},{9:[1,410]},{9:[1,411]},o($V21,[2,49]),{9:[1,414],53:[1,413],55:412},o($V21,[2,48]),{9:[2,32],53:[1,415]},{53:[1,416]},o($V21,[2,36]),{53:[1,417]},{53:[1,418]},{53:[1,419]},{53:[1,420]},{53:[1,421]},{2:$VG1,9:$VH1,14:$VV,18:423,19:424,27:428,28:$VW,30:429,31:$VX,32:427,33:$VY,34:426,35:$VZ,56:422,57:425,58:$VI1,59:$VJ1,75:152,82:$V4,83:$V5,84:$V6,85:$V7,86:$V8},{2:$VG1,9:$VH1,14:$VV,18:423,19:424,27:428,28:$VW,30:429,31:$VX,32:427,33:$VY,34:426,35:$VZ,56:433,57:425,58:$VI1,59:$VJ1,75:152,82:$V4,83:$V5,84:$V6,85:$V7,86:$V8},{9:[1,434]},{9:[2,37]},{9:[2,38]},{9:[2,39]},{9:[2,40]},{9:[2,41]},{9:[2,42]},{9:[2,43]},{9:[2,44]},{9:[2,45]},{9:[2,47]},{9:[1,435]},o($V21,[2,35]),o($V21,[2,34])],
defaultActions: {3:[2,2],10:[2,14],11:[2,15],12:[2,16],16:[2,185],17:[2,186],18:[2,187],19:[2,188],20:[2,189],22:[2,7],23:[2,8],27:[2,1],140:[2,159],141:[2,160],142:[2,161],143:[2,162],144:[2,163],145:[2,164],146:[2,165],147:[2,166],148:[2,167],149:[2,168],150:[2,169],151:[2,171],182:[2,20],183:[2,22],189:[2,21],190:[2,19],191:[2,23],205:[2,28],206:[2,29],218:[2,124],219:[2,125],220:[2,126],221:[2,127],222:[2,128],223:[2,129],224:[2,130],225:[2,131],226:[2,132],227:[2,133],228:[2,134],229:[2,136],236:[2,105],237:[2,106],238:[2,107],239:[2,108],240:[2,109],241:[2,110],242:[2,111],243:[2,112],244:[2,113],245:[2,114],246:[2,115],247:[2,116],248:[2,118],277:[2,139],278:[2,140],279:[2,141],280:[2,142],281:[2,143],282:[2,144],283:[2,145],284:[2,146],285:[2,147],286:[2,148],287:[2,149],288:[2,151],311:[2,87],312:[2,88],313:[2,89],314:[2,90],315:[2,91],316:[2,92],317:[2,93],318:[2,94],319:[2,95],320:[2,96],321:[2,97],322:[2,98],323:[2,99],324:[2,101],364:[2,69],365:[2,70],366:[2,71],367:[2,72],368:[2,73],369:[2,74],370:[2,75],371:[2,76],372:[2,77],373:[2,78],374:[2,79],375:[2,80],376:[2,81],377:[2,83],396:[2,51],397:[2,52],398:[2,53],399:[2,54],400:[2,55],401:[2,56],402:[2,57],403:[2,58],404:[2,59],405:[2,61],423:[2,37],424:[2,38],425:[2,39],426:[2,40],427:[2,41],428:[2,42],429:[2,43],430:[2,44],431:[2,45],432:[2,47]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	const Tipo = require('./clases/Tipo');
	const Tabla = require('./clases/Tabla');
	const Salida = require("./clases/Salida");
	const Valor = require('./clases/Valor');
	const Operacion = require('./clases/Operacion');
	const Relacion = require('./clases/Relacion');
	const Logica = require('./clases/Logica');
	const Declaracion = require('./clases/Declaracion');
	const Mostrar = require('./clases/Mostrar');
	const Asignacion = require('./clases/Asignacion');
	const Funcion = require('./clases/Funcion');
	const Retorno = require('./clases/Retorno');
	const Llamada = require('./clases/Llamada');
	const Si = require('./clases/Si');
	const Para = require('./clases/Para');
	const Mientras = require('./clases/Mientras');
	const Iteracion = require('./clases/Iteracion');
	const Detener = require('./clases/Detener');
	const Continuar = require('./clases/Continuar');
	const DibujarAST = require('./clases/DibujarAST');
	const DibujarEXP = require('./clases/DibujarEXP');
	const DibujarTS = require('./clases/DibujarTS');
	const Incerteza = require('./clases/Incerteza');
	var tabla = new Tabla(null);
	var salida = new Salida();
	var operaciones = [];
	var operaciones_anidadas = [];
	var operaciones_anidadas_else = [];
	var operaciones_funcion = [];
	var operaciones_si = [];
	var operaciones_else = [];
	var parametros_metodo = [];
	var valores_llamada = [];
	var operaciones_ciclo = [];
	var parametros_mostrar = [];
	var identificadores_decla = [];
	var operaciones_anidadas_2 = [];
	var operaciones_anidadas_else_2 = [];


/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:return 53;
break;
case 2:return 9;
break;
case 3:
break;
case 4:console.log("COM: " + yy_.yytext)
break;
case 5:console.log("COMMULT: " + yy_.yytext)
break;
case 6:return 16;
break;
case 7:return 13;
break;
case 8:return 7;
break;
case 9:return 83;
break;
case 10:return 84;
break;
case 11:return 86;
break;
case 12:return 82;
break;
case 13:return 85;
break;
case 14:return 21;
break;
case 15:return 107;
break;
case 16:return 108;
break;
case 17:return 78;
break;
case 18:return 22;
break;
case 19:return 52;
break;
case 20:return 54;
break;
case 21:return 43;
break;
case 22:return 40;
break;
case 23:return 58;
break;
case 24:return 59;
break;
case 25:return 35;
break;
case 26:return 33;
break;
case 27:return 28;
break;
case 28:return 31;
break;
case 29:return 15;
break;
case 30:return 38;
break;
case 31:return 25;
break;
case 32:return 44;
break;
case 33:return 'LLAVIZQ';
break;
case 34:return 'LLAVDER';
break;
case 35:return 23;
break;
case 36:return 24;
break;
case 37:return 46;
break;
case 38:return 47;
break;
case 39:return 97;
break;
case 40:return 98;
break;
case 41:return 99;
break;
case 42:return 100;
break;
case 43:return 101;
break;
case 44:return 102;
break;
case 45:return 95;
break;
case 46:return 94;
break;
case 47:return 90;
break;
case 48:return 91;
break;
case 49:return 93;
break;
case 50:return 92;
break;
case 51:return 80;
break;
case 52:return 96;
break;
case 53:return 88
break;
case 54:return 87;
break;
case 55:return 89;
break;
case 56:return 104;
break;
case 57:return 106;
break;
case 58:return 12;
break;
case 59:return 11;
break;
case 60:return 36;
break;
case 61:return 14;
break;
case 62:return 6;
break;
case 63:salida.agregarError(Tipo.LEXICO, "Error en el lexema: " + yy_.yytext, yy_.yylloc.first_line,yy_.yylloc.first_column); console.error('Este es un error lÃ©xico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:[ ]+)/,/^(?:[	])/,/^(?:\n)/,/^(?:[\r]+)/,/^(?:!!.*)/,/^(?:[\"][\"][\"][^*]*[*]*([^/*][^*]*[*]+)*[\"][\"][\"])/,/^(?:crl\b)/,/^(?:Importar\b)/,/^(?:Incerteza\b)/,/^(?:Double\b)/,/^(?:Boolean\b)/,/^(?:String\b)/,/^(?:Int\b)/,/^(?:Char\b)/,/^(?:Void\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:Retorno\b)/,/^(?:Principal\b)/,/^(?:Si\b)/,/^(?:Sino\b)/,/^(?:Para\b)/,/^(?:Mientras\b)/,/^(?:Detener\b)/,/^(?:Continuar\b)/,/^(?:Mostrar\b)/,/^(?:DibujarAST\b)/,/^(?:DibujarEXP\b)/,/^(?:DibujarTS\b)/,/^(?:\.)/,/^(?:,)/,/^(?::)/,/^(?:;)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\^)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:!=)/,/^(?:<)/,/^(?:>)/,/^(?:=)/,/^(?:~)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:\|&)/,/^(?:!)/,/^(?:'([^']|\\n|\\r|\\t)')/,/^(?:[0-9]+\.[0-9]+\b)/,/^(?:[0-9]+\b)/,/^(?:([\"](\\"|[^"])*[^\\][\"])|[\"][\"])/,/^(?:([a-zA-Z"_"])[a-z0-9A-Z"_""Ã±""Ã"]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    //var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}