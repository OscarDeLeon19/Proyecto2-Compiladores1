/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,9,12,19,80,81,82,83,84],$V1=[2,16],$V2=[1,15],$V3=[1,13],$V4=[1,16],$V5=[1,17],$V6=[1,18],$V7=[1,19],$V8=[1,20],$V9=[6,9,12,19,80,81,82,83,84],$Va=[1,32],$Vb=[9,42],$Vc=[2,182],$Vd=[1,47],$Ve=[1,55],$Vf=[1,50],$Vg=[1,51],$Vh=[1,49],$Vi=[1,45],$Vj=[1,48],$Vk=[1,52],$Vl=[1,53],$Vm=[1,54],$Vn=[1,68],$Vo=[1,69],$Vp=[1,70],$Vq=[1,71],$Vr=[1,72],$Vs=[1,73],$Vt=[1,74],$Vu=[1,75],$Vv=[1,76],$Vw=[1,77],$Vx=[1,78],$Vy=[1,79],$Vz=[1,80],$VA=[1,81],$VB=[1,82],$VC=[1,83],$VD=[9,22,36,42,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100],$VE=[1,88],$VF=[1,93],$VG=[9,36,42,78],$VH=[2,7,9,11,12,19,80,81,82,83,84],$VI=[22,36],$VJ=[9,22,36,42,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99],$VK=[9,22,36,42,88,89,95,96,97,98,99],$VL=[9,22,36,42,88,89,90,91,92,93,94,95,96,97,98,99],$VM=[9,22,36,42,95,96],$VN=[9,22,36,42,95,96,97,98,99],$VO=[1,129],$VP=[1,128],$VQ=[1,136],$VR=[1,149],$VS=[2,168],$VT=[1,151],$VU=[1,157],$VV=[1,158],$VW=[1,156],$VX=[1,152],$VY=[1,155],$VZ=[1,154],$V_=[1,153],$V$=[1,159],$V01=[9,51],$V11=[1,203],$V21=[1,204],$V31=[1,207],$V41=[1,206],$V51=[1,211],$V61=[1,227],$V71=[2,133],$V81=[1,229],$V91=[1,228],$Va1=[1,230],$Vb1=[1,246],$Vc1=[2,115],$Vd1=[1,237],$Ve1=[1,238],$Vf1=[1,286],$Vg1=[2,148],$Vh1=[1,295],$Vi1=[1,294],$Vj1=[1,299],$Vk1=[1,307],$Vl1=[1,322],$Vm1=[2,98],$Vn1=[1,325],$Vo1=[1,324],$Vp1=[1,323],$Vq1=[1,319],$Vr1=[1,320],$Vs1=[1,357],$Vt1=[1,356],$Vu1=[1,375],$Vv1=[2,80],$Vw1=[1,372],$Vx1=[1,373],$Vy1=[1,379],$Vz1=[1,392],$VA1=[1,403],$VB1=[2,58],$VC1=[1,401],$VD1=[1,402],$VE1=[1,430],$VF1=[2,44],$VG1=[1,428],$VH1=[1,429];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"encabezado":4,"instrucciones":5,"EOF":6,"INCERTEZA":7,"DECIMAL":8,"SALTO":9,"importacion":10,"IMPORTAR":11,"ID":12,"PUNTO":13,"CRL":14,"instruccion":15,"declaracion":16,"asignacion":17,"funcion":18,"VOID":19,"PRINCIPAL":20,"PARIZQ":21,"PARDER":22,"DOSPTS":23,"instrucciones_funcion":24,"dibujar_EXP":25,"DIBUJAREXP":26,"expresion":27,"dibujar_TS":28,"DIBUJARTS":29,"dibujar_AST":30,"DIBUJARAST":31,"mostrar":32,"MOSTRAR":33,"CADENA":34,"expresion_mostrar":35,"COMA":36,"mientras":37,"MIENTRAS":38,"instrucciones_para":39,"para":40,"PARA":41,"PTCOMA":42,"aumentar":43,"INCREMENTO":44,"DECREMENTO":45,"mientras_anidado_2":46,"instrucciones_anidadas_2":47,"para_anidado_2":48,"si_anidado_2":49,"SI":50,"TAB":51,"SINO":52,"instrucciones_anidadas_else_2":53,"instruccion_anidadas_else_2":54,"llamada":55,"DETENER":56,"CONTINUAR":57,"instruccion_anidadas_2":58,"mientras_anidado":59,"instrucciones_anidadas":60,"para_anidado":61,"si_anidado":62,"instrucciones_anidadas_else":63,"instruccion_anidadas_else":64,"retorno":65,"instruccion_anidadas":66,"instruccion_para":67,"si":68,"instrucciones_if":69,"instrucciones_else":70,"instruccion_if":71,"instruccion_else":72,"tipo":73,"parametros":74,"instruccion_funcion":75,"RETORNO":76,"lista_valores":77,"IGUAL":78,"identificadores_declaracion":79,"INT":80,"DOUBLE":81,"BOOLEAN":82,"CHAR":83,"STRING":84,"OR":85,"AND":86,"XOR":87,"DOBLE_IGUAL":88,"DIFERENTE":89,"MAYOR":90,"MENOR":91,"MAYOR_IGUAL":92,"MENOR_IGUAL":93,"INCERT":94,"MAS":95,"MENOS":96,"POR":97,"DIVIDIDO":98,"MODULO":99,"POTENCIA":100,"expresion_not":101,"NOT":102,"valores":103,"ENTERO":104,"CARACTER":105,"TRUE":106,"FALSE":107,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",7:"INCERTEZA",8:"DECIMAL",9:"SALTO",11:"IMPORTAR",12:"ID",13:"PUNTO",14:"CRL",19:"VOID",20:"PRINCIPAL",21:"PARIZQ",22:"PARDER",23:"DOSPTS",26:"DIBUJAREXP",29:"DIBUJARTS",31:"DIBUJARAST",33:"MOSTRAR",34:"CADENA",36:"COMA",38:"MIENTRAS",41:"PARA",42:"PTCOMA",44:"INCREMENTO",45:"DECREMENTO",50:"SI",51:"TAB",52:"SINO",56:"DETENER",57:"CONTINUAR",76:"RETORNO",78:"IGUAL",80:"INT",81:"DOUBLE",82:"BOOLEAN",83:"CHAR",84:"STRING",85:"OR",86:"AND",87:"XOR",88:"DOBLE_IGUAL",89:"DIFERENTE",90:"MAYOR",91:"MENOR",92:"MAYOR_IGUAL",93:"MENOR_IGUAL",94:"INCERT",95:"MAS",96:"MENOS",97:"POR",98:"DIVIDIDO",99:"MODULO",100:"POTENCIA",102:"NOT",104:"ENTERO",105:"CARACTER",106:"TRUE",107:"FALSE"},
productions_: [0,[3,3],[3,1],[4,3],[4,1],[4,4],[4,0],[10,6],[10,5],[5,3],[5,2],[5,1],[15,1],[15,1],[15,1],[15,7],[15,0],[25,4],[28,3],[30,4],[32,4],[32,5],[35,3],[35,2],[37,7],[40,11],[43,1],[43,1],[46,7],[48,11],[49,14],[49,7],[53,7],[53,6],[53,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,0],[54,1],[47,7],[47,6],[47,1],[58,1],[58,1],[58,1],[58,1],[58,1],[58,1],[58,1],[58,1],[58,1],[58,0],[58,1],[59,7],[61,11],[62,13],[62,7],[63,6],[63,5],[63,1],[64,1],[64,1],[64,1],[64,1],[64,1],[64,1],[64,1],[64,1],[64,1],[64,1],[64,1],[64,1],[64,1],[64,0],[64,1],[60,6],[60,5],[60,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,0],[66,1],[39,5],[39,4],[39,1],[67,1],[67,1],[67,1],[67,1],[67,1],[67,1],[67,1],[67,1],[67,1],[67,1],[67,1],[67,1],[67,0],[67,1],[68,12],[68,7],[69,5],[69,4],[69,1],[71,1],[71,1],[71,1],[71,1],[71,1],[71,1],[71,1],[71,1],[71,1],[71,1],[71,1],[71,0],[71,1],[70,5],[70,4],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,0],[72,1],[18,8],[18,8],[18,7],[18,7],[24,4],[24,3],[24,1],[75,1],[75,1],[75,1],[75,1],[75,1],[75,1],[75,1],[75,1],[75,1],[75,1],[75,1],[75,0],[75,1],[65,1],[65,2],[55,4],[55,3],[77,3],[77,1],[74,4],[74,2],[17,3],[16,4],[16,2],[79,3],[79,1],[73,1],[73,1],[73,1],[73,1],[73,1],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,1],[101,2],[101,1],[103,1],[103,1],[103,2],[103,2],[103,3],[103,1],[103,1],[103,1],[103,1],[103,1],[103,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

	
		tabla.comprobarIncerteza();
		var nuevaSalida = new Salida();
        nuevaSalida.agregarParametros(salida);
        salida.limpiarSalida();
        for(var i = 0; i< operaciones.length; i++){
            if(operaciones[i]){
                operaciones[i].operar(tabla, salida);
			}	
        }
		var nuevaTabla = new Tabla(tabla);
		var funcionPrincipal = tabla.obtenerFuncion('Principal',0);
		if (funcionPrincipal != null){
			funcionPrincipal.operar(nuevaTabla, nuevaSalida);		
		} else {
			nuevaSalida.agregarError(Tipo.SEMANTICO, "No hay funcion principal", yylineno, this._$.first_column); 
		}
		operaciones = [];
		tabla.limpiarTabla();
		return nuevaSalida;
		
	
break;
case 3: case 5:
tabla.agregarIncerteza(new Incerteza("Incerteza", $$[$0-1], yylineno, this._$.first_column));
break;
case 9:
this.$ = operaciones; if($$[$0-1] != null){operaciones.push($$[$0-1])};
break;
case 10:
if($$[$0-1] != null){operaciones.push($$[$0-1])};
break;
case 11:
salida.agregarError(Tipo.SINTACTICO, "Error en el lexema: " + yytext, yylineno, this._$.first_column); console.error('Este es un error sintÃ¡ctico: ' + yytext + ', en la linea: ' + (yylineno) + ', en la columna: ' + this._$.first_column)
break;
case 12:
if ($$[$0]!=null){this.$ = $$[$0]}
break;
case 13:
this.$ = $$[$0]
break;
case 14:
 this.$ = null;
break;
case 15:
this.$ = null; tabla.agregarFuncion(new Funcion("Funcion","Principal",null,operaciones_funcion,Tipo.VOID,Tipo.VALOR,yylineno,this._$.first_column), salida); operaciones_funcion = [];
break;
case 16: case 44: case 58: case 80: case 98: case 115: case 133: case 148: case 168:
this.$ = null
break;
case 17:
this.$ = new DibujarEXP("DibujarEXP",$$[$0-1],yylineno,this._$.first_column)
break;
case 18:
this.$ = new DibujarTS("DibujarTS",yylineno,this._$.first_column)
break;
case 19:
this.$ = new DibujarAST("DibujarAST",$$[$0-1],yylineno,this._$.first_column)
break;
case 20:
this.$ = new Mostrar("Mostrar",$$[$0-1],null,0,Tipo.VALOR,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 21:
this.$ = new Mostrar("Mostrar",$$[$0-2],parametros_mostrar,parametros_mostrar.length,Tipo.VALOR,Tipo.VALOR,yylineno,this._$.first_column); parametros_mostrar = [];
break;
case 22: case 23:
parametros_mostrar.push($$[$0]);
break;
case 24:
this.$ = new Mientras("Mientras",$$[$0-4],operaciones_ciclo,operaciones_ciclo.length,_$[$0-6].first_line,this._$.first_column); operaciones_ciclo = [];
break;
case 25:
this.$ = new Para("Para",$$[$0-8],$$[$0-6],$$[$0-4],operaciones_ciclo,operaciones_ciclo.length,_$[$0-10].first_line,this._$.first_column); operaciones_ciclo = [];
break;
case 26:
this.$ = new Iteracion("Iteracion",Tipo.INCREMENTO,yylineno,this._$.first_column);
break;
case 27:
this.$ = new Iteracion("Iteracion",Tipo.DECREMENTO,yylineno,this._$.first_column);
break;
case 28:
this.$ = new Mientras("Mientras",$$[$0-4],operaciones_anidadas_2,operaciones_anidadas_2.length,_$[$0-6].first_line,this._$.first_column); operaciones_anidadas_2 = [];
break;
case 29:
this.$ = new Para("Para",$$[$0-8],$$[$0-6],$$[$0-4],operaciones_anidadas_2,operaciones_anidadas_2.length,_$[$0-10].first_line,this._$.first_column); operaciones_anidadas_2 = [];
break;
case 30:
this.$ = new Si("Si",$$[$0-11],Tipo.SI,operaciones_anidadas_2,operaciones_anidadas_2.length,operaciones_anidadas_else_2,operaciones_anidadas_else_2.length,_$[$0-13].first_line,this._$.first_column); operaciones_anidadas_2 = []; operaciones_anidadas_else_2 = [];
break;
case 31:
this.$ = new Si("Si",$$[$0-4],Tipo.SI,operaciones_anidadas_2,operaciones_anidadas_2.length,null,0,_$[$0-6].first_line,this._$.first_column); operaciones_anidadas_2 = [];
break;
case 35:
if ($$[$0]!=null){operaciones_anidadas_else_2.push($$[$0]);}
break;
case 36: case 37: case 38: case 39: case 40: case 41:
operaciones_anidadas_else_2.push($$[$0]);
break;
case 42:
operaciones_anidadas_else_2.push(new Detener("Detener",yylineno,this._$.first_column));
break;
case 43:
operaciones_anidadas_else_2.push(new Detener("Continuar",yylineno,this._$.first_column));
break;
case 45:
salida.agregarError(Tipo.SINTACTICO, "Error en el lexema: " + yytext, yylineno, this._$.first_column); operaciones_anidadas_else_2 = [];
break;
case 49:
if ($$[$0]!=null){operaciones_anidadas_2.push($$[$0]);}
break;
case 50: case 51: case 52: case 53: case 54: case 55:
operaciones_anidadas_2.push($$[$0]);
break;
case 56:
operaciones_anidadas_2.push(new Detener("Detener",yylineno,this._$.first_column));
break;
case 57:
operaciones_anidadas_2.push(new Detener("Continuar",yylineno,this._$.first_column));
break;
case 59:
salida.agregarError(Tipo.SINTACTICO, "Error en el lexema: " + yytext, yylineno, this._$.first_column); operaciones_anidadas_2 = [];
break;
case 60:
this.$ = new Mientras("Mientras",$$[$0-4],operaciones_anidadas,operaciones_anidadas.length,_$[$0-6].first_line,this._$.first_column); operaciones_anidadas = [];
break;
case 61:
this.$ = new Para("Para",$$[$0-8],$$[$0-6],$$[$0-4],operaciones_anidadas,operaciones_anidadas.length,_$[$0-10].first_line,this._$.first_column); operaciones_anidadas = [];
break;
case 62:
this.$ = new Si("Si",$$[$0-10],Tipo.SI,operaciones_anidadas,operaciones_anidadas.length,operaciones_anidadas_else,operaciones_anidadas_else.length,_$[$0-12].first_line,this._$.first_column); operaciones_anidadas = []; operaciones_anidadas_else = [];
break;
case 63:
this.$ = new Si("Si",$$[$0-4],Tipo.SI,operaciones_anidadas,operaciones_anidadas.length,null,0,_$[$0-6].first_line,this._$.first_column); operaciones_anidadas = [];
break;
case 67:
if ($$[$0]!=null){operaciones_anidadas_else.push($$[$0]);}
break;
case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 79:
operaciones_anidadas_else.push($$[$0]);
break;
case 77:
operaciones_anidadas_else.push(new Detener("Detener",yylineno,this._$.first_column));
break;
case 78:
operaciones_anidadas_else.push(new Detener("Continuar",yylineno,this._$.first_column));
break;
case 81:
salida.agregarError(Tipo.SINTACTICO, "Error en el lexema: " + yytext, yylineno, this._$.first_column); operaciones_anidadas_else = [];
break;
case 85:
if ($$[$0]!=null){operaciones_anidadas.push($$[$0]);}
break;
case 86: case 87: case 88: case 89: case 90: case 91: case 92: case 93: case 94: case 97:
operaciones_anidadas.push($$[$0]);
break;
case 95:
operaciones_anidadas.push(new Detener("Detener",yylineno,this._$.first_column));
break;
case 96:
operaciones_anidadas.push(new Detener("Continuar",yylineno,this._$.first_column));
break;
case 99:
salida.agregarError(Tipo.SINTACTICO, "Error en el lexema: " + yytext, yylineno, this._$.first_column); operaciones_anidadas = [];
break;
case 103:
if ($$[$0]!=null){operaciones_ciclo.push($$[$0]);}
break;
case 104: case 105: case 108: case 109: case 110: case 111: case 112: case 113: case 114:
operaciones_ciclo.push($$[$0]);
break;
case 106:
operaciones_ciclo.push(new Detener("Detener",yylineno,this._$.first_column));
break;
case 107:
operaciones_ciclo.push(new Detener("Continuar",yylineno,this._$.first_column));
break;
case 116:
salida.agregarError(Tipo.SINTACTICO, "Error en el lexema: " + yytext, yylineno, this._$.first_column); operaciones_ciclo = [];
break;
case 117:
this.$ = new Si("Si",$$[$0-9],Tipo.SI,operaciones_si,operaciones_si.length,operaciones_else,operaciones_else.length,_$[$0-11].first_line,this._$.first_column); operaciones_si = []; operaciones_else = [];
break;
case 118:
this.$ = new Si("Si",$$[$0-4],Tipo.SI,operaciones_si,operaciones_si.length,null,0,_$[$0-6].first_line,this._$.first_column); operaciones_si = [];
break;
case 122:
if ($$[$0]!=null){operaciones_si.push($$[$0]);}
break;
case 123: case 124: case 125: case 126: case 127: case 128: case 129: case 130: case 131: case 132:
operaciones_si.push($$[$0]);
break;
case 134:
salida.agregarError(Tipo.SINTACTICO, "Error en el lexema: " + yytext, yylineno, this._$.first_column); operaciones_si = [];
break;
case 137:
if ($$[$0]!=null){operaciones_else.push($$[$0]);}
break;
case 138: case 139: case 140: case 141: case 142: case 143: case 144: case 145: case 146: case 147:
operaciones_else.push($$[$0]);
break;
case 149:
salida.agregarError(Tipo.SINTACTICO, "Error en el lexema: " + yytext, yylineno, this._$.first_column); operaciones_else = [];
break;
case 150:
this.$ = null; tabla.agregarFuncion(new Funcion("Funcion",$$[$0-6],parametros_metodo,operaciones_funcion,$$[$0-7],Tipo.VALOR,_$[$0-7].first_line,this._$.first_column), salida); operaciones_funcion = []; parametros_metodo = []; 
break;
case 151:
this.$ = null; tabla.agregarFuncion(new Funcion("Funcion",$$[$0-6],parametros_metodo,operaciones_funcion,Tipo.VOID,Tipo.VALOR,_$[$0-7].first_line,this._$.first_column), salida); operaciones_funcion = []; parametros_metodo = [];
break;
case 152:
this.$ = null; tabla.agregarFuncion(new Funcion("Funcion",$$[$0-5],null,operaciones_funcion,$$[$0-6],Tipo.VALOR,_$[$0-6].first_line,this._$.first_column), salida); operaciones_funcion = [];
break;
case 153:
this.$ = null; tabla.agregarFuncion(new Funcion("Funcion",$$[$0-5],null,operaciones_funcion,Tipo.VOID,Tipo.VALOR,_$[$0-6].first_line,this._$.first_column), salida); operaciones_funcion = []; 
break;
case 157:
if ($$[$0]!=null){operaciones_funcion.push($$[$0]);}
break;
case 158: case 159: case 160: case 161: case 162: case 163: case 164: case 165: case 166: case 167:
operaciones_funcion.push($$[$0]);
break;
case 169:
salida.agregarError(Tipo.SINTACTICO, "Error en el lexema: " + yytext, yylineno, this._$.first_column);
break;
case 170:
this.$ = new Retorno("Retorno",null, yylineno,this._$.first_column);
break;
case 171:
this.$ = new Retorno("Retorno",$$[$0], yylineno,this._$.first_column);
break;
case 172:
this.$ = new Llamada("Llamada",$$[$0-3],$$[$0-1],Tipo.LLAMADA,Tipo.VALOR,yylineno,this._$.first_column); valores_llamada = [];
break;
case 173:
this.$ = new Llamada("Llamada",$$[$0-2],null,Tipo.LLAMADA,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 174:
this.$.push($$[$0]);
break;
case 175:
this.$ = []; this.$.push($$[$0]);
break;
case 176:
this.$ = parametros_metodo; identificadores_decla.push($$[$0]); parametros_metodo.push(new Declaracion("Declaracion",identificadores_decla,null,$$[$0-1],Tipo.VALOR,yylineno,this._$.first_column)); identificadores_decla = [];
break;
case 177:
identificadores_decla.push($$[$0]); parametros_metodo.push(new Declaracion("Declaracion",identificadores_decla,null,$$[$0-1],Tipo.VALOR,yylineno,this._$.first_column)); identificadores_decla = [];
break;
case 178:
this.$ = new Asignacion("Asignacion",$$[$0-2],$$[$0],yylineno,this._$.first_column);
break;
case 179:
this.$ = new Declaracion("Declaracion",identificadores_decla,$$[$0],$$[$0-3],Tipo.VALOR,_$[$0-3].first_line,this._$.first_column); identificadores_decla = [];
break;
case 180:
this.$ = new Declaracion("Declaracion",identificadores_decla,null,$$[$0-1],Tipo.VALOR,_$[$0-1].first_line,this._$.first_column); identificadores_decla = [];
break;
case 181: case 182:
identificadores_decla.push($$[$0]);
break;
case 183:
this.$ = Tipo.ENTERO;
break;
case 184:
this.$ = Tipo.DECIMAL;
break;
case 185:
this.$ = Tipo.BOOLEAN;
break;
case 186:
this.$ = Tipo.CARACTER;
break;
case 187:
this.$ = Tipo.CADENA;
break;
case 188:
this.$ = new Logica("Logica",$$[$0-2],$$[$0],Tipo.OR,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 189:
this.$ = new Logica("Logica",$$[$0-2],$$[$0],Tipo.AND,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 190:
this.$ = new Logica("Logica",$$[$0-2],$$[$0],Tipo.XOR,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 191:
this.$ = new Relacion("Relacion",$$[$0-2],$$[$0],Tipo.IGUAL,Tipo.VALOR,_$[$0-2].first_line,this._$.first_column);
break;
case 192:
this.$ = new Relacion("Relacion",$$[$0-2],$$[$0],Tipo.DIFERENTE,Tipo.VALOR,_$[$0-2].first_line,this._$.first_column);
break;
case 193:
this.$ = new Relacion("Relacion",$$[$0-2],$$[$0],Tipo.MAYOR,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 194:
this.$ = new Relacion("Relacion",$$[$0-2],$$[$0],Tipo.MENOR,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 195:
this.$ = new Relacion("Relacion",$$[$0-2],$$[$0],Tipo.MAYORIGUAL,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 196:
this.$ = new Relacion("Relacion",$$[$0-2],$$[$0],Tipo.MENORIGUAL,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 197:
this.$ = new Relacion("Relacion",$$[$0-2],$$[$0],Tipo.INCERTEZA,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 198:
this.$ = new Operacion("Operacion",$$[$0-2],$$[$0],Tipo.SUMA,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 199:
this.$ = new Operacion("Operacion",$$[$0-2],$$[$0],Tipo.RESTA,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 200:
this.$ = new Operacion("Operacion",$$[$0-2],$$[$0],Tipo.MULTIPLICACION,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 201:
this.$ = new Operacion("Operacion",$$[$0-2],$$[$0],Tipo.DIVISION,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 202:
this.$ = new Operacion("Operacion",$$[$0-2],$$[$0],Tipo.MODULO,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 203:
this.$ = new Operacion("Operacion",$$[$0-2],$$[$0],Tipo.POTENCIA,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 204: case 206:
this.$ = $$[$0];
break;
case 205:
this.$ = new Logica("Logica",$$[$0],null,Tipo.NOT,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 207:
this.$ = new Valor("Valor", Number($$[$0]),Tipo.DECIMAL,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 208:
this.$ = new Valor("Valor", Number($$[$0]),Tipo.ENTERO,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 209:
this.$ = new Valor("Valor", -1*Number($$[$0]),Tipo.DECIMAL,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 210:
this.$ = new Valor("Valor", -1*Number($$[$0]),Tipo.ENTERO,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 211:
this.$ = $$[$0-1];
break;
case 212:
this.$ = new Valor("Valor", $$[$0],Tipo.CADENA,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 213:
this.$ = new Valor("Valor", $$[$0],Tipo.CARACTER,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 214:
this.$ = new Valor("Valor", true,Tipo.BOOLEAN,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 215:
this.$ = new Valor("Valor", false,Tipo.BOOLEAN,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 216:
this.$ = new Valor("Valor", $$[$0],Tipo.ID,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 217:
this.$ = new Valor("Valor", $$[$0],Tipo.LLAMADA,Tipo.VALOR,yylineno,this._$.first_column);
break;
}
},
table: [o($V0,[2,6],{3:1,4:2,10:5,6:[1,3],7:[1,4],11:[1,6]}),{1:[3]},{2:[1,9],5:7,9:$V1,12:$V2,15:8,16:10,17:11,18:12,19:$V3,73:14,80:$V4,81:$V5,82:$V6,83:$V7,84:$V8},{1:[2,2]},{8:[1,21]},o($V0,[2,4],{7:[1,22],11:[1,23]}),{12:[1,24]},{6:[1,25],9:$V1,12:$V2,15:26,16:10,17:11,18:12,19:$V3,73:14,80:$V4,81:$V5,82:$V6,83:$V7,84:$V8},{9:[1,27]},o($V9,[2,11]),{9:[2,12]},{9:[2,13]},{9:[2,14]},{12:[1,29],20:[1,28]},{12:[1,31],79:30},{78:$Va},{12:[2,183]},{12:[2,184]},{12:[2,185]},{12:[2,186]},{12:[2,187]},{9:[1,33]},{8:[1,34]},{12:[1,35]},{13:[1,36]},{1:[2,1]},{9:[1,37]},o($V9,[2,10]),{21:[1,38]},{21:[1,39]},o($Vb,[2,180],{36:[1,41],78:[1,40]}),o([9,36,78],$Vc,{21:[1,42]}),{8:$Vd,12:$Ve,21:$Vf,27:43,34:$Vg,55:56,96:$Vh,101:44,102:$Vi,103:46,104:$Vj,105:$Vk,106:$Vl,107:$Vm},o($V0,[2,3]),{9:[1,57]},{13:[1,58]},{14:[1,59]},o($V9,[2,9]),{22:[1,60]},{22:[1,62],73:63,74:61,80:$V4,81:$V5,82:$V6,83:$V7,84:$V8},{8:$Vd,12:$Ve,21:$Vf,27:64,34:$Vg,55:56,96:$Vh,101:44,102:$Vi,103:46,104:$Vj,105:$Vk,106:$Vl,107:$Vm},{12:[1,65]},{22:[1,67],73:63,74:66,80:$V4,81:$V5,82:$V6,83:$V7,84:$V8},{9:[2,178],85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC},o($VD,[2,204]),{8:$Vd,12:$Ve,21:$Vf,34:$Vg,55:56,96:$Vh,101:84,102:$Vi,103:46,104:$Vj,105:$Vk,106:$Vl,107:$Vm},o($VD,[2,206]),o($VD,[2,207]),o($VD,[2,208]),{8:[1,85],104:[1,86]},{8:$Vd,12:$Ve,21:$Vf,27:87,34:$Vg,55:56,96:$Vh,101:44,102:$Vi,103:46,104:$Vj,105:$Vk,106:$Vl,107:$Vm},o($VD,[2,212]),o($VD,[2,213]),o($VD,[2,214]),o($VD,[2,215]),o($VD,[2,216],{21:$VE}),o($VD,[2,217]),o($V0,[2,5]),{14:[1,89]},{9:[1,90]},{23:[1,91]},{22:[1,92],36:$VF},{23:[1,94]},{12:[1,95]},o($Vb,[2,179],{85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC}),o($VG,[2,181]),{22:[1,96],36:$VF},{23:[1,97]},{8:$Vd,12:$Ve,21:$Vf,27:98,34:$Vg,55:56,96:$Vh,101:44,102:$Vi,103:46,104:$Vj,105:$Vk,106:$Vl,107:$Vm},{8:$Vd,12:$Ve,21:$Vf,27:99,34:$Vg,55:56,96:$Vh,101:44,102:$Vi,103:46,104:$Vj,105:$Vk,106:$Vl,107:$Vm},{8:$Vd,12:$Ve,21:$Vf,27:100,34:$Vg,55:56,96:$Vh,101:44,102:$Vi,103:46,104:$Vj,105:$Vk,106:$Vl,107:$Vm},{8:$Vd,12:$Ve,21:$Vf,27:101,34:$Vg,55:56,96:$Vh,101:44,102:$Vi,103:46,104:$Vj,105:$Vk,106:$Vl,107:$Vm},{8:$Vd,12:$Ve,21:$Vf,27:102,34:$Vg,55:56,96:$Vh,101:44,102:$Vi,103:46,104:$Vj,105:$Vk,106:$Vl,107:$Vm},{8:$Vd,12:$Ve,21:$Vf,27:103,34:$Vg,55:56,96:$Vh,101:44,102:$Vi,103:46,104:$Vj,105:$Vk,106:$Vl,107:$Vm},{8:$Vd,12:$Ve,21:$Vf,27:104,34:$Vg,55:56,96:$Vh,101:44,102:$Vi,103:46,104:$Vj,105:$Vk,106:$Vl,107:$Vm},{8:$Vd,12:$Ve,21:$Vf,27:105,34:$Vg,55:56,96:$Vh,101:44,102:$Vi,103:46,104:$Vj,105:$Vk,106:$Vl,107:$Vm},{8:$Vd,12:$Ve,21:$Vf,27:106,34:$Vg,55:56,96:$Vh,101:44,102:$Vi,103:46,104:$Vj,105:$Vk,106:$Vl,107:$Vm},{8:$Vd,12:$Ve,21:$Vf,27:107,34:$Vg,55:56,96:$Vh,101:44,102:$Vi,103:46,104:$Vj,105:$Vk,106:$Vl,107:$Vm},{8:$Vd,12:$Ve,21:$Vf,27:108,34:$Vg,55:56,96:$Vh,101:44,102:$Vi,103:46,104:$Vj,105:$Vk,106:$Vl,107:$Vm},{8:$Vd,12:$Ve,21:$Vf,27:109,34:$Vg,55:56,96:$Vh,101:44,102:$Vi,103:46,104:$Vj,105:$Vk,106:$Vl,107:$Vm},{8:$Vd,12:$Ve,21:$Vf,27:110,34:$Vg,55:56,96:$Vh,101:44,102:$Vi,103:46,104:$Vj,105:$Vk,106:$Vl,107:$Vm},{8:$Vd,12:$Ve,21:$Vf,27:111,34:$Vg,55:56,96:$Vh,101:44,102:$Vi,103:46,104:$Vj,105:$Vk,106:$Vl,107:$Vm},{8:$Vd,12:$Ve,21:$Vf,27:112,34:$Vg,55:56,96:$Vh,101:44,102:$Vi,103:46,104:$Vj,105:$Vk,106:$Vl,107:$Vm},{8:$Vd,12:$Ve,21:$Vf,27:113,34:$Vg,55:56,96:$Vh,101:44,102:$Vi,103:46,104:$Vj,105:$Vk,106:$Vl,107:$Vm},o($VD,[2,205]),o($VD,[2,209]),o($VD,[2,210]),{22:[1,114],85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC},{8:$Vd,12:$Ve,21:$Vf,22:[1,116],27:117,34:$Vg,55:56,77:115,96:$Vh,101:44,102:$Vi,103:46,104:$Vj,105:$Vk,106:$Vl,107:$Vm},{9:[1,118]},o($VH,[2,8]),{9:[1,119]},{23:[1,120]},{73:121,80:$V4,81:$V5,82:$V6,83:$V7,84:$V8},{9:[1,122]},o($VI,[2,177]),{23:[1,123]},{9:[1,124]},o([9,22,36,42,85,87,88,89,90,91,92,93,94,95,96,97,98,99],[2,188],{86:$Vo,100:$VC}),o($VJ,[2,189],{100:$VC}),o([9,22,36,42,87,88,89,90,91,92,93,94,95,96,97,98,99],[2,190],{85:$Vn,86:$Vo,100:$VC}),o($VK,[2,191],{85:$Vn,86:$Vo,87:$Vp,90:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,100:$VC}),o($VK,[2,192],{85:$Vn,86:$Vo,87:$Vp,90:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,100:$VC}),o($VL,[2,193],{85:$Vn,86:$Vo,87:$Vp,100:$VC}),o($VL,[2,194],{85:$Vn,86:$Vo,87:$Vp,100:$VC}),o($VL,[2,195],{85:$Vn,86:$Vo,87:$Vp,100:$VC}),o($VL,[2,196],{85:$Vn,86:$Vo,87:$Vp,100:$VC}),o($VL,[2,197],{85:$Vn,86:$Vo,87:$Vp,100:$VC}),o($VM,[2,198],{85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,97:$Vz,98:$VA,99:$VB,100:$VC}),o($VM,[2,199],{85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,97:$Vz,98:$VA,99:$VB,100:$VC}),o($VN,[2,200],{85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,100:$VC}),o($VN,[2,201],{85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,100:$VC}),o($VN,[2,202],{85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,100:$VC}),o($VJ,[2,203],{100:$VC}),o($VD,[2,211]),{22:[1,125],36:[1,126]},o($VD,[2,173]),o($VI,[2,175],{85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC}),o($VH,[2,7]),{9:$VO,24:127,51:$VP},{9:[1,130]},{12:[1,131]},{9:$VO,24:132,51:$VP},{9:[1,133]},{9:$VO,24:134,51:$VP},o($VD,[2,172]),{8:$Vd,12:$Ve,21:$Vf,27:135,34:$Vg,55:56,96:$Vh,101:44,102:$Vi,103:46,104:$Vj,105:$Vk,106:$Vl,107:$Vm},{9:[2,15],51:$VQ},{2:$VR,9:$VS,12:$VT,16:138,17:139,25:146,26:$VU,28:147,29:$VV,30:145,31:$VW,32:141,33:$VX,37:144,38:$VY,40:143,41:$VZ,50:$V_,55:140,65:148,68:142,73:150,75:137,76:$V$,80:$V4,81:$V5,82:$V6,83:$V7,84:$V8},o($V01,[2,156]),{9:$VO,24:160,51:$VP},o($VI,[2,176]),{9:[2,153],51:$VQ},{9:$VO,24:161,51:$VP},{9:[2,152],51:$VQ},o($VI,[2,174],{85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC}),{2:$VR,9:$VS,12:$VT,16:138,17:139,25:146,26:$VU,28:147,29:$VV,30:145,31:$VW,32:141,33:$VX,37:144,38:$VY,40:143,41:$VZ,50:$V_,55:140,65:148,68:142,73:150,75:162,76:$V$,80:$V4,81:$V5,82:$V6,83:$V7,84:$V8},{9:[1,163]},{9:[2,157]},{9:[2,158]},{9:[2,159]},{9:[2,160]},{9:[2,161]},{9:[2,162]},{9:[2,163]},{9:[2,164]},{9:[2,165]},{9:[2,166]},{9:[2,167]},{9:[2,169]},{12:[1,164],79:30},{21:$VE,78:$Va},{21:[1,165]},{21:[1,166]},{21:[1,167]},{21:[1,168]},{21:[1,169]},{21:[1,170]},{21:[1,171]},{8:$Vd,9:[2,170],12:$Ve,21:$Vf,27:172,34:$Vg,55:56,96:$Vh,101:44,102:$Vi,103:46,104:$Vj,105:$Vk,106:$Vl,107:$Vm},{9:[2,151],51:$VQ},{9:[2,150],51:$VQ},{9:[1,173]},o($V01,[2,155]),o($VG,$Vc),{34:[1,174]},{8:$Vd,12:$Ve,21:$Vf,27:175,34:$Vg,55:56,96:$Vh,101:44,102:$Vi,103:46,104:$Vj,105:$Vk,106:$Vl,107:$Vm},{16:176,73:150,80:$V4,81:$V5,82:$V6,83:$V7,84:$V8},{8:$Vd,12:$Ve,21:$Vf,27:177,34:$Vg,55:56,96:$Vh,101:44,102:$Vi,103:46,104:$Vj,105:$Vk,106:$Vl,107:$Vm},{12:[1,178]},{8:$Vd,12:$Ve,21:$Vf,27:179,34:$Vg,55:56,96:$Vh,101:44,102:$Vi,103:46,104:$Vj,105:$Vk,106:$Vl,107:$Vm},{22:[1,180]},{9:[2,171],85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC},o($V01,[2,154]),{22:[1,181],35:182,36:[1,183]},{22:[1,184],85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC},{42:[1,185]},{22:[1,186],85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC},{22:[1,187]},{22:[1,188],85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC},{9:[2,18]},{9:[2,20]},{22:[1,189],36:[1,190]},{8:$Vd,12:$Ve,21:$Vf,27:191,34:$Vg,55:56,96:$Vh,101:44,102:$Vi,103:46,104:$Vj,105:$Vk,106:$Vl,107:$Vm},{23:[1,192]},{8:$Vd,12:$Ve,21:$Vf,27:193,34:$Vg,55:56,96:$Vh,101:44,102:$Vi,103:46,104:$Vj,105:$Vk,106:$Vl,107:$Vm},{23:[1,194]},{9:[2,19]},{9:[2,17]},{9:[2,21]},{8:$Vd,12:$Ve,21:$Vf,27:195,34:$Vg,55:56,96:$Vh,101:44,102:$Vi,103:46,104:$Vj,105:$Vk,106:$Vl,107:$Vm},o($VI,[2,23],{85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC}),{9:[1,196]},{42:[1,197],85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC},{9:[1,198]},o($VI,[2,22],{85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC}),{9:[1,201],51:[1,200],69:199},{43:202,44:$V11,45:$V21},{9:$V31,39:205,51:$V41},{9:[2,118],51:[1,208]},{51:[1,209]},o($V01,[2,121]),{22:[1,210]},{22:[2,26]},{22:[2,27]},{9:[2,24],51:$V51},{51:[1,212]},o($V01,[2,102]),{51:[1,214],52:[1,213]},{2:$V61,9:$V71,12:$VT,16:216,17:217,25:221,26:$VU,28:222,29:$VV,30:220,31:$VW,32:219,33:$VX,38:$V81,41:$V91,50:$Va1,55:218,59:224,61:223,62:225,65:226,71:215,73:150,76:$V$,80:$V4,81:$V5,82:$V6,83:$V7,84:$V8},{23:[1,231]},{51:[1,232]},{2:$Vb1,9:$Vc1,12:$VT,16:234,17:235,25:241,26:$VU,28:242,29:$VV,30:240,31:$VW,32:239,33:$VX,38:$V81,41:$V91,50:$Va1,55:236,56:$Vd1,57:$Ve1,59:244,61:243,62:245,67:233,73:150,80:$V4,81:$V5,82:$V6,83:$V7,84:$V8},{23:[1,247]},{2:$V61,9:$V71,12:$VT,16:216,17:217,25:221,26:$VU,28:222,29:$VV,30:220,31:$VW,32:219,33:$VX,38:$V81,41:$V91,50:$Va1,55:218,59:224,61:223,62:225,65:226,71:248,73:150,76:$V$,80:$V4,81:$V5,82:$V6,83:$V7,84:$V8},{9:[1,249]},{9:[2,122]},{9:[2,123]},{9:[2,124]},{9:[2,125]},{9:[2,126]},{9:[2,127]},{9:[2,128]},{9:[2,129]},{9:[2,130]},{9:[2,131]},{9:[2,132]},{9:[2,134]},{21:[1,250]},{21:[1,251]},{21:[1,252]},{9:[1,253]},{2:$Vb1,9:$Vc1,12:$VT,16:234,17:235,25:241,26:$VU,28:242,29:$VV,30:240,31:$VW,32:239,33:$VX,38:$V81,41:$V91,50:$Va1,55:236,56:$Vd1,57:$Ve1,59:244,61:243,62:245,67:254,73:150,80:$V4,81:$V5,82:$V6,83:$V7,84:$V8},{9:[1,255]},{9:[2,103]},{9:[2,104]},{9:[2,105]},{9:[2,106]},{9:[2,107]},{9:[2,108]},{9:[2,109]},{9:[2,110]},{9:[2,111]},{9:[2,112]},{9:[2,113]},{9:[2,114]},{9:[2,116]},{9:[1,256]},{9:[1,257]},o($V01,[2,120]),{16:258,73:150,80:$V4,81:$V5,82:$V6,83:$V7,84:$V8},{8:$Vd,12:$Ve,21:$Vf,27:259,34:$Vg,55:56,96:$Vh,101:44,102:$Vi,103:46,104:$Vj,105:$Vk,106:$Vl,107:$Vm},{8:$Vd,12:$Ve,21:$Vf,27:260,34:$Vg,55:56,96:$Vh,101:44,102:$Vi,103:46,104:$Vj,105:$Vk,106:$Vl,107:$Vm},{9:$V31,39:261,51:$V41},{9:[1,262]},o($V01,[2,101]),{51:[1,264],70:263},o($V01,[2,119]),{42:[1,265]},{22:[1,266],85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC},{22:[1,267],85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC},{9:[2,25],51:$V51},o($V01,[2,100]),{9:[2,117],51:[1,268]},{51:[1,269]},{8:$Vd,12:$Ve,21:$Vf,27:270,34:$Vg,55:56,96:$Vh,101:44,102:$Vi,103:46,104:$Vj,105:$Vk,106:$Vl,107:$Vm},{23:[1,271]},{23:[1,272]},{51:[1,273]},{2:$Vf1,9:$Vg1,12:$VT,16:275,17:276,25:280,26:$VU,28:281,29:$VV,30:279,31:$VW,32:278,33:$VX,38:$V81,41:$V91,50:$Va1,55:277,59:283,61:282,62:284,65:285,72:274,73:150,76:$V$,80:$V4,81:$V5,82:$V6,83:$V7,84:$V8},{42:[1,287],85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC},{9:[1,288]},{9:[1,289]},{2:$Vf1,9:$Vg1,12:$VT,16:275,17:276,25:280,26:$VU,28:281,29:$VV,30:279,31:$VW,32:278,33:$VX,38:$V81,41:$V91,50:$Va1,55:277,59:283,61:282,62:284,65:285,72:290,73:150,76:$V$,80:$V4,81:$V5,82:$V6,83:$V7,84:$V8},{9:[1,291]},{9:[2,137]},{9:[2,138]},{9:[2,139]},{9:[2,140]},{9:[2,141]},{9:[2,142]},{9:[2,143]},{9:[2,144]},{9:[2,145]},{9:[2,146]},{9:[2,147]},{9:[2,149]},{43:292,44:$V11,45:$V21},{9:$Vh1,51:$Vi1,60:293},{9:$Vh1,51:$Vi1,60:296},{9:[1,297]},o($V01,[2,136]),{22:[1,298]},{9:[2,60],51:$Vj1},{51:[1,300]},o($V01,[2,84]),{9:[2,63],51:[1,301]},o($V01,[2,135]),{23:[1,302]},{51:[1,303]},{51:[1,304]},{51:[1,305]},{9:[1,306]},{51:$Vk1},{2:$Vl1,9:$Vm1,12:$VT,16:309,17:310,25:314,26:$VU,28:315,29:$VV,30:313,31:$VW,32:312,33:$VX,38:$Vn1,41:$Vo1,46:318,48:317,49:316,50:$Vp1,55:311,56:$Vq1,57:$Vr1,65:321,66:308,73:150,76:$V$,80:$V4,81:$V5,82:$V6,83:$V7,84:$V8},{51:$Vk1,52:[1,326]},{9:$Vh1,51:$Vi1,60:327},{2:$Vl1,9:$Vm1,12:$VT,16:309,17:310,25:314,26:$VU,28:315,29:$VV,30:313,31:$VW,32:312,33:$VX,38:$Vn1,41:$Vo1,46:318,48:317,49:316,50:$Vp1,55:311,56:$Vq1,57:$Vr1,65:321,66:328,73:150,76:$V$,80:$V4,81:$V5,82:$V6,83:$V7,84:$V8},{9:[1,329]},{9:[2,85]},{9:[2,86]},{9:[2,87]},{9:[2,88]},{9:[2,89]},{9:[2,90]},{9:[2,91]},{9:[2,92]},{9:[2,93]},{9:[2,94]},{9:[2,95]},{9:[2,96]},{9:[2,97]},{9:[2,99]},{21:[1,330]},{21:[1,331]},{21:[1,332]},{23:[1,333]},{9:[2,61],51:$Vj1},{9:[1,334]},o($V01,[2,83]),{8:$Vd,12:$Ve,21:$Vf,27:335,34:$Vg,55:56,96:$Vh,101:44,102:$Vi,103:46,104:$Vj,105:$Vk,106:$Vl,107:$Vm},{16:336,73:150,80:$V4,81:$V5,82:$V6,83:$V7,84:$V8},{8:$Vd,12:$Ve,21:$Vf,27:337,34:$Vg,55:56,96:$Vh,101:44,102:$Vi,103:46,104:$Vj,105:$Vk,106:$Vl,107:$Vm},{9:[1,338]},o($V01,[2,82]),{22:[1,339],85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC},{42:[1,340]},{22:[1,341],85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC},{9:[1,344],51:[1,343],63:342},{23:[1,345]},{8:$Vd,12:$Ve,21:$Vf,27:346,34:$Vg,55:56,96:$Vh,101:44,102:$Vi,103:46,104:$Vj,105:$Vk,106:$Vl,107:$Vm},{23:[1,347]},{9:[2,62],51:[1,348]},{51:[1,349]},o($V01,[2,66]),{9:[1,350]},{42:[1,351],85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC},{9:[1,352]},{51:[1,353]},{51:[1,354]},{9:$Vs1,47:355,51:$Vt1},{43:358,44:$V11,45:$V21},{9:$Vs1,47:359,51:$Vt1},{51:[1,360]},{2:$Vu1,9:$Vv1,12:$VT,16:362,17:363,25:367,26:$VU,28:368,29:$VV,30:366,31:$VW,32:365,33:$VX,38:$Vn1,41:$Vo1,46:371,48:370,49:369,50:$Vp1,55:364,56:$Vw1,57:$Vx1,64:361,65:374,73:150,76:$V$,80:$V4,81:$V5,82:$V6,83:$V7,84:$V8},{9:[2,31],51:[1,376]},{51:[1,377]},o($V01,[2,48]),{22:[1,378]},{9:[2,28],51:$Vy1},{2:$Vu1,9:$Vv1,12:$VT,16:362,17:363,25:367,26:$VU,28:368,29:$VV,30:366,31:$VW,32:365,33:$VX,38:$Vn1,41:$Vo1,46:371,48:370,49:369,50:$Vp1,55:364,56:$Vw1,57:$Vx1,64:380,65:374,73:150,76:$V$,80:$V4,81:$V5,82:$V6,83:$V7,84:$V8},{9:[1,381]},{9:[2,67]},{9:[2,68]},{9:[2,69]},{9:[2,70]},{9:[2,71]},{9:[2,72]},{9:[2,73]},{9:[2,74]},{9:[2,75]},{9:[2,76]},{9:[2,77]},{9:[2,78]},{9:[2,79]},{9:[2,81]},{51:[1,382]},{51:[1,383]},{23:[1,384]},{51:[1,385]},{9:[1,386]},o($V01,[2,65]),{51:[1,387]},{51:[1,388]},{9:[1,389]},{51:[1,390]},o($V01,[2,64]),{51:$Vz1,52:[1,391]},{2:$VA1,9:$VB1,12:$VT,16:394,17:395,25:399,26:$VU,28:400,29:$VV,30:398,31:$VW,32:397,33:$VX,55:396,56:$VC1,57:$VD1,58:393,73:150,80:$V4,81:$V5,82:$V6,83:$V7,84:$V8},{9:$Vs1,47:404,51:$Vt1},{51:$Vz1},{23:[1,405]},{2:$VA1,9:$VB1,12:$VT,16:394,17:395,25:399,26:$VU,28:400,29:$VV,30:398,31:$VW,32:397,33:$VX,55:396,56:$VC1,57:$VD1,58:406,73:150,80:$V4,81:$V5,82:$V6,83:$V7,84:$V8},{9:[1,407]},{9:[2,49]},{9:[2,50]},{9:[2,51]},{9:[2,52]},{9:[2,53]},{9:[2,54]},{9:[2,55]},{9:[2,56]},{9:[2,57]},{9:[2,59]},{9:[2,29],51:$Vy1},{9:[1,408]},{9:[1,409]},o($V01,[2,47]),{9:[1,412],51:[1,411],53:410},o($V01,[2,46]),{9:[2,30],51:[1,413]},{51:[1,414]},o($V01,[2,34]),{51:[1,415]},{51:[1,416]},{51:[1,417]},{51:[1,418]},{51:[1,419]},{2:$VE1,9:$VF1,12:$VT,16:421,17:422,25:426,26:$VU,28:427,29:$VV,30:425,31:$VW,32:424,33:$VX,54:420,55:423,56:$VG1,57:$VH1,73:150,80:$V4,81:$V5,82:$V6,83:$V7,84:$V8},{2:$VE1,9:$VF1,12:$VT,16:421,17:422,25:426,26:$VU,28:427,29:$VV,30:425,31:$VW,32:424,33:$VX,54:431,55:423,56:$VG1,57:$VH1,73:150,80:$V4,81:$V5,82:$V6,83:$V7,84:$V8},{9:[1,432]},{9:[2,35]},{9:[2,36]},{9:[2,37]},{9:[2,38]},{9:[2,39]},{9:[2,40]},{9:[2,41]},{9:[2,42]},{9:[2,43]},{9:[2,45]},{9:[1,433]},o($V01,[2,33]),o($V01,[2,32])],
defaultActions: {3:[2,2],10:[2,12],11:[2,13],12:[2,14],16:[2,183],17:[2,184],18:[2,185],19:[2,186],20:[2,187],25:[2,1],138:[2,157],139:[2,158],140:[2,159],141:[2,160],142:[2,161],143:[2,162],144:[2,163],145:[2,164],146:[2,165],147:[2,166],148:[2,167],149:[2,169],180:[2,18],181:[2,20],187:[2,19],188:[2,17],189:[2,21],203:[2,26],204:[2,27],216:[2,122],217:[2,123],218:[2,124],219:[2,125],220:[2,126],221:[2,127],222:[2,128],223:[2,129],224:[2,130],225:[2,131],226:[2,132],227:[2,134],234:[2,103],235:[2,104],236:[2,105],237:[2,106],238:[2,107],239:[2,108],240:[2,109],241:[2,110],242:[2,111],243:[2,112],244:[2,113],245:[2,114],246:[2,116],275:[2,137],276:[2,138],277:[2,139],278:[2,140],279:[2,141],280:[2,142],281:[2,143],282:[2,144],283:[2,145],284:[2,146],285:[2,147],286:[2,149],309:[2,85],310:[2,86],311:[2,87],312:[2,88],313:[2,89],314:[2,90],315:[2,91],316:[2,92],317:[2,93],318:[2,94],319:[2,95],320:[2,96],321:[2,97],322:[2,99],362:[2,67],363:[2,68],364:[2,69],365:[2,70],366:[2,71],367:[2,72],368:[2,73],369:[2,74],370:[2,75],371:[2,76],372:[2,77],373:[2,78],374:[2,79],375:[2,81],394:[2,49],395:[2,50],396:[2,51],397:[2,52],398:[2,53],399:[2,54],400:[2,55],401:[2,56],402:[2,57],403:[2,59],421:[2,35],422:[2,36],423:[2,37],424:[2,38],425:[2,39],426:[2,40],427:[2,41],428:[2,42],429:[2,43],430:[2,45]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	const Tipo = require('./clases/Tipo');
	const Tabla = require('./clases/Tabla');
	const Salida = require("./clases/Salida");
	const Valor = require('./clases/Valor');
	const Operacion = require('./clases/Operacion');
	const Relacion = require('./clases/Relacion');
	const Logica = require('./clases/Logica');
	const Declaracion = require('./clases/Declaracion');
	const Mostrar = require('./clases/Mostrar');
	const Asignacion = require('./clases/Asignacion');
	const Funcion = require('./clases/Funcion');
	const Retorno = require('./clases/Retorno');
	const Llamada = require('./clases/Llamada');
	const Si = require('./clases/Si');
	const Para = require('./clases/Para');
	const Mientras = require('./clases/Mientras');
	const Iteracion = require('./clases/Iteracion');
	const Detener = require('./clases/Detener');
	const Continuar = require('./clases/Continuar');
	const DibujarAST = require('./clases/DibujarAST');
	const DibujarEXP = require('./clases/DibujarEXP');
	const DibujarTS = require('./clases/DibujarTS');
	const Incerteza = require('./clases/Incerteza');
	var tabla = new Tabla(null);
	var salida = new Salida();
	var operaciones = [];
	var operaciones_anidadas = [];
	var operaciones_anidadas_else = [];
	var operaciones_funcion = [];
	var operaciones_si = [];
	var operaciones_else = [];
	var parametros_metodo = [];
	var valores_llamada = [];
	var operaciones_ciclo = [];
	var parametros_mostrar = [];
	var identificadores_decla = [];
	var operaciones_anidadas_2 = [];
	var operaciones_anidadas_else_2 = [];


/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:return 51;
break;
case 2:return 9;
break;
case 3:
break;
case 4:console.log("COM: " + yy_.yytext)
break;
case 5:console.log("COMMULT: " + yy_.yytext)
break;
case 6:return 14;
break;
case 7:return 11;
break;
case 8:return 7;
break;
case 9:return 81;
break;
case 10:return 82;
break;
case 11:return 84;
break;
case 12:return 80;
break;
case 13:return 83;
break;
case 14:return 19;
break;
case 15:return 106;
break;
case 16:return 107;
break;
case 17:return 76;
break;
case 18:return 20;
break;
case 19:return 50;
break;
case 20:return 52;
break;
case 21:return 41;
break;
case 22:return 38;
break;
case 23:return 56;
break;
case 24:return 57;
break;
case 25:return 33;
break;
case 26:return 31;
break;
case 27:return 26;
break;
case 28:return 29;
break;
case 29:return 13;
break;
case 30:return 36;
break;
case 31:return 23;
break;
case 32:return 42;
break;
case 33:return 'LLAVIZQ';
break;
case 34:return 'LLAVDER';
break;
case 35:return 21;
break;
case 36:return 22;
break;
case 37:return 44;
break;
case 38:return 45;
break;
case 39:return 95;
break;
case 40:return 96;
break;
case 41:return 97;
break;
case 42:return 98;
break;
case 43:return 99;
break;
case 44:return 100;
break;
case 45:return 93;
break;
case 46:return 92;
break;
case 47:return 88;
break;
case 48:return 89;
break;
case 49:return 91;
break;
case 50:return 90;
break;
case 51:return 78;
break;
case 52:return 94;
break;
case 53:return 86
break;
case 54:return 85;
break;
case 55:return 87;
break;
case 56:return 102;
break;
case 57:return 105;
break;
case 58:return 8;
break;
case 59:return 104;
break;
case 60:return 34;
break;
case 61:return 12;
break;
case 62:return 6;
break;
case 63:salida.agregarError(Tipo.LEXICO, "Error en el lexema: " + yy_.yytext, yy_.yylloc.first_line,yy_.yylloc.first_column); console.error('Este es un error lÃ©xico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:[ ]+)/,/^(?:[	])/,/^(?:\n)/,/^(?:[\r]+)/,/^(?:!!.*)/,/^(?:[\"][\"][\"][^*]*[*]*([^/*][^*]*[*]+)*[\"][\"][\"])/,/^(?:crl\b)/,/^(?:Importar\b)/,/^(?:Incerteza\b)/,/^(?:Double\b)/,/^(?:Boolean\b)/,/^(?:String\b)/,/^(?:Int\b)/,/^(?:Char\b)/,/^(?:Void\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:Retorno\b)/,/^(?:Principal\b)/,/^(?:Si\b)/,/^(?:Sino\b)/,/^(?:Para\b)/,/^(?:Mientras\b)/,/^(?:Detener\b)/,/^(?:Continuar\b)/,/^(?:Mostrar\b)/,/^(?:DibujarAST\b)/,/^(?:DibujarEXP\b)/,/^(?:DibujarTS\b)/,/^(?:\.)/,/^(?:,)/,/^(?::)/,/^(?:;)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\^)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:!=)/,/^(?:<)/,/^(?:>)/,/^(?:=)/,/^(?:~)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:\|&)/,/^(?:!)/,/^(?:'([^']|\\n|\\r|\\t)')/,/^(?:[0-9]+\.[0-9]+\b)/,/^(?:[0-9]+\b)/,/^(?:([\"](\\"|[^"])*[^\\][\"])|[\"][\"])/,/^(?:([a-zA-Z"_"])[a-z0-9A-Z"_""Ã±""Ã"]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    //var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}