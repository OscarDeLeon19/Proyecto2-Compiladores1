/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,9,12,19,80,81,82,83,84],$V1=[2,16],$V2=[1,15],$V3=[1,13],$V4=[1,16],$V5=[1,17],$V6=[1,18],$V7=[1,19],$V8=[1,20],$V9=[6,9,12,19,80,81,82,83,84],$Va=[1,32],$Vb=[9,42],$Vc=[2,182],$Vd=[1,53],$Ve=[1,61],$Vf=[1,56],$Vg=[1,57],$Vh=[1,55],$Vi=[1,51],$Vj=[1,54],$Vk=[1,58],$Vl=[1,59],$Vm=[1,60],$Vn=[1,74],$Vo=[9,22,36,42,85],$Vp=[9,22,36,42,85,87],$Vq=[9,22,36,42,85,87,89],$Vr=[9,22,36,42,85,87,89,91,92],$Vs=[9,22,36,42,85,87,89,91,92,94,95,96,97,98],$Vt=[9,22,36,42,85,87,89,91,92,94,95,96,97,98,100,101],$Vu=[1,89],$Vv=[9,22,36,42,85,87,89,91,92,94,95,96,97,98,100,101,103,104,105,106],$Vw=[1,94],$Vx=[1,99],$Vy=[9,36,42,78],$Vz=[2,7,9,11,12,19,80,81,82,83,84],$VA=[22,36],$VB=[9,22,36,42,85,87,89,91,92,94,95,96,97,98,100,101,103,104,105],$VC=[1,135],$VD=[1,134],$VE=[1,142],$VF=[1,155],$VG=[2,168],$VH=[1,157],$VI=[1,163],$VJ=[1,164],$VK=[1,162],$VL=[1,158],$VM=[1,161],$VN=[1,160],$VO=[1,159],$VP=[1,165],$VQ=[9,51],$VR=[1,209],$VS=[1,210],$VT=[1,213],$VU=[1,212],$VV=[1,217],$VW=[1,233],$VX=[2,133],$VY=[1,235],$VZ=[1,234],$V_=[1,236],$V$=[1,252],$V01=[2,115],$V11=[1,243],$V21=[1,244],$V31=[1,292],$V41=[2,148],$V51=[1,301],$V61=[1,300],$V71=[1,305],$V81=[1,313],$V91=[1,328],$Va1=[2,98],$Vb1=[1,331],$Vc1=[1,330],$Vd1=[1,329],$Ve1=[1,325],$Vf1=[1,326],$Vg1=[1,363],$Vh1=[1,362],$Vi1=[1,381],$Vj1=[2,80],$Vk1=[1,378],$Vl1=[1,379],$Vm1=[1,385],$Vn1=[1,398],$Vo1=[1,409],$Vp1=[2,58],$Vq1=[1,407],$Vr1=[1,408],$Vs1=[1,436],$Vt1=[2,44],$Vu1=[1,434],$Vv1=[1,435];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"encabezado":4,"instrucciones":5,"EOF":6,"INCERTEZA":7,"DECIMAL":8,"SALTO":9,"importacion":10,"IMPORTAR":11,"ID":12,"PUNTO":13,"CRL":14,"instruccion":15,"declaracion":16,"asignacion":17,"funcion":18,"VOID":19,"PRINCIPAL":20,"PARIZQ":21,"PARDER":22,"DOSPTS":23,"instrucciones_funcion":24,"dibujar_EXP":25,"DIBUJAREXP":26,"expresion":27,"dibujar_TS":28,"DIBUJARTS":29,"dibujar_AST":30,"DIBUJARAST":31,"mostrar":32,"MOSTRAR":33,"CADENA":34,"expresion_mostrar":35,"COMA":36,"mientras":37,"MIENTRAS":38,"instrucciones_para":39,"para":40,"PARA":41,"PTCOMA":42,"aumentar":43,"INCREMENTO":44,"DECREMENTO":45,"mientras_anidado_2":46,"instrucciones_anidadas_2":47,"para_anidado_2":48,"si_anidado_2":49,"SI":50,"TAB":51,"SINO":52,"instrucciones_anidadas_else_2":53,"instruccion_anidadas_else_2":54,"llamada":55,"DETENER":56,"CONTINUAR":57,"instruccion_anidadas_2":58,"mientras_anidado":59,"instrucciones_anidadas":60,"para_anidado":61,"si_anidado":62,"instrucciones_anidadas_else":63,"instruccion_anidadas_else":64,"retorno":65,"instruccion_anidadas":66,"instruccion_para":67,"si":68,"instrucciones_if":69,"instrucciones_else":70,"instruccion_if":71,"instruccion_else":72,"tipo":73,"parametros":74,"instruccion_funcion":75,"RETORNO":76,"lista_valores":77,"IGUAL":78,"identificadores_declaracion":79,"INT":80,"DOUBLE":81,"BOOLEAN":82,"CHAR":83,"STRING":84,"OR":85,"expresion_1":86,"AND":87,"expresion_2":88,"XOR":89,"expresion_relacional":90,"DOBLE_IGUAL":91,"DIFERENTE":92,"expresion_relacional_1":93,"MAYOR":94,"MENOR":95,"MAYOR_IGUAL":96,"MENOR_IGUAL":97,"INCERT":98,"expresion_aritmetica":99,"MAS":100,"MENOS":101,"expresion_aritmetica_1":102,"POR":103,"DIVIDIDO":104,"MODULO":105,"POTENCIA":106,"expresion_not":107,"NOT":108,"valores":109,"ENTERO":110,"CARACTER":111,"TRUE":112,"FALSE":113,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",7:"INCERTEZA",8:"DECIMAL",9:"SALTO",11:"IMPORTAR",12:"ID",13:"PUNTO",14:"CRL",19:"VOID",20:"PRINCIPAL",21:"PARIZQ",22:"PARDER",23:"DOSPTS",26:"DIBUJAREXP",29:"DIBUJARTS",31:"DIBUJARAST",33:"MOSTRAR",34:"CADENA",36:"COMA",38:"MIENTRAS",41:"PARA",42:"PTCOMA",44:"INCREMENTO",45:"DECREMENTO",50:"SI",51:"TAB",52:"SINO",56:"DETENER",57:"CONTINUAR",76:"RETORNO",78:"IGUAL",80:"INT",81:"DOUBLE",82:"BOOLEAN",83:"CHAR",84:"STRING",85:"OR",87:"AND",89:"XOR",91:"DOBLE_IGUAL",92:"DIFERENTE",94:"MAYOR",95:"MENOR",96:"MAYOR_IGUAL",97:"MENOR_IGUAL",98:"INCERT",100:"MAS",101:"MENOS",103:"POR",104:"DIVIDIDO",105:"MODULO",106:"POTENCIA",108:"NOT",110:"ENTERO",111:"CARACTER",112:"TRUE",113:"FALSE"},
productions_: [0,[3,3],[3,1],[4,3],[4,1],[4,4],[4,0],[10,6],[10,5],[5,3],[5,2],[5,1],[15,1],[15,1],[15,1],[15,7],[15,0],[25,4],[28,3],[30,4],[32,4],[32,5],[35,3],[35,2],[37,7],[40,11],[43,1],[43,1],[46,7],[48,11],[49,14],[49,7],[53,7],[53,6],[53,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,0],[54,1],[47,7],[47,6],[47,1],[58,1],[58,1],[58,1],[58,1],[58,1],[58,1],[58,1],[58,1],[58,1],[58,0],[58,1],[59,7],[61,11],[62,13],[62,7],[63,6],[63,5],[63,1],[64,1],[64,1],[64,1],[64,1],[64,1],[64,1],[64,1],[64,1],[64,1],[64,1],[64,1],[64,1],[64,1],[64,0],[64,1],[60,6],[60,5],[60,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,0],[66,1],[39,5],[39,4],[39,1],[67,1],[67,1],[67,1],[67,1],[67,1],[67,1],[67,1],[67,1],[67,1],[67,1],[67,1],[67,1],[67,0],[67,1],[68,12],[68,7],[69,5],[69,4],[69,1],[71,1],[71,1],[71,1],[71,1],[71,1],[71,1],[71,1],[71,1],[71,1],[71,1],[71,1],[71,0],[71,1],[70,5],[70,4],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,0],[72,1],[18,8],[18,8],[18,7],[18,7],[24,4],[24,3],[24,1],[75,1],[75,1],[75,1],[75,1],[75,1],[75,1],[75,1],[75,1],[75,1],[75,1],[75,1],[75,0],[75,1],[65,1],[65,2],[55,4],[55,3],[77,3],[77,1],[74,4],[74,2],[17,3],[16,4],[16,2],[79,3],[79,1],[73,1],[73,1],[73,1],[73,1],[73,1],[27,3],[27,1],[86,3],[86,1],[88,3],[88,1],[90,3],[90,3],[90,1],[93,3],[93,3],[93,3],[93,3],[93,3],[93,1],[99,3],[99,3],[99,1],[102,3],[102,3],[102,3],[102,3],[102,1],[107,2],[107,1],[109,1],[109,1],[109,2],[109,2],[109,3],[109,1],[109,1],[109,1],[109,1],[109,1],[109,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

	
		tabla.comprobarIncerteza();
		var nuevaSalida = new Salida();
        nuevaSalida.agregarParametros(salida);
        salida.limpiarSalida();
        for(var i = 0; i< operaciones.length; i++){
            if(operaciones[i]){
                operaciones[i].operar(tabla, salida);
			}	
        }
		var nuevaTabla = new Tabla(tabla);
		var funcionPrincipal = tabla.obtenerFuncion('Principal',0);
		if (funcionPrincipal != null){
			funcionPrincipal.operar(nuevaTabla, nuevaSalida);		
		} else {
			nuevaSalida.agregarError(Tipo.SEMANTICO, "No hay funcion principal", yylineno, this._$.first_column); 
		}
		operaciones = [];
		tabla.limpiarTabla();
		return nuevaSalida;
		
	
break;
case 3: case 5:
tabla.agregarIncerteza(new Incerteza("Incerteza", $$[$0-1], yylineno, this._$.first_column));
break;
case 9:
this.$ = operaciones; if($$[$0-1] != null){operaciones.push($$[$0-1])};
break;
case 10:
if($$[$0-1] != null){operaciones.push($$[$0-1])};
break;
case 11:
salida.agregarError(Tipo.SINTACTICO, "Error en el lexema: " + yytext, yylineno, this._$.first_column); console.error('Este es un error sintÃ¡ctico: ' + yytext + ', en la linea: ' + (yylineno) + ', en la columna: ' + this._$.first_column)
break;
case 12:
if ($$[$0]!=null){this.$ = $$[$0]}
break;
case 13: case 189: case 191: case 193:
this.$ = $$[$0]
break;
case 14:
 this.$ = null;
break;
case 15:
this.$ = null; tabla.agregarFuncion(new Funcion("Funcion","Principal",null,operaciones_funcion,Tipo.VOID,Tipo.VALOR,yylineno,this._$.first_column), salida); operaciones_funcion = [];
break;
case 16: case 44: case 58: case 80: case 98: case 115: case 133: case 148: case 168:
this.$ = null
break;
case 17:
this.$ = new DibujarEXP("DibujarEXP",$$[$0-1],yylineno,this._$.first_column)
break;
case 18:
this.$ = new DibujarTS("DibujarTS",yylineno,this._$.first_column)
break;
case 19:
this.$ = new DibujarAST("DibujarAST",$$[$0-1],yylineno,this._$.first_column)
break;
case 20:
this.$ = new Mostrar("Mostrar",$$[$0-1],null,0,Tipo.VALOR,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 21:
this.$ = new Mostrar("Mostrar",$$[$0-2],parametros_mostrar,parametros_mostrar.length,Tipo.VALOR,Tipo.VALOR,yylineno,this._$.first_column); parametros_mostrar = [];
break;
case 22: case 23:
parametros_mostrar.push($$[$0]);
break;
case 24:
this.$ = new Mientras("Mientras",$$[$0-4],operaciones_ciclo,operaciones_ciclo.length,_$[$0-6].first_line,this._$.first_column); operaciones_ciclo = [];
break;
case 25:
this.$ = new Para("Para",$$[$0-8],$$[$0-6],$$[$0-4],operaciones_ciclo,operaciones_ciclo.length,_$[$0-10].first_line,this._$.first_column); operaciones_ciclo = [];
break;
case 26:
this.$ = new Iteracion("Iteracion",Tipo.INCREMENTO,yylineno,this._$.first_column);
break;
case 27:
this.$ = new Iteracion("Iteracion",Tipo.DECREMENTO,yylineno,this._$.first_column);
break;
case 28:
this.$ = new Mientras("Mientras",$$[$0-4],operaciones_anidadas_2,operaciones_anidadas_2.length,_$[$0-6].first_line,this._$.first_column); operaciones_anidadas_2 = [];
break;
case 29:
this.$ = new Para("Para",$$[$0-8],$$[$0-6],$$[$0-4],operaciones_anidadas_2,operaciones_anidadas_2.length,_$[$0-10].first_line,this._$.first_column); operaciones_anidadas_2 = [];
break;
case 30:
this.$ = new Si("Si",$$[$0-11],Tipo.SI,operaciones_anidadas_2,operaciones_anidadas_2.length,operaciones_anidadas_else_2,operaciones_anidadas_else_2.length,_$[$0-13].first_line,this._$.first_column); operaciones_anidadas_2 = []; operaciones_anidadas_else_2 = [];
break;
case 31:
this.$ = new Si("Si",$$[$0-4],Tipo.SI,operaciones_anidadas_2,operaciones_anidadas_2.length,null,0,_$[$0-6].first_line,this._$.first_column); operaciones_anidadas_2 = [];
break;
case 35:
if ($$[$0]!=null){operaciones_anidadas_else_2.push($$[$0]);}
break;
case 36: case 37: case 38: case 39: case 40: case 41:
operaciones_anidadas_else_2.push($$[$0]);
break;
case 42:
operaciones_anidadas_else_2.push(new Detener("Detener",yylineno,this._$.first_column));
break;
case 43:
operaciones_anidadas_else_2.push(new Detener("Continuar",yylineno,this._$.first_column));
break;
case 45:
salida.agregarError(Tipo.SINTACTICO, "Error en el lexema: " + yytext, yylineno, this._$.first_column); operaciones_anidadas_else_2 = [];
break;
case 49:
if ($$[$0]!=null){operaciones_anidadas_2.push($$[$0]);}
break;
case 50: case 51: case 52: case 53: case 54: case 55:
operaciones_anidadas_2.push($$[$0]);
break;
case 56:
operaciones_anidadas_2.push(new Detener("Detener",yylineno,this._$.first_column));
break;
case 57:
operaciones_anidadas_2.push(new Detener("Continuar",yylineno,this._$.first_column));
break;
case 59:
salida.agregarError(Tipo.SINTACTICO, "Error en el lexema: " + yytext, yylineno, this._$.first_column); operaciones_anidadas_2 = [];
break;
case 60:
this.$ = new Mientras("Mientras",$$[$0-4],operaciones_anidadas,operaciones_anidadas.length,_$[$0-6].first_line,this._$.first_column); operaciones_anidadas = [];
break;
case 61:
this.$ = new Para("Para",$$[$0-8],$$[$0-6],$$[$0-4],operaciones_anidadas,operaciones_anidadas.length,_$[$0-10].first_line,this._$.first_column); operaciones_anidadas = [];
break;
case 62:
this.$ = new Si("Si",$$[$0-10],Tipo.SI,operaciones_anidadas,operaciones_anidadas.length,operaciones_anidadas_else,operaciones_anidadas_else.length,_$[$0-12].first_line,this._$.first_column); operaciones_anidadas = []; operaciones_anidadas_else = [];
break;
case 63:
this.$ = new Si("Si",$$[$0-4],Tipo.SI,operaciones_anidadas,operaciones_anidadas.length,null,0,_$[$0-6].first_line,this._$.first_column); operaciones_anidadas = [];
break;
case 67:
if ($$[$0]!=null){operaciones_anidadas_else.push($$[$0]);}
break;
case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 79:
operaciones_anidadas_else.push($$[$0]);
break;
case 77:
operaciones_anidadas_else.push(new Detener("Detener",yylineno,this._$.first_column));
break;
case 78:
operaciones_anidadas_else.push(new Detener("Continuar",yylineno,this._$.first_column));
break;
case 81:
salida.agregarError(Tipo.SINTACTICO, "Error en el lexema: " + yytext, yylineno, this._$.first_column); operaciones_anidadas_else = [];
break;
case 85:
if ($$[$0]!=null){operaciones_anidadas.push($$[$0]);}
break;
case 86: case 87: case 88: case 89: case 90: case 91: case 92: case 93: case 94: case 97:
operaciones_anidadas.push($$[$0]);
break;
case 95:
operaciones_anidadas.push(new Detener("Detener",yylineno,this._$.first_column));
break;
case 96:
operaciones_anidadas.push(new Detener("Continuar",yylineno,this._$.first_column));
break;
case 99:
salida.agregarError(Tipo.SINTACTICO, "Error en el lexema: " + yytext, yylineno, this._$.first_column); operaciones_anidadas = [];
break;
case 103:
if ($$[$0]!=null){operaciones_ciclo.push($$[$0]);}
break;
case 104: case 105: case 108: case 109: case 110: case 111: case 112: case 113: case 114:
operaciones_ciclo.push($$[$0]);
break;
case 106:
operaciones_ciclo.push(new Detener("Detener",yylineno,this._$.first_column));
break;
case 107:
operaciones_ciclo.push(new Detener("Continuar",yylineno,this._$.first_column));
break;
case 116:
salida.agregarError(Tipo.SINTACTICO, "Error en el lexema: " + yytext, yylineno, this._$.first_column); operaciones_ciclo = [];
break;
case 117:
this.$ = new Si("Si",$$[$0-9],Tipo.SI,operaciones_si,operaciones_si.length,operaciones_else,operaciones_else.length,_$[$0-11].first_line,this._$.first_column); operaciones_si = []; operaciones_else = [];
break;
case 118:
this.$ = new Si("Si",$$[$0-4],Tipo.SI,operaciones_si,operaciones_si.length,null,0,_$[$0-6].first_line,this._$.first_column); operaciones_si = [];
break;
case 122:
if ($$[$0]!=null){operaciones_si.push($$[$0]);}
break;
case 123: case 124: case 125: case 126: case 127: case 128: case 129: case 130: case 131: case 132:
operaciones_si.push($$[$0]);
break;
case 134:
salida.agregarError(Tipo.SINTACTICO, "Error en el lexema: " + yytext, yylineno, this._$.first_column); operaciones_si = [];
break;
case 137:
if ($$[$0]!=null){operaciones_else.push($$[$0]);}
break;
case 138: case 139: case 140: case 141: case 142: case 143: case 144: case 145: case 146: case 147:
operaciones_else.push($$[$0]);
break;
case 149:
salida.agregarError(Tipo.SINTACTICO, "Error en el lexema: " + yytext, yylineno, this._$.first_column); operaciones_else = [];
break;
case 150:
this.$ = null; tabla.agregarFuncion(new Funcion("Funcion",$$[$0-6],parametros_metodo,operaciones_funcion,$$[$0-7],Tipo.VALOR,_$[$0-7].first_line,this._$.first_column), salida); operaciones_funcion = []; parametros_metodo = []; 
break;
case 151:
this.$ = null; tabla.agregarFuncion(new Funcion("Funcion",$$[$0-6],parametros_metodo,operaciones_funcion,Tipo.VOID,Tipo.VALOR,_$[$0-7].first_line,this._$.first_column), salida); operaciones_funcion = []; parametros_metodo = [];
break;
case 152:
this.$ = null; tabla.agregarFuncion(new Funcion("Funcion",$$[$0-5],null,operaciones_funcion,$$[$0-6],Tipo.VALOR,_$[$0-6].first_line,this._$.first_column), salida); operaciones_funcion = [];
break;
case 153:
this.$ = null; tabla.agregarFuncion(new Funcion("Funcion",$$[$0-5],null,operaciones_funcion,Tipo.VOID,Tipo.VALOR,_$[$0-6].first_line,this._$.first_column), salida); operaciones_funcion = []; 
break;
case 157:
if ($$[$0]!=null){operaciones_funcion.push($$[$0]);}
break;
case 158: case 159: case 160: case 161: case 162: case 163: case 164: case 165: case 166: case 167:
operaciones_funcion.push($$[$0]);
break;
case 169:
salida.agregarError(Tipo.SINTACTICO, "Error en el lexema: " + yytext, yylineno, this._$.first_column);
break;
case 170:
this.$ = new Retorno("Retorno",null, yylineno,this._$.first_column);
break;
case 171:
this.$ = new Retorno("Retorno",$$[$0], yylineno,this._$.first_column);
break;
case 172:
this.$ = new Llamada("Llamada",$$[$0-3],valores_llamada,Tipo.LLAMADA,Tipo.VALOR,yylineno,this._$.first_column); valores_llamada = []
break;
case 173:
this.$ = new Llamada("Llamada",$$[$0-2],null,Tipo.LLAMADA,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 174: case 175:
valores_llamada.push($$[$0]);
break;
case 176:
this.$ = parametros_metodo; identificadores_decla.push($$[$0]); parametros_metodo.push(new Declaracion("Declaracion",identificadores_decla,null,$$[$0-1],Tipo.VALOR,yylineno,this._$.first_column)); identificadores_decla = [];
break;
case 177:
identificadores_decla.push($$[$0]); parametros_metodo.push(new Declaracion("Declaracion",identificadores_decla,null,$$[$0-1],Tipo.VALOR,yylineno,this._$.first_column)); identificadores_decla = [];
break;
case 178:
this.$ = new Asignacion("Asignacion",$$[$0-2],$$[$0],yylineno,this._$.first_column);
break;
case 179:
this.$ = new Declaracion("Declaracion",identificadores_decla,$$[$0],$$[$0-3],Tipo.VALOR,_$[$0-3].first_line,this._$.first_column); identificadores_decla = [];
break;
case 180:
this.$ = new Declaracion("Declaracion",identificadores_decla,null,$$[$0-1],Tipo.VALOR,_$[$0-1].first_line,this._$.first_column); identificadores_decla = [];
break;
case 181: case 182:
identificadores_decla.push($$[$0]);
break;
case 183:
this.$ = Tipo.ENTERO;
break;
case 184:
this.$ = Tipo.DECIMAL;
break;
case 185:
this.$ = Tipo.BOOLEAN;
break;
case 186:
this.$ = Tipo.CARACTER;
break;
case 187:
this.$ = Tipo.CADENA;
break;
case 188:
this.$ = new Logica("Logica",$$[$0-2],$$[$0],Tipo.OR,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 190:
this.$ = new Logica("Logica",$$[$0-2],$$[$0],Tipo.AND,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 192:
this.$ = new Logica("Logica",$$[$0-2],$$[$0],Tipo.XOR,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 194:
this.$ = new Relacion("Relacion",$$[$0-2],$$[$0],Tipo.IGUAL,Tipo.VALOR,_$[$0-2].first_line,this._$.first_column);
break;
case 195:
this.$ = new Relacion("Relacion",$$[$0-2],$$[$0],Tipo.DIFERENTE,Tipo.VALOR,_$[$0-2].first_line,this._$.first_column);
break;
case 196: case 202: case 205: case 210: case 212:
this.$ = $$[$0];
break;
case 197:
this.$ = new Relacion("Relacion",$$[$0-2],$$[$0],Tipo.MAYOR,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 198:
this.$ = new Relacion("Relacion",$$[$0-2],$$[$0],Tipo.MENOR,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 199:
this.$ = new Relacion("Relacion",$$[$0-2],$$[$0],Tipo.MAYORIGUAL,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 200:
this.$ = new Relacion("Relacion",$$[$0-2],$$[$0],Tipo.MENORIGUAL,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 201:
this.$ = new Relacion("Relacion",$$[$0-2],$$[$0],Tipo.INCERTEZA,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 203:
this.$ = new Operacion("Operacion",$$[$0-2],$$[$0],Tipo.SUMA,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 204:
this.$ = new Operacion("Operacion",$$[$0-2],$$[$0],Tipo.RESTA,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 206:
this.$ = new Operacion("Operacion",$$[$0-2],$$[$0],Tipo.MULTIPLICACION,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 207:
this.$ = new Operacion("Operacion",$$[$0-2],$$[$0],Tipo.DIVISION,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 208:
this.$ = new Operacion("Operacion",$$[$0-2],$$[$0],Tipo.MODULO,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 209:
this.$ = new Operacion("Operacion",$$[$0-2],$$[$0],Tipo.POTENCIA,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 211:
this.$ = new Logica("Logica",$$[$0],null,Tipo.NOT,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 213:
this.$ = new Valor("Valor", Number($$[$0]),Tipo.DECIMAL,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 214:
this.$ = new Valor("Valor", Number($$[$0]),Tipo.ENTERO,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 215:
this.$ = new Valor("Valor", -1*Number($$[$0]),Tipo.DECIMAL,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 216:
this.$ = new Valor("Valor", -1*Number($$[$0]),Tipo.ENTERO,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 217:
this.$ = $$[$0-1];
break;
case 218:
this.$ = new Valor("Valor", $$[$0],Tipo.CADENA,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 219:
this.$ = new Valor("Valor", $$[$0],Tipo.CARACTER,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 220:
this.$ = new Valor("Valor", true,Tipo.BOOLEAN,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 221:
this.$ = new Valor("Valor", false,Tipo.BOOLEAN,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 222:
this.$ = new Valor("Valor", $$[$0],Tipo.ID,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 223:
this.$ = new Valor("Valor", $$[$0],Tipo.LLAMADA,Tipo.VALOR,yylineno,this._$.first_column);
break;
}
},
table: [o($V0,[2,6],{3:1,4:2,10:5,6:[1,3],7:[1,4],11:[1,6]}),{1:[3]},{2:[1,9],5:7,9:$V1,12:$V2,15:8,16:10,17:11,18:12,19:$V3,73:14,80:$V4,81:$V5,82:$V6,83:$V7,84:$V8},{1:[2,2]},{8:[1,21]},o($V0,[2,4],{7:[1,22],11:[1,23]}),{12:[1,24]},{6:[1,25],9:$V1,12:$V2,15:26,16:10,17:11,18:12,19:$V3,73:14,80:$V4,81:$V5,82:$V6,83:$V7,84:$V8},{9:[1,27]},o($V9,[2,11]),{9:[2,12]},{9:[2,13]},{9:[2,14]},{12:[1,29],20:[1,28]},{12:[1,31],79:30},{78:$Va},{12:[2,183]},{12:[2,184]},{12:[2,185]},{12:[2,186]},{12:[2,187]},{9:[1,33]},{8:[1,34]},{12:[1,35]},{13:[1,36]},{1:[2,1]},{9:[1,37]},o($V9,[2,10]),{21:[1,38]},{21:[1,39]},o($Vb,[2,180],{36:[1,41],78:[1,40]}),o([9,36,78],$Vc,{21:[1,42]}),{8:$Vd,12:$Ve,21:$Vf,27:43,34:$Vg,55:62,86:44,88:45,90:46,93:47,99:48,101:$Vh,102:49,107:50,108:$Vi,109:52,110:$Vj,111:$Vk,112:$Vl,113:$Vm},o($V0,[2,3]),{9:[1,63]},{13:[1,64]},{14:[1,65]},o($V9,[2,9]),{22:[1,66]},{22:[1,68],73:69,74:67,80:$V4,81:$V5,82:$V6,83:$V7,84:$V8},{8:$Vd,12:$Ve,21:$Vf,27:70,34:$Vg,55:62,86:44,88:45,90:46,93:47,99:48,101:$Vh,102:49,107:50,108:$Vi,109:52,110:$Vj,111:$Vk,112:$Vl,113:$Vm},{12:[1,71]},{22:[1,73],73:69,74:72,80:$V4,81:$V5,82:$V6,83:$V7,84:$V8},{9:[2,178],85:$Vn},o($Vo,[2,189],{87:[1,75]}),o($Vp,[2,191],{89:[1,76]}),o($Vq,[2,193],{91:[1,77],92:[1,78]}),o($Vr,[2,196],{94:[1,79],95:[1,80],96:[1,81],97:[1,82],98:[1,83]}),o($Vs,[2,202],{100:[1,84],101:[1,85]}),o($Vt,[2,205],{103:[1,86],104:[1,87],105:[1,88],106:$Vu}),o($Vv,[2,210]),{8:$Vd,12:$Ve,21:$Vf,34:$Vg,55:62,101:$Vh,107:90,108:$Vi,109:52,110:$Vj,111:$Vk,112:$Vl,113:$Vm},o($Vv,[2,212]),o($Vv,[2,213]),o($Vv,[2,214]),{8:[1,91],110:[1,92]},{8:$Vd,12:$Ve,21:$Vf,27:93,34:$Vg,55:62,86:44,88:45,90:46,93:47,99:48,101:$Vh,102:49,107:50,108:$Vi,109:52,110:$Vj,111:$Vk,112:$Vl,113:$Vm},o($Vv,[2,218]),o($Vv,[2,219]),o($Vv,[2,220]),o($Vv,[2,221]),o($Vv,[2,222],{21:$Vw}),o($Vv,[2,223]),o($V0,[2,5]),{14:[1,95]},{9:[1,96]},{23:[1,97]},{22:[1,98],36:$Vx},{23:[1,100]},{12:[1,101]},o($Vb,[2,179],{85:$Vn}),o($Vy,[2,181]),{22:[1,102],36:$Vx},{23:[1,103]},{8:$Vd,12:$Ve,21:$Vf,27:104,34:$Vg,55:62,86:44,88:45,90:46,93:47,99:48,101:$Vh,102:49,107:50,108:$Vi,109:52,110:$Vj,111:$Vk,112:$Vl,113:$Vm},{8:$Vd,12:$Ve,21:$Vf,34:$Vg,55:62,86:105,88:45,90:46,93:47,99:48,101:$Vh,102:49,107:50,108:$Vi,109:52,110:$Vj,111:$Vk,112:$Vl,113:$Vm},{8:$Vd,12:$Ve,21:$Vf,34:$Vg,55:62,88:106,90:46,93:47,99:48,101:$Vh,102:49,107:50,108:$Vi,109:52,110:$Vj,111:$Vk,112:$Vl,113:$Vm},{8:$Vd,12:$Ve,21:$Vf,34:$Vg,55:62,90:107,93:47,99:48,101:$Vh,102:49,107:50,108:$Vi,109:52,110:$Vj,111:$Vk,112:$Vl,113:$Vm},{8:$Vd,12:$Ve,21:$Vf,34:$Vg,55:62,90:108,93:47,99:48,101:$Vh,102:49,107:50,108:$Vi,109:52,110:$Vj,111:$Vk,112:$Vl,113:$Vm},{8:$Vd,12:$Ve,21:$Vf,34:$Vg,55:62,93:109,99:48,101:$Vh,102:49,107:50,108:$Vi,109:52,110:$Vj,111:$Vk,112:$Vl,113:$Vm},{8:$Vd,12:$Ve,21:$Vf,34:$Vg,55:62,93:110,99:48,101:$Vh,102:49,107:50,108:$Vi,109:52,110:$Vj,111:$Vk,112:$Vl,113:$Vm},{8:$Vd,12:$Ve,21:$Vf,34:$Vg,55:62,93:111,99:48,101:$Vh,102:49,107:50,108:$Vi,109:52,110:$Vj,111:$Vk,112:$Vl,113:$Vm},{8:$Vd,12:$Ve,21:$Vf,34:$Vg,55:62,93:112,99:48,101:$Vh,102:49,107:50,108:$Vi,109:52,110:$Vj,111:$Vk,112:$Vl,113:$Vm},{8:$Vd,12:$Ve,21:$Vf,34:$Vg,55:62,93:113,99:48,101:$Vh,102:49,107:50,108:$Vi,109:52,110:$Vj,111:$Vk,112:$Vl,113:$Vm},{8:$Vd,12:$Ve,21:$Vf,34:$Vg,55:62,99:114,101:$Vh,102:49,107:50,108:$Vi,109:52,110:$Vj,111:$Vk,112:$Vl,113:$Vm},{8:$Vd,12:$Ve,21:$Vf,34:$Vg,55:62,99:115,101:$Vh,102:49,107:50,108:$Vi,109:52,110:$Vj,111:$Vk,112:$Vl,113:$Vm},{8:$Vd,12:$Ve,21:$Vf,34:$Vg,55:62,101:$Vh,102:116,107:50,108:$Vi,109:52,110:$Vj,111:$Vk,112:$Vl,113:$Vm},{8:$Vd,12:$Ve,21:$Vf,34:$Vg,55:62,101:$Vh,102:117,107:50,108:$Vi,109:52,110:$Vj,111:$Vk,112:$Vl,113:$Vm},{8:$Vd,12:$Ve,21:$Vf,34:$Vg,55:62,101:$Vh,102:118,107:50,108:$Vi,109:52,110:$Vj,111:$Vk,112:$Vl,113:$Vm},{8:$Vd,12:$Ve,21:$Vf,34:$Vg,55:62,101:$Vh,102:119,107:50,108:$Vi,109:52,110:$Vj,111:$Vk,112:$Vl,113:$Vm},o($Vv,[2,211]),o($Vv,[2,215]),o($Vv,[2,216]),{22:[1,120],85:$Vn},{8:$Vd,12:$Ve,21:$Vf,22:[1,122],27:123,34:$Vg,55:62,77:121,86:44,88:45,90:46,93:47,99:48,101:$Vh,102:49,107:50,108:$Vi,109:52,110:$Vj,111:$Vk,112:$Vl,113:$Vm},{9:[1,124]},o($Vz,[2,8]),{9:[1,125]},{23:[1,126]},{73:127,80:$V4,81:$V5,82:$V6,83:$V7,84:$V8},{9:[1,128]},o($VA,[2,177]),{23:[1,129]},{9:[1,130]},o($Vo,[2,188]),o($Vp,[2,190]),o($Vq,[2,192]),o($Vr,[2,194]),o($Vr,[2,195]),o($Vs,[2,197]),o($Vs,[2,198]),o($Vs,[2,199]),o($Vs,[2,200]),o($Vs,[2,201]),o($Vt,[2,203]),o($Vt,[2,204]),o($VB,[2,206],{106:$Vu}),o($VB,[2,207],{106:$Vu}),o($VB,[2,208],{106:$Vu}),o($VB,[2,209],{106:$Vu}),o($Vv,[2,217]),{22:[1,131],36:[1,132]},o($Vv,[2,173]),o($VA,[2,175],{85:$Vn}),o($Vz,[2,7]),{9:$VC,24:133,51:$VD},{9:[1,136]},{12:[1,137]},{9:$VC,24:138,51:$VD},{9:[1,139]},{9:$VC,24:140,51:$VD},o($Vv,[2,172]),{8:$Vd,12:$Ve,21:$Vf,27:141,34:$Vg,55:62,86:44,88:45,90:46,93:47,99:48,101:$Vh,102:49,107:50,108:$Vi,109:52,110:$Vj,111:$Vk,112:$Vl,113:$Vm},{9:[2,15],51:$VE},{2:$VF,9:$VG,12:$VH,16:144,17:145,25:152,26:$VI,28:153,29:$VJ,30:151,31:$VK,32:147,33:$VL,37:150,38:$VM,40:149,41:$VN,50:$VO,55:146,65:154,68:148,73:156,75:143,76:$VP,80:$V4,81:$V5,82:$V6,83:$V7,84:$V8},o($VQ,[2,156]),{9:$VC,24:166,51:$VD},o($VA,[2,176]),{9:[2,153],51:$VE},{9:$VC,24:167,51:$VD},{9:[2,152],51:$VE},o($VA,[2,174],{85:$Vn}),{2:$VF,9:$VG,12:$VH,16:144,17:145,25:152,26:$VI,28:153,29:$VJ,30:151,31:$VK,32:147,33:$VL,37:150,38:$VM,40:149,41:$VN,50:$VO,55:146,65:154,68:148,73:156,75:168,76:$VP,80:$V4,81:$V5,82:$V6,83:$V7,84:$V8},{9:[1,169]},{9:[2,157]},{9:[2,158]},{9:[2,159]},{9:[2,160]},{9:[2,161]},{9:[2,162]},{9:[2,163]},{9:[2,164]},{9:[2,165]},{9:[2,166]},{9:[2,167]},{9:[2,169]},{12:[1,170],79:30},{21:$Vw,78:$Va},{21:[1,171]},{21:[1,172]},{21:[1,173]},{21:[1,174]},{21:[1,175]},{21:[1,176]},{21:[1,177]},{8:$Vd,9:[2,170],12:$Ve,21:$Vf,27:178,34:$Vg,55:62,86:44,88:45,90:46,93:47,99:48,101:$Vh,102:49,107:50,108:$Vi,109:52,110:$Vj,111:$Vk,112:$Vl,113:$Vm},{9:[2,151],51:$VE},{9:[2,150],51:$VE},{9:[1,179]},o($VQ,[2,155]),o($Vy,$Vc),{34:[1,180]},{8:$Vd,12:$Ve,21:$Vf,27:181,34:$Vg,55:62,86:44,88:45,90:46,93:47,99:48,101:$Vh,102:49,107:50,108:$Vi,109:52,110:$Vj,111:$Vk,112:$Vl,113:$Vm},{16:182,73:156,80:$V4,81:$V5,82:$V6,83:$V7,84:$V8},{8:$Vd,12:$Ve,21:$Vf,27:183,34:$Vg,55:62,86:44,88:45,90:46,93:47,99:48,101:$Vh,102:49,107:50,108:$Vi,109:52,110:$Vj,111:$Vk,112:$Vl,113:$Vm},{12:[1,184]},{8:$Vd,12:$Ve,21:$Vf,27:185,34:$Vg,55:62,86:44,88:45,90:46,93:47,99:48,101:$Vh,102:49,107:50,108:$Vi,109:52,110:$Vj,111:$Vk,112:$Vl,113:$Vm},{22:[1,186]},{9:[2,171],85:$Vn},o($VQ,[2,154]),{22:[1,187],35:188,36:[1,189]},{22:[1,190],85:$Vn},{42:[1,191]},{22:[1,192],85:$Vn},{22:[1,193]},{22:[1,194],85:$Vn},{9:[2,18]},{9:[2,20]},{22:[1,195],36:[1,196]},{8:$Vd,12:$Ve,21:$Vf,27:197,34:$Vg,55:62,86:44,88:45,90:46,93:47,99:48,101:$Vh,102:49,107:50,108:$Vi,109:52,110:$Vj,111:$Vk,112:$Vl,113:$Vm},{23:[1,198]},{8:$Vd,12:$Ve,21:$Vf,27:199,34:$Vg,55:62,86:44,88:45,90:46,93:47,99:48,101:$Vh,102:49,107:50,108:$Vi,109:52,110:$Vj,111:$Vk,112:$Vl,113:$Vm},{23:[1,200]},{9:[2,19]},{9:[2,17]},{9:[2,21]},{8:$Vd,12:$Ve,21:$Vf,27:201,34:$Vg,55:62,86:44,88:45,90:46,93:47,99:48,101:$Vh,102:49,107:50,108:$Vi,109:52,110:$Vj,111:$Vk,112:$Vl,113:$Vm},o($VA,[2,23],{85:$Vn}),{9:[1,202]},{42:[1,203],85:$Vn},{9:[1,204]},o($VA,[2,22],{85:$Vn}),{9:[1,207],51:[1,206],69:205},{43:208,44:$VR,45:$VS},{9:$VT,39:211,51:$VU},{9:[2,118],51:[1,214]},{51:[1,215]},o($VQ,[2,121]),{22:[1,216]},{22:[2,26]},{22:[2,27]},{9:[2,24],51:$VV},{51:[1,218]},o($VQ,[2,102]),{51:[1,220],52:[1,219]},{2:$VW,9:$VX,12:$VH,16:222,17:223,25:227,26:$VI,28:228,29:$VJ,30:226,31:$VK,32:225,33:$VL,38:$VY,41:$VZ,50:$V_,55:224,59:230,61:229,62:231,65:232,71:221,73:156,76:$VP,80:$V4,81:$V5,82:$V6,83:$V7,84:$V8},{23:[1,237]},{51:[1,238]},{2:$V$,9:$V01,12:$VH,16:240,17:241,25:247,26:$VI,28:248,29:$VJ,30:246,31:$VK,32:245,33:$VL,38:$VY,41:$VZ,50:$V_,55:242,56:$V11,57:$V21,59:250,61:249,62:251,67:239,73:156,80:$V4,81:$V5,82:$V6,83:$V7,84:$V8},{23:[1,253]},{2:$VW,9:$VX,12:$VH,16:222,17:223,25:227,26:$VI,28:228,29:$VJ,30:226,31:$VK,32:225,33:$VL,38:$VY,41:$VZ,50:$V_,55:224,59:230,61:229,62:231,65:232,71:254,73:156,76:$VP,80:$V4,81:$V5,82:$V6,83:$V7,84:$V8},{9:[1,255]},{9:[2,122]},{9:[2,123]},{9:[2,124]},{9:[2,125]},{9:[2,126]},{9:[2,127]},{9:[2,128]},{9:[2,129]},{9:[2,130]},{9:[2,131]},{9:[2,132]},{9:[2,134]},{21:[1,256]},{21:[1,257]},{21:[1,258]},{9:[1,259]},{2:$V$,9:$V01,12:$VH,16:240,17:241,25:247,26:$VI,28:248,29:$VJ,30:246,31:$VK,32:245,33:$VL,38:$VY,41:$VZ,50:$V_,55:242,56:$V11,57:$V21,59:250,61:249,62:251,67:260,73:156,80:$V4,81:$V5,82:$V6,83:$V7,84:$V8},{9:[1,261]},{9:[2,103]},{9:[2,104]},{9:[2,105]},{9:[2,106]},{9:[2,107]},{9:[2,108]},{9:[2,109]},{9:[2,110]},{9:[2,111]},{9:[2,112]},{9:[2,113]},{9:[2,114]},{9:[2,116]},{9:[1,262]},{9:[1,263]},o($VQ,[2,120]),{16:264,73:156,80:$V4,81:$V5,82:$V6,83:$V7,84:$V8},{8:$Vd,12:$Ve,21:$Vf,27:265,34:$Vg,55:62,86:44,88:45,90:46,93:47,99:48,101:$Vh,102:49,107:50,108:$Vi,109:52,110:$Vj,111:$Vk,112:$Vl,113:$Vm},{8:$Vd,12:$Ve,21:$Vf,27:266,34:$Vg,55:62,86:44,88:45,90:46,93:47,99:48,101:$Vh,102:49,107:50,108:$Vi,109:52,110:$Vj,111:$Vk,112:$Vl,113:$Vm},{9:$VT,39:267,51:$VU},{9:[1,268]},o($VQ,[2,101]),{51:[1,270],70:269},o($VQ,[2,119]),{42:[1,271]},{22:[1,272],85:$Vn},{22:[1,273],85:$Vn},{9:[2,25],51:$VV},o($VQ,[2,100]),{9:[2,117],51:[1,274]},{51:[1,275]},{8:$Vd,12:$Ve,21:$Vf,27:276,34:$Vg,55:62,86:44,88:45,90:46,93:47,99:48,101:$Vh,102:49,107:50,108:$Vi,109:52,110:$Vj,111:$Vk,112:$Vl,113:$Vm},{23:[1,277]},{23:[1,278]},{51:[1,279]},{2:$V31,9:$V41,12:$VH,16:281,17:282,25:286,26:$VI,28:287,29:$VJ,30:285,31:$VK,32:284,33:$VL,38:$VY,41:$VZ,50:$V_,55:283,59:289,61:288,62:290,65:291,72:280,73:156,76:$VP,80:$V4,81:$V5,82:$V6,83:$V7,84:$V8},{42:[1,293],85:$Vn},{9:[1,294]},{9:[1,295]},{2:$V31,9:$V41,12:$VH,16:281,17:282,25:286,26:$VI,28:287,29:$VJ,30:285,31:$VK,32:284,33:$VL,38:$VY,41:$VZ,50:$V_,55:283,59:289,61:288,62:290,65:291,72:296,73:156,76:$VP,80:$V4,81:$V5,82:$V6,83:$V7,84:$V8},{9:[1,297]},{9:[2,137]},{9:[2,138]},{9:[2,139]},{9:[2,140]},{9:[2,141]},{9:[2,142]},{9:[2,143]},{9:[2,144]},{9:[2,145]},{9:[2,146]},{9:[2,147]},{9:[2,149]},{43:298,44:$VR,45:$VS},{9:$V51,51:$V61,60:299},{9:$V51,51:$V61,60:302},{9:[1,303]},o($VQ,[2,136]),{22:[1,304]},{9:[2,60],51:$V71},{51:[1,306]},o($VQ,[2,84]),{9:[2,63],51:[1,307]},o($VQ,[2,135]),{23:[1,308]},{51:[1,309]},{51:[1,310]},{51:[1,311]},{9:[1,312]},{51:$V81},{2:$V91,9:$Va1,12:$VH,16:315,17:316,25:320,26:$VI,28:321,29:$VJ,30:319,31:$VK,32:318,33:$VL,38:$Vb1,41:$Vc1,46:324,48:323,49:322,50:$Vd1,55:317,56:$Ve1,57:$Vf1,65:327,66:314,73:156,76:$VP,80:$V4,81:$V5,82:$V6,83:$V7,84:$V8},{51:$V81,52:[1,332]},{9:$V51,51:$V61,60:333},{2:$V91,9:$Va1,12:$VH,16:315,17:316,25:320,26:$VI,28:321,29:$VJ,30:319,31:$VK,32:318,33:$VL,38:$Vb1,41:$Vc1,46:324,48:323,49:322,50:$Vd1,55:317,56:$Ve1,57:$Vf1,65:327,66:334,73:156,76:$VP,80:$V4,81:$V5,82:$V6,83:$V7,84:$V8},{9:[1,335]},{9:[2,85]},{9:[2,86]},{9:[2,87]},{9:[2,88]},{9:[2,89]},{9:[2,90]},{9:[2,91]},{9:[2,92]},{9:[2,93]},{9:[2,94]},{9:[2,95]},{9:[2,96]},{9:[2,97]},{9:[2,99]},{21:[1,336]},{21:[1,337]},{21:[1,338]},{23:[1,339]},{9:[2,61],51:$V71},{9:[1,340]},o($VQ,[2,83]),{8:$Vd,12:$Ve,21:$Vf,27:341,34:$Vg,55:62,86:44,88:45,90:46,93:47,99:48,101:$Vh,102:49,107:50,108:$Vi,109:52,110:$Vj,111:$Vk,112:$Vl,113:$Vm},{16:342,73:156,80:$V4,81:$V5,82:$V6,83:$V7,84:$V8},{8:$Vd,12:$Ve,21:$Vf,27:343,34:$Vg,55:62,86:44,88:45,90:46,93:47,99:48,101:$Vh,102:49,107:50,108:$Vi,109:52,110:$Vj,111:$Vk,112:$Vl,113:$Vm},{9:[1,344]},o($VQ,[2,82]),{22:[1,345],85:$Vn},{42:[1,346]},{22:[1,347],85:$Vn},{9:[1,350],51:[1,349],63:348},{23:[1,351]},{8:$Vd,12:$Ve,21:$Vf,27:352,34:$Vg,55:62,86:44,88:45,90:46,93:47,99:48,101:$Vh,102:49,107:50,108:$Vi,109:52,110:$Vj,111:$Vk,112:$Vl,113:$Vm},{23:[1,353]},{9:[2,62],51:[1,354]},{51:[1,355]},o($VQ,[2,66]),{9:[1,356]},{42:[1,357],85:$Vn},{9:[1,358]},{51:[1,359]},{51:[1,360]},{9:$Vg1,47:361,51:$Vh1},{43:364,44:$VR,45:$VS},{9:$Vg1,47:365,51:$Vh1},{51:[1,366]},{2:$Vi1,9:$Vj1,12:$VH,16:368,17:369,25:373,26:$VI,28:374,29:$VJ,30:372,31:$VK,32:371,33:$VL,38:$Vb1,41:$Vc1,46:377,48:376,49:375,50:$Vd1,55:370,56:$Vk1,57:$Vl1,64:367,65:380,73:156,76:$VP,80:$V4,81:$V5,82:$V6,83:$V7,84:$V8},{9:[2,31],51:[1,382]},{51:[1,383]},o($VQ,[2,48]),{22:[1,384]},{9:[2,28],51:$Vm1},{2:$Vi1,9:$Vj1,12:$VH,16:368,17:369,25:373,26:$VI,28:374,29:$VJ,30:372,31:$VK,32:371,33:$VL,38:$Vb1,41:$Vc1,46:377,48:376,49:375,50:$Vd1,55:370,56:$Vk1,57:$Vl1,64:386,65:380,73:156,76:$VP,80:$V4,81:$V5,82:$V6,83:$V7,84:$V8},{9:[1,387]},{9:[2,67]},{9:[2,68]},{9:[2,69]},{9:[2,70]},{9:[2,71]},{9:[2,72]},{9:[2,73]},{9:[2,74]},{9:[2,75]},{9:[2,76]},{9:[2,77]},{9:[2,78]},{9:[2,79]},{9:[2,81]},{51:[1,388]},{51:[1,389]},{23:[1,390]},{51:[1,391]},{9:[1,392]},o($VQ,[2,65]),{51:[1,393]},{51:[1,394]},{9:[1,395]},{51:[1,396]},o($VQ,[2,64]),{51:$Vn1,52:[1,397]},{2:$Vo1,9:$Vp1,12:$VH,16:400,17:401,25:405,26:$VI,28:406,29:$VJ,30:404,31:$VK,32:403,33:$VL,55:402,56:$Vq1,57:$Vr1,58:399,73:156,80:$V4,81:$V5,82:$V6,83:$V7,84:$V8},{9:$Vg1,47:410,51:$Vh1},{51:$Vn1},{23:[1,411]},{2:$Vo1,9:$Vp1,12:$VH,16:400,17:401,25:405,26:$VI,28:406,29:$VJ,30:404,31:$VK,32:403,33:$VL,55:402,56:$Vq1,57:$Vr1,58:412,73:156,80:$V4,81:$V5,82:$V6,83:$V7,84:$V8},{9:[1,413]},{9:[2,49]},{9:[2,50]},{9:[2,51]},{9:[2,52]},{9:[2,53]},{9:[2,54]},{9:[2,55]},{9:[2,56]},{9:[2,57]},{9:[2,59]},{9:[2,29],51:$Vm1},{9:[1,414]},{9:[1,415]},o($VQ,[2,47]),{9:[1,418],51:[1,417],53:416},o($VQ,[2,46]),{9:[2,30],51:[1,419]},{51:[1,420]},o($VQ,[2,34]),{51:[1,421]},{51:[1,422]},{51:[1,423]},{51:[1,424]},{51:[1,425]},{2:$Vs1,9:$Vt1,12:$VH,16:427,17:428,25:432,26:$VI,28:433,29:$VJ,30:431,31:$VK,32:430,33:$VL,54:426,55:429,56:$Vu1,57:$Vv1,73:156,80:$V4,81:$V5,82:$V6,83:$V7,84:$V8},{2:$Vs1,9:$Vt1,12:$VH,16:427,17:428,25:432,26:$VI,28:433,29:$VJ,30:431,31:$VK,32:430,33:$VL,54:437,55:429,56:$Vu1,57:$Vv1,73:156,80:$V4,81:$V5,82:$V6,83:$V7,84:$V8},{9:[1,438]},{9:[2,35]},{9:[2,36]},{9:[2,37]},{9:[2,38]},{9:[2,39]},{9:[2,40]},{9:[2,41]},{9:[2,42]},{9:[2,43]},{9:[2,45]},{9:[1,439]},o($VQ,[2,33]),o($VQ,[2,32])],
defaultActions: {3:[2,2],10:[2,12],11:[2,13],12:[2,14],16:[2,183],17:[2,184],18:[2,185],19:[2,186],20:[2,187],25:[2,1],144:[2,157],145:[2,158],146:[2,159],147:[2,160],148:[2,161],149:[2,162],150:[2,163],151:[2,164],152:[2,165],153:[2,166],154:[2,167],155:[2,169],186:[2,18],187:[2,20],193:[2,19],194:[2,17],195:[2,21],209:[2,26],210:[2,27],222:[2,122],223:[2,123],224:[2,124],225:[2,125],226:[2,126],227:[2,127],228:[2,128],229:[2,129],230:[2,130],231:[2,131],232:[2,132],233:[2,134],240:[2,103],241:[2,104],242:[2,105],243:[2,106],244:[2,107],245:[2,108],246:[2,109],247:[2,110],248:[2,111],249:[2,112],250:[2,113],251:[2,114],252:[2,116],281:[2,137],282:[2,138],283:[2,139],284:[2,140],285:[2,141],286:[2,142],287:[2,143],288:[2,144],289:[2,145],290:[2,146],291:[2,147],292:[2,149],315:[2,85],316:[2,86],317:[2,87],318:[2,88],319:[2,89],320:[2,90],321:[2,91],322:[2,92],323:[2,93],324:[2,94],325:[2,95],326:[2,96],327:[2,97],328:[2,99],368:[2,67],369:[2,68],370:[2,69],371:[2,70],372:[2,71],373:[2,72],374:[2,73],375:[2,74],376:[2,75],377:[2,76],378:[2,77],379:[2,78],380:[2,79],381:[2,81],400:[2,49],401:[2,50],402:[2,51],403:[2,52],404:[2,53],405:[2,54],406:[2,55],407:[2,56],408:[2,57],409:[2,59],427:[2,35],428:[2,36],429:[2,37],430:[2,38],431:[2,39],432:[2,40],433:[2,41],434:[2,42],435:[2,43],436:[2,45]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	const Tipo = require('./clases/Tipo');
	const Tabla = require('./clases/Tabla');
	const Salida = require("./clases/Salida");
	const Valor = require('./clases/Valor');
	const Operacion = require('./clases/Operacion');
	const Relacion = require('./clases/Relacion');
	const Logica = require('./clases/Logica');
	const Declaracion = require('./clases/Declaracion');
	const Mostrar = require('./clases/Mostrar');
	const Asignacion = require('./clases/Asignacion');
	const Funcion = require('./clases/Funcion');
	const Retorno = require('./clases/Retorno');
	const Llamada = require('./clases/Llamada');
	const Si = require('./clases/Si');
	const Para = require('./clases/Para');
	const Mientras = require('./clases/Mientras');
	const Iteracion = require('./clases/Iteracion');
	const Detener = require('./clases/Detener');
	const Continuar = require('./clases/Continuar');
	const DibujarAST = require('./clases/DibujarAST');
	const DibujarEXP = require('./clases/DibujarEXP');
	const DibujarTS = require('./clases/DibujarTS');
	const Incerteza = require('./clases/Incerteza');
	var tabla = new Tabla(null);
	var salida = new Salida();
	var operaciones = [];
	var operaciones_anidadas = [];
	var operaciones_anidadas_else = [];
	var operaciones_funcion = [];
	var operaciones_si = [];
	var operaciones_else = [];
	var parametros_metodo = [];
	var valores_llamada = [];
	var operaciones_ciclo = [];
	var parametros_mostrar = [];
	var identificadores_decla = [];
	var operaciones_anidadas_2 = [];
	var operaciones_anidadas_else_2 = [];


/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:return 51;
break;
case 2:return 9;
break;
case 3:
break;
case 4:console.log("COM: " + yy_.yytext)
break;
case 5:console.log("COMMULT: " + yy_.yytext)
break;
case 6:return 14;
break;
case 7:return 11;
break;
case 8:return 7;
break;
case 9:return 81;
break;
case 10:return 82;
break;
case 11:return 84;
break;
case 12:return 80;
break;
case 13:return 83;
break;
case 14:return 19;
break;
case 15:return 112;
break;
case 16:return 113;
break;
case 17:return 76;
break;
case 18:return 20;
break;
case 19:return 50;
break;
case 20:return 52;
break;
case 21:return 41;
break;
case 22:return 38;
break;
case 23:return 56;
break;
case 24:return 57;
break;
case 25:return 33;
break;
case 26:return 31;
break;
case 27:return 26;
break;
case 28:return 29;
break;
case 29:return 13;
break;
case 30:return 36;
break;
case 31:return 23;
break;
case 32:return 42;
break;
case 33:return 'LLAVIZQ';
break;
case 34:return 'LLAVDER';
break;
case 35:return 21;
break;
case 36:return 22;
break;
case 37:return 44;
break;
case 38:return 45;
break;
case 39:return 100;
break;
case 40:return 101;
break;
case 41:return 103;
break;
case 42:return 104;
break;
case 43:return 105;
break;
case 44:return 106;
break;
case 45:return 97;
break;
case 46:return 96;
break;
case 47:return 91;
break;
case 48:return 92;
break;
case 49:return 95;
break;
case 50:return 94;
break;
case 51:return 78;
break;
case 52:return 98;
break;
case 53:return 87
break;
case 54:return 85;
break;
case 55:return 89;
break;
case 56:return 108;
break;
case 57:return 111;
break;
case 58:return 8;
break;
case 59:return 110;
break;
case 60:return 34;
break;
case 61:return 12;
break;
case 62:return 6;
break;
case 63:salida.agregarError(Tipo.LEXICO, "Error en el lexema: " + yy_.yytext, yy_.yylloc.first_line,yy_.yylloc.first_column); console.error('Este es un error lÃ©xico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:[ ]+)/,/^(?:[	])/,/^(?:\n)/,/^(?:[\r]+)/,/^(?:!!.*)/,/^(?:[\"][\"][\"][^*]*[*]*([^/*][^*]*[*]+)*[\"][\"][\"])/,/^(?:crl\b)/,/^(?:Importar\b)/,/^(?:Incerteza\b)/,/^(?:Double\b)/,/^(?:Boolean\b)/,/^(?:String\b)/,/^(?:Int\b)/,/^(?:Char\b)/,/^(?:Void\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:Retorno\b)/,/^(?:Principal\b)/,/^(?:Si\b)/,/^(?:Sino\b)/,/^(?:Para\b)/,/^(?:Mientras\b)/,/^(?:Detener\b)/,/^(?:Continuar\b)/,/^(?:Mostrar\b)/,/^(?:DibujarAST\b)/,/^(?:DibujarEXP\b)/,/^(?:DibujarTS\b)/,/^(?:\.)/,/^(?:,)/,/^(?::)/,/^(?:;)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\^)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:!=)/,/^(?:<)/,/^(?:>)/,/^(?:=)/,/^(?:~)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:\|&)/,/^(?:!)/,/^(?:'([^']|\\n|\\r|\\t)')/,/^(?:[0-9]+\.[0-9]+\b)/,/^(?:[0-9]+\b)/,/^(?:([\"](\\"|[^"])*[^\\][\"])|[\"][\"])/,/^(?:([a-zA-Z"_"])[a-z0-9A-Z"_""Ã±""Ã"]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    //var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}