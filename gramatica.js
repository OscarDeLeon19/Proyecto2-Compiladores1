/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,8],$V1=[1,9],$V2=[1,10],$V3=[1,11],$V4=[1,12],$V5=[1,13],$V6=[1,14],$V7=[5,7,48,55,56,57,58,59],$V8=[2,71],$V9=[1,22],$Va=[1,38],$Vb=[1,43],$Vc=[1,37],$Vd=[1,33],$Ve=[1,35],$Vf=[1,36],$Vg=[1,39],$Vh=[1,40],$Vi=[1,41],$Vj=[1,42],$Vk=[7,28],$Vl=[1,51],$Vm=[7,14,28,53,60],$Vn=[7,14,28,53,60,62],$Vo=[7,14,28,53,60,62,64,65],$Vp=[7,14,28,53,60,62,64,65,67,68,69,70,71],$Vq=[7,14,28,53,60,62,64,65,67,68,69,70,71,73,74],$Vr=[1,65],$Vs=[7,14,28,53,60,62,64,65,67,68,69,70,71,73,74,76,77,78,79],$Vt=[1,70],$Vu=[1,72],$Vv=[14,53],$Vw=[7,14,28,53,60,62,64,65,67,68,69,70,71,73,74,76,77,78],$Vx=[1,108],$Vy=[2,53],$Vz=[1,126],$VA=[1,127],$VB=[1,125],$VC=[1,123],$VD=[1,124],$VE=[1,130],$VF=[1,129],$VG=[1,128],$VH=[2,62],$VI=[1,137],$VJ=[1,150],$VK=[7,32],$VL=[1,182],$VM=[1,187],$VN=[1,191],$VO=[1,194],$VP=[2,40],$VQ=[2,28],$VR=[1,209],$VS=[1,210];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion":6,"SALTO":7,"declaracion":8,"funcion":9,"dibujar_EXP":10,"DIBUJAREXP":11,"PARIZQ":12,"expresion":13,"PARDER":14,"dibujar_TS":15,"DIBUJARTS":16,"dibujar_AST":17,"DIBUJARAST":18,"ID":19,"mostrar":20,"MOSTRAR":21,"mientras":22,"MIENTRAS":23,"DOSPTS":24,"instrucciones_para":25,"para":26,"PARA":27,"PTCOMA":28,"aumentar":29,"INCREMENTO":30,"DECREMENTO":31,"TAB":32,"instruccion_para":33,"asignacion":34,"llamada":35,"DETENER":36,"CONTINUAR":37,"si":38,"SI":39,"instrucciones_if":40,"SINO":41,"instruccion_if":42,"instrucciones_funcion":43,"instruccion_funcion":44,"tipo":45,"parametros":46,"retorno_metodo":47,"VOID":48,"retorno":49,"PRINCIPAL":50,"RETORNO":51,"lista_valores":52,"COMA":53,"IGUAL":54,"INT":55,"DOUBLE":56,"BOOLEAN":57,"CHAR":58,"STRING":59,"OR":60,"expresion_1":61,"AND":62,"expresion_relacional":63,"DOBLE_IGUAL":64,"DIFERENTE":65,"expresion_relacional_1":66,"MAYOR":67,"MENOR":68,"MAYOR_IGUAL":69,"MENOR_IGUAL":70,"INCERT":71,"expresion_aritmetica":72,"MAS":73,"MENOS":74,"expresion_aritmetica_1":75,"POR":76,"DIVIDIDO":77,"MODULO":78,"POTENCIA":79,"expresion_not":80,"NOT":81,"valores":82,"DECIMAL":83,"ENTERO":84,"CADENA":85,"CARACTER":86,"TRUE":87,"FALSE":88,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"SALTO",11:"DIBUJAREXP",12:"PARIZQ",14:"PARDER",16:"DIBUJARTS",18:"DIBUJARAST",19:"ID",21:"MOSTRAR",23:"MIENTRAS",24:"DOSPTS",27:"PARA",28:"PTCOMA",30:"INCREMENTO",31:"DECREMENTO",32:"TAB",36:"DETENER",37:"CONTINUAR",39:"SI",41:"SINO",48:"VOID",50:"PRINCIPAL",51:"RETORNO",53:"COMA",54:"IGUAL",55:"INT",56:"DOUBLE",57:"BOOLEAN",58:"CHAR",59:"STRING",60:"OR",62:"AND",64:"DOBLE_IGUAL",65:"DIFERENTE",67:"MAYOR",68:"MENOR",69:"MAYOR_IGUAL",70:"MENOR_IGUAL",71:"INCERT",73:"MAS",74:"MENOS",76:"POR",77:"DIVIDIDO",78:"MODULO",79:"POTENCIA",81:"NOT",83:"DECIMAL",84:"ENTERO",85:"CADENA",86:"CARACTER",87:"TRUE",88:"FALSE"},
productions_: [0,[3,2],[3,1],[4,3],[4,2],[4,1],[6,1],[6,1],[6,0],[10,4],[15,3],[17,4],[20,4],[22,7],[26,11],[29,1],[29,1],[25,5],[25,4],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,0],[38,12],[38,7],[40,5],[40,4],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,0],[43,4],[43,3],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[44,0],[9,11],[9,10],[9,10],[9,9],[9,7],[47,2],[47,1],[49,2],[49,0],[35,4],[35,3],[52,3],[52,1],[46,4],[46,2],[34,3],[8,4],[8,2],[45,1],[45,1],[45,1],[45,1],[45,1],[13,3],[13,1],[61,3],[61,1],[63,3],[63,3],[63,1],[66,3],[66,3],[66,3],[66,3],[66,3],[66,1],[72,3],[72,3],[72,1],[75,3],[75,3],[75,3],[75,3],[75,1],[80,2],[80,1],[82,1],[82,1],[82,2],[82,2],[82,3],[82,1],[82,1],[82,1],[82,1],[82,1],[82,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 5:
console.error('Este es un error sint√°ctico: ' + yytext + ', en la linea: ' + (this._$.first_line) + ', en la columna: ' + this._$.first_column)
break;
case 72:
this.$ = Tipo.ENTERO;
break;
case 73:
this.$ = Tipo.DECIMAL;
break;
case 74:
this.$ = Tipo.BOOLEAN;
break;
case 75:
this.$ = Tipo.CARACTER;
break;
case 76:
this.$ = Tipo.CADENA;
break;
case 83: case 89: case 92: case 97: case 99:
this.$ = $$[$0];
break;
case 100:
this.$ = new Valor(Number($$[$0]),Tipo.DECIMAL,Tipo.VALOR,this._$.first_line,this._$.first_column);
break;
case 101:
this.$ = new Valor(Number($$[$0]),Tipo.ENTERO,Tipo.VALOR,this._$.first_line,this._$.first_column);
break;
case 102:
this.$ = new Valor(-1*Number($$[$0]),Tipo.DECIMAL,Tipo.VALOR,this._$.first_line,this._$.first_column);
break;
case 103:
this.$ = new Valor(-1*Number($$[$0]),Tipo.ENTERO,Tipo.VALOR,this._$.first_line,this._$.first_column);
break;
case 104:
this.$ = $$[$0-1];
break;
case 105:
this.$ = new Valor($$[$0],Tipo.CADENA,Tipo.VALOR,this._$.first_line,this._$.first_column);
break;
case 106:
this.$ = new Valor($$[$0],Tipo.CARACTER,Tipo.VALOR,this._$.first_line,this._$.first_column);
break;
case 107:
this.$ = new Valor(true,Tipo.BOOLEAN,Tipo.VALOR,this._$.first_line,this._$.first_column);
break;
case 108:
this.$ = new Valor(false,Tipo.BOOLEAN,Tipo.VALOR,this._$.first_line,this._$.first_column);
break;
case 109:
this.$ = new Valor($$[$0],Tipo.ID,Tipo.VALOR,this._$.first_line,this._$.first_column);
break;
}
},
table: [{2:[1,5],3:1,4:2,5:[1,3],6:4,7:$V0,8:6,9:7,45:8,48:$V1,55:$V2,56:$V3,57:$V4,58:$V5,59:$V6},{1:[3]},{5:[1,15],6:16,7:$V0,8:6,9:7,45:8,48:$V1,55:$V2,56:$V3,57:$V4,58:$V5,59:$V6},{1:[2,2]},{7:[1,17]},o($V7,[2,5]),{7:[2,6]},{7:[2,7]},{19:[1,18]},{19:[1,19],50:[1,20]},{19:[2,72]},{19:[2,73]},{19:[2,74]},{19:[2,75]},{19:[2,76]},{1:[2,1]},{7:[1,21]},o($V7,[2,4]),{7:$V8,12:[1,23],54:$V9},{12:[1,24]},{12:[1,25]},o($V7,[2,3]),{12:$Va,13:26,19:$Vb,35:44,61:27,63:28,66:29,72:30,74:$Vc,75:31,80:32,81:$Vd,82:34,83:$Ve,84:$Vf,85:$Vg,86:$Vh,87:$Vi,88:$Vj},{14:[1,46],45:47,46:45,55:$V2,56:$V3,57:$V4,58:$V5,59:$V6},{14:[1,49],45:47,46:48,55:$V2,56:$V3,57:$V4,58:$V5,59:$V6},{14:[1,50]},o($Vk,[2,70],{60:$Vl}),o($Vm,[2,78],{62:[1,52]}),o($Vn,[2,80],{64:[1,53],65:[1,54]}),o($Vo,[2,83],{67:[1,55],68:[1,56],69:[1,57],70:[1,58],71:[1,59]}),o($Vp,[2,89],{73:[1,60],74:[1,61]}),o($Vq,[2,92],{76:[1,62],77:[1,63],78:[1,64],79:$Vr}),o($Vs,[2,97]),{12:$Va,19:$Vb,35:44,74:$Vc,80:66,81:$Vd,82:34,83:$Ve,84:$Vf,85:$Vg,86:$Vh,87:$Vi,88:$Vj},o($Vs,[2,99]),o($Vs,[2,100]),o($Vs,[2,101]),{83:[1,67],84:[1,68]},{12:$Va,13:69,19:$Vb,35:44,61:27,63:28,66:29,72:30,74:$Vc,75:31,80:32,81:$Vd,82:34,83:$Ve,84:$Vf,85:$Vg,86:$Vh,87:$Vi,88:$Vj},o($Vs,[2,105]),o($Vs,[2,106]),o($Vs,[2,107]),o($Vs,[2,108]),o($Vs,[2,109],{12:$Vt}),o($Vs,[2,110]),{14:[1,71],53:$Vu},{24:[1,73]},{19:[1,74]},{14:[1,75],53:$Vu},{24:[1,76]},{24:[1,77]},{12:$Va,13:78,19:$Vb,35:44,61:27,63:28,66:29,72:30,74:$Vc,75:31,80:32,81:$Vd,82:34,83:$Ve,84:$Vf,85:$Vg,86:$Vh,87:$Vi,88:$Vj},{12:$Va,19:$Vb,35:44,61:79,63:28,66:29,72:30,74:$Vc,75:31,80:32,81:$Vd,82:34,83:$Ve,84:$Vf,85:$Vg,86:$Vh,87:$Vi,88:$Vj},{12:$Va,19:$Vb,35:44,63:80,66:29,72:30,74:$Vc,75:31,80:32,81:$Vd,82:34,83:$Ve,84:$Vf,85:$Vg,86:$Vh,87:$Vi,88:$Vj},{12:$Va,19:$Vb,35:44,63:81,66:29,72:30,74:$Vc,75:31,80:32,81:$Vd,82:34,83:$Ve,84:$Vf,85:$Vg,86:$Vh,87:$Vi,88:$Vj},{12:$Va,19:$Vb,35:44,66:82,72:30,74:$Vc,75:31,80:32,81:$Vd,82:34,83:$Ve,84:$Vf,85:$Vg,86:$Vh,87:$Vi,88:$Vj},{12:$Va,19:$Vb,35:44,66:83,72:30,74:$Vc,75:31,80:32,81:$Vd,82:34,83:$Ve,84:$Vf,85:$Vg,86:$Vh,87:$Vi,88:$Vj},{12:$Va,19:$Vb,35:44,66:84,72:30,74:$Vc,75:31,80:32,81:$Vd,82:34,83:$Ve,84:$Vf,85:$Vg,86:$Vh,87:$Vi,88:$Vj},{12:$Va,19:$Vb,35:44,66:85,72:30,74:$Vc,75:31,80:32,81:$Vd,82:34,83:$Ve,84:$Vf,85:$Vg,86:$Vh,87:$Vi,88:$Vj},{12:$Va,19:$Vb,35:44,66:86,72:30,74:$Vc,75:31,80:32,81:$Vd,82:34,83:$Ve,84:$Vf,85:$Vg,86:$Vh,87:$Vi,88:$Vj},{12:$Va,19:$Vb,35:44,72:87,74:$Vc,75:31,80:32,81:$Vd,82:34,83:$Ve,84:$Vf,85:$Vg,86:$Vh,87:$Vi,88:$Vj},{12:$Va,19:$Vb,35:44,72:88,74:$Vc,75:31,80:32,81:$Vd,82:34,83:$Ve,84:$Vf,85:$Vg,86:$Vh,87:$Vi,88:$Vj},{12:$Va,19:$Vb,35:44,74:$Vc,75:89,80:32,81:$Vd,82:34,83:$Ve,84:$Vf,85:$Vg,86:$Vh,87:$Vi,88:$Vj},{12:$Va,19:$Vb,35:44,74:$Vc,75:90,80:32,81:$Vd,82:34,83:$Ve,84:$Vf,85:$Vg,86:$Vh,87:$Vi,88:$Vj},{12:$Va,19:$Vb,35:44,74:$Vc,75:91,80:32,81:$Vd,82:34,83:$Ve,84:$Vf,85:$Vg,86:$Vh,87:$Vi,88:$Vj},{12:$Va,19:$Vb,35:44,74:$Vc,75:92,80:32,81:$Vd,82:34,83:$Ve,84:$Vf,85:$Vg,86:$Vh,87:$Vi,88:$Vj},o($Vs,[2,98]),o($Vs,[2,102]),o($Vs,[2,103]),{14:[1,93],60:$Vl},{12:$Va,13:96,14:[1,95],19:$Vb,35:44,52:94,61:27,63:28,66:29,72:30,74:$Vc,75:31,80:32,81:$Vd,82:34,83:$Ve,84:$Vf,85:$Vg,86:$Vh,87:$Vi,88:$Vj},{24:[1,97]},{45:98,55:$V2,56:$V3,57:$V4,58:$V5,59:$V6},{7:[1,99]},o($Vv,[2,68]),{24:[1,100]},{7:[1,101]},{7:[1,102]},o($Vm,[2,77]),o($Vn,[2,79]),o($Vo,[2,81]),o($Vo,[2,82]),o($Vp,[2,84]),o($Vp,[2,85]),o($Vp,[2,86]),o($Vp,[2,87]),o($Vp,[2,88]),o($Vq,[2,90]),o($Vq,[2,91]),o($Vw,[2,93],{79:$Vr}),o($Vw,[2,94],{79:$Vr}),o($Vw,[2,95],{79:$Vr}),o($Vw,[2,96],{79:$Vr}),o($Vs,[2,104]),{14:[1,103],53:[1,104]},o($Vs,[2,64]),o($Vv,[2,66],{60:$Vl}),{7:[1,105]},{19:[1,106]},{32:$Vx,43:107},{7:[1,109]},{32:$Vx,43:110},{7:$Vy,8:112,10:117,11:$Vz,15:118,16:$VA,17:116,18:$VB,19:$VC,20:115,21:$VD,22:121,23:$VE,26:120,27:$VF,34:113,35:114,38:119,39:$VG,44:111,45:122,55:$V2,56:$V3,57:$V4,58:$V5,59:$V6},o($Vs,[2,63]),{12:$Va,13:131,19:$Vb,35:44,61:27,63:28,66:29,72:30,74:$Vc,75:31,80:32,81:$Vd,82:34,83:$Ve,84:$Vf,85:$Vg,86:$Vh,87:$Vi,88:$Vj},{32:$Vx,43:132},o($Vv,[2,67]),{32:[1,133]},{7:$Vy,8:112,10:117,11:$Vz,15:118,16:$VA,17:116,18:$VB,19:$VC,20:115,21:$VD,22:121,23:$VE,26:120,27:$VF,34:113,35:114,38:119,39:$VG,44:134,45:122,55:$V2,56:$V3,57:$V4,58:$V5,59:$V6},{32:$Vx,43:135},{7:$VH,32:$VI,49:136},{7:[2,58]},{7:[2,43]},{7:[2,44]},{7:[2,45]},{7:[2,46]},{7:[2,47]},{7:[2,48]},{7:[2,49]},{7:[2,50]},{7:[2,51]},{7:[2,52]},{19:[1,138]},{12:$Vt,54:[1,139]},{12:[1,140]},{12:[1,141]},{12:[1,142]},{12:[1,143]},{12:[1,144]},{12:[1,145]},{12:[1,146]},o($Vv,[2,65],{60:$Vl}),{32:[1,147]},{7:$Vy,8:112,10:117,11:$Vz,15:118,16:$VA,17:116,18:$VB,19:$VC,20:115,21:$VD,22:121,23:$VE,26:120,27:$VF,34:113,35:114,38:119,39:$VG,44:149,45:122,47:148,51:$VJ,55:$V2,56:$V3,57:$V4,58:$V5,59:$V6},{7:[1,151]},{7:$VH,32:$VI,49:152},{7:[1,153]},{7:$Vy,8:112,10:117,11:$Vz,15:118,16:$VA,17:116,18:$VB,19:$VC,20:115,21:$VD,22:121,23:$VE,26:120,27:$VF,34:113,35:114,38:119,39:$VG,44:149,45:122,51:[1,154],55:$V2,56:$V3,57:$V4,58:$V5,59:$V6},o($Vk,$V8,{54:$V9}),{12:$Va,13:155,19:$Vb,35:44,61:27,63:28,66:29,72:30,74:$Vc,75:31,80:32,81:$Vd,82:34,83:$Ve,84:$Vf,85:$Vg,86:$Vh,87:$Vi,88:$Vj},{12:$Va,13:156,19:$Vb,35:44,61:27,63:28,66:29,72:30,74:$Vc,75:31,80:32,81:$Vd,82:34,83:$Ve,84:$Vf,85:$Vg,86:$Vh,87:$Vi,88:$Vj},{19:[1,157]},{12:$Va,13:158,19:$Vb,35:44,61:27,63:28,66:29,72:30,74:$Vc,75:31,80:32,81:$Vd,82:34,83:$Ve,84:$Vf,85:$Vg,86:$Vh,87:$Vi,88:$Vj},{14:[1,159]},{12:$Va,13:160,19:$Vb,35:44,61:27,63:28,66:29,72:30,74:$Vc,75:31,80:32,81:$Vd,82:34,83:$Ve,84:$Vf,85:$Vg,86:$Vh,87:$Vi,88:$Vj},{8:161,45:122,55:$V2,56:$V3,57:$V4,58:$V5,59:$V6},{12:$Va,13:162,19:$Vb,35:44,61:27,63:28,66:29,72:30,74:$Vc,75:31,80:32,81:$Vd,82:34,83:$Ve,84:$Vf,85:$Vg,86:$Vh,87:$Vi,88:$Vj},{7:$Vy,8:112,10:117,11:$Vz,15:118,16:$VA,17:116,18:$VB,19:$VC,20:115,21:$VD,22:121,23:$VE,26:120,27:$VF,34:113,35:114,38:119,39:$VG,44:149,45:122,47:163,51:$VJ,55:$V2,56:$V3,57:$V4,58:$V5,59:$V6},{7:[1,164]},{7:[1,165]},{7:[2,60],12:$Va,13:166,19:$Vb,35:44,61:27,63:28,66:29,72:30,74:$Vc,75:31,80:32,81:$Vd,82:34,83:$Ve,84:$Vf,85:$Vg,86:$Vh,87:$Vi,88:$Vj},o($VK,[2,42]),{7:[1,167]},{7:[2,57]},{7:[2,61]},{7:[2,69],60:$Vl},{14:[1,168],60:$Vl},{14:[1,169]},{14:[1,170],60:$Vl},{7:[2,10]},{14:[1,171],60:$Vl},{28:[1,172]},{14:[1,173],60:$Vl},{7:[1,174]},{7:[2,56]},o($VK,[2,41]),{7:[2,59],60:$Vl},{7:[2,55]},{7:[2,12]},{7:[2,11]},{7:[2,9]},{24:[1,175]},{12:$Va,13:176,19:$Vb,35:44,61:27,63:28,66:29,72:30,74:$Vc,75:31,80:32,81:$Vd,82:34,83:$Ve,84:$Vf,85:$Vg,86:$Vh,87:$Vi,88:$Vj},{24:[1,177]},{7:[2,54]},{7:[1,178]},{28:[1,179],60:$Vl},{7:[1,180]},{32:$VL,40:181},{29:183,30:[1,184],31:[1,185]},{25:186,32:$VM},{7:[2,30],32:[1,188]},{32:[1,189]},{14:[1,190]},{14:[2,15]},{14:[2,16]},{7:[2,13],32:$VN},{32:[1,192]},{32:$VO,41:[1,193]},{7:$VP,8:196,10:201,11:$Vz,15:202,16:$VA,17:200,18:$VB,19:$VC,20:199,21:$VD,34:197,35:198,42:195,45:122,55:$V2,56:$V3,57:$V4,58:$V5,59:$V6},{24:[1,203]},{32:[1,204]},{7:$VQ,8:206,10:213,11:$Vz,15:214,16:$VA,17:212,18:$VB,19:$VC,20:211,21:$VD,33:205,34:207,35:208,36:$VR,37:$VS,45:122,55:$V2,56:$V3,57:$V4,58:$V5,59:$V6},{24:[1,215]},{7:$VP,8:196,10:201,11:$Vz,15:202,16:$VA,17:200,18:$VB,19:$VC,20:199,21:$VD,34:197,35:198,42:216,45:122,55:$V2,56:$V3,57:$V4,58:$V5,59:$V6},{7:[1,217]},{7:[2,33]},{7:[2,34]},{7:[2,35]},{7:[2,36]},{7:[2,37]},{7:[2,38]},{7:[2,39]},{7:[1,218]},{7:$VQ,8:206,10:213,11:$Vz,15:214,16:$VA,17:212,18:$VB,19:$VC,20:211,21:$VD,33:219,34:207,35:208,36:$VR,37:$VS,45:122,55:$V2,56:$V3,57:$V4,58:$V5,59:$V6},{7:[1,220]},{7:[2,19]},{7:[2,20]},{7:[2,21]},{7:[2,22]},{7:[2,23]},{7:[2,24]},{7:[2,25]},{7:[2,26]},{7:[2,27]},{7:[1,221]},{7:[1,222]},o($VK,[2,32]),{25:223,32:$VM},{7:[1,224]},o($VK,[2,18]),{32:$VL,40:225},o($VK,[2,31]),{7:[2,14],32:$VN},o($VK,[2,17]),{7:[2,29],32:[1,226]},{32:$VO}],
defaultActions: {3:[2,2],6:[2,6],7:[2,7],10:[2,72],11:[2,73],12:[2,74],13:[2,75],14:[2,76],15:[2,1],111:[2,58],112:[2,43],113:[2,44],114:[2,45],115:[2,46],116:[2,47],117:[2,48],118:[2,49],119:[2,50],120:[2,51],121:[2,52],153:[2,57],154:[2,61],159:[2,10],164:[2,56],167:[2,55],168:[2,12],169:[2,11],170:[2,9],174:[2,54],184:[2,15],185:[2,16],196:[2,33],197:[2,34],198:[2,35],199:[2,36],200:[2,37],201:[2,38],202:[2,39],206:[2,19],207:[2,20],208:[2,21],209:[2,22],210:[2,23],211:[2,24],212:[2,25],213:[2,26],214:[2,27]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	const Tipo = require('./clases/Tipo');
	const Tabla = require('./clases/Tabla');
	const Salida = require("./clases/Salida");
	const Valor = require('./clases/Valor');
	var tabla = new Tabla(null);
	var salida = new Salida();


/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:return 32;
break;
case 2:return 7;
break;
case 3:
break;
case 4:// Comentario de una linea
break;
case 5:// comentario multiple l√≠neas
break;
case 6:return 'IMPORTAR';
break;
case 7:return 'INCERTEZA';
break;
case 8:return 56;
break;
case 9:return 57;
break;
case 10:return 59;
break;
case 11:return 55;
break;
case 12:return 58;
break;
case 13:return 48;
break;
case 14:return 87;
break;
case 15:return 88;
break;
case 16:return 51;
break;
case 17:return 50;
break;
case 18:return 39;
break;
case 19:return 41;
break;
case 20:return 27;
break;
case 21:return 23;
break;
case 22:return 36;
break;
case 23:return 37;
break;
case 24:return 21;
break;
case 25:return 18;
break;
case 26:return 11;
break;
case 27:return 16;
break;
case 28:return 53;
break;
case 29:return 24;
break;
case 30:return 28;
break;
case 31:return 'LLAVIZQ';
break;
case 32:return 'LLAVDER';
break;
case 33:return 12;
break;
case 34:return 14;
break;
case 35:return 30;
break;
case 36:return 31;
break;
case 37:return 73;
break;
case 38:return 74;
break;
case 39:return 76;
break;
case 40:return 77;
break;
case 41:return 78;
break;
case 42:return 79;
break;
case 43:return 70;
break;
case 44:return 69;
break;
case 45:return 64;
break;
case 46:return 65;
break;
case 47:return 68;
break;
case 48:return 67;
break;
case 49:return 54;
break;
case 50:return 71;
break;
case 51:return 62
break;
case 52:return 60;
break;
case 53:return 'XOR';
break;
case 54:return 81;
break;
case 55:return 86;
break;
case 56:return 83;
break;
case 57:return 84;
break;
case 58:return 85;
break;
case 59:return 19;
break;
case 60:return 5;
break;
case 61: console.error('Este es un error l√©xico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:[ ]+)/,/^(?:[	])/,/^(?:\n)/,/^(?:[\r]+)/,/^(?:!!.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:Importar\b)/,/^(?:Incerteza\b)/,/^(?:Double\b)/,/^(?:Boolean\b)/,/^(?:String\b)/,/^(?:Int\b)/,/^(?:Char\b)/,/^(?:Void\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:Retorno\b)/,/^(?:Principal\b)/,/^(?:Si\b)/,/^(?:Sino\b)/,/^(?:Para\b)/,/^(?:Mientras\b)/,/^(?:Detener\b)/,/^(?:Continuar\b)/,/^(?:Mostrar\b)/,/^(?:DibujarAST\b)/,/^(?:DibujarEXP\b)/,/^(?:DibujarTS\b)/,/^(?:,)/,/^(?::)/,/^(?:;)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\^)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:!=)/,/^(?:<)/,/^(?:>)/,/^(?:=)/,/^(?:~)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!&)/,/^(?:!)/,/^(?:'([^']|\\n|\\r|\\t)')/,/^(?:[0-9]+\.[0-9]+\b)/,/^(?:[0-9]+\b)/,/^(?:([\"](\\"|[^"])*[^\\][\"])|[\"][\"])/,/^(?:([a-zA-Z"_"])[a-z0-9A-Z"_""√±""√ë"]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}