/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,9],$V1=[1,11],$V2=[1,10],$V3=[1,12],$V4=[1,13],$V5=[1,14],$V6=[1,15],$V7=[1,16],$V8=[5,7,21,48,55,56,57,58,59],$V9=[2,74],$Va=[1,25],$Vb=[1,41],$Vc=[1,46],$Vd=[1,40],$Ve=[1,36],$Vf=[1,38],$Vg=[1,39],$Vh=[1,42],$Vi=[1,43],$Vj=[1,44],$Vk=[1,45],$Vl=[1,56],$Vm=[7,15,28,53,60],$Vn=[7,15,28,53,60,62],$Vo=[7,15,28,53,60,62,64,65],$Vp=[7,15,28,53,60,62,64,65,67,68,69,70,71],$Vq=[7,15,28,53,60,62,64,65,67,68,69,70,71,73,74],$Vr=[1,70],$Vs=[7,15,28,53,60,62,64,65,67,68,69,70,71,73,74,76,77,78,79],$Vt=[1,75],$Vu=[7,28],$Vv=[1,77],$Vw=[15,53],$Vx=[7,15,28,53,60,62,64,65,67,68,69,70,71,73,74,76,77,78],$Vy=[1,113],$Vz=[1,127],$VA=[2,55],$VB=[1,131],$VC=[1,132],$VD=[1,130],$VE=[1,129],$VF=[1,135],$VG=[1,134],$VH=[1,133],$VI=[2,65],$VJ=[1,142],$VK=[1,154],$VL=[7,32],$VM=[1,184],$VN=[1,189],$VO=[1,193],$VP=[1,196],$VQ=[1,205],$VR=[2,41],$VS=[2,29],$VT=[1,212],$VU=[1,213];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion":6,"SALTO":7,"declaracion":8,"funcion":9,"mostrar":10,"dibujar_EXP":11,"DIBUJAREXP":12,"PARIZQ":13,"expresion":14,"PARDER":15,"dibujar_TS":16,"DIBUJARTS":17,"dibujar_AST":18,"DIBUJARAST":19,"ID":20,"MOSTRAR":21,"mientras":22,"MIENTRAS":23,"DOSPTS":24,"instrucciones_para":25,"para":26,"PARA":27,"PTCOMA":28,"aumentar":29,"INCREMENTO":30,"DECREMENTO":31,"TAB":32,"instruccion_para":33,"asignacion":34,"llamada":35,"DETENER":36,"CONTINUAR":37,"si":38,"SI":39,"instrucciones_if":40,"SINO":41,"instruccion_if":42,"instrucciones_funcion":43,"instruccion_funcion":44,"tipo":45,"parametros":46,"retorno_metodo":47,"VOID":48,"retorno":49,"PRINCIPAL":50,"RETORNO":51,"lista_valores":52,"COMA":53,"IGUAL":54,"INT":55,"DOUBLE":56,"BOOLEAN":57,"CHAR":58,"STRING":59,"OR":60,"expresion_1":61,"AND":62,"expresion_relacional":63,"DOBLE_IGUAL":64,"DIFERENTE":65,"expresion_relacional_1":66,"MAYOR":67,"MENOR":68,"MAYOR_IGUAL":69,"MENOR_IGUAL":70,"INCERT":71,"expresion_aritmetica":72,"MAS":73,"MENOS":74,"expresion_aritmetica_1":75,"POR":76,"DIVIDIDO":77,"MODULO":78,"POTENCIA":79,"expresion_not":80,"NOT":81,"valores":82,"DECIMAL":83,"ENTERO":84,"CADENA":85,"CARACTER":86,"TRUE":87,"FALSE":88,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"SALTO",12:"DIBUJAREXP",13:"PARIZQ",15:"PARDER",17:"DIBUJARTS",19:"DIBUJARAST",20:"ID",21:"MOSTRAR",23:"MIENTRAS",24:"DOSPTS",27:"PARA",28:"PTCOMA",30:"INCREMENTO",31:"DECREMENTO",32:"TAB",36:"DETENER",37:"CONTINUAR",39:"SI",41:"SINO",48:"VOID",50:"PRINCIPAL",51:"RETORNO",53:"COMA",54:"IGUAL",55:"INT",56:"DOUBLE",57:"BOOLEAN",58:"CHAR",59:"STRING",60:"OR",62:"AND",64:"DOBLE_IGUAL",65:"DIFERENTE",67:"MAYOR",68:"MENOR",69:"MAYOR_IGUAL",70:"MENOR_IGUAL",71:"INCERT",73:"MAS",74:"MENOS",76:"POR",77:"DIVIDIDO",78:"MODULO",79:"POTENCIA",81:"NOT",83:"DECIMAL",84:"ENTERO",85:"CADENA",86:"CARACTER",87:"TRUE",88:"FALSE"},
productions_: [0,[3,2],[3,1],[4,3],[4,2],[4,1],[6,1],[6,1],[6,1],[6,0],[11,4],[16,3],[18,4],[10,4],[22,7],[26,11],[29,1],[29,1],[25,5],[25,4],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,0],[38,12],[38,7],[40,5],[40,4],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,0],[42,1],[43,4],[43,3],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[44,0],[44,1],[9,11],[9,10],[9,10],[9,9],[9,7],[47,2],[47,1],[49,2],[49,0],[35,4],[35,3],[52,3],[52,1],[46,4],[46,2],[34,3],[8,4],[8,2],[45,1],[45,1],[45,1],[45,1],[45,1],[14,3],[14,1],[61,3],[61,1],[63,3],[63,3],[63,1],[66,3],[66,3],[66,3],[66,3],[66,3],[66,1],[72,3],[72,3],[72,1],[75,3],[75,3],[75,3],[75,3],[75,1],[80,2],[80,1],[82,1],[82,1],[82,2],[82,2],[82,3],[82,1],[82,1],[82,1],[82,1],[82,1],[82,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

		/*
		for(var i = 0; i< $$[$0-1].length; i++){
            if($$[$0-1][i]){
                $$[$0-1][i].operar(tabla, salida);
			}	
        }
		*/
		return salida;
		
	
break;
case 3:
this.$ = operaciones; operaciones.push($$[$0-1]);
break;
case 4:
operaciones.push($$[$0-1]);
break;
case 5: case 42: case 56:
console.error('Este es un error sintÃ¡ctico: ' + yytext + ', en la linea: ' + (yylineno) + ', en la columna: ' + this._$.first_column)
break;
case 6:
if ($$[$0]!=null){this.$ = $$[$0]}
break;
case 7:
this.$ = null
break;
case 8: case 86: case 92: case 95: case 100: case 102:
this.$ = $$[$0];
break;
case 13:
this.$ = new Mostrar("Mostrar",$$[$0-1],Tipo.VALOR,yylineno,this._$.first_column);
break;
case 72:
this.$ = new Asignacion("Asignacion",$$[$0-2],$$[$0],yylineno,this._$.first_column);
break;
case 73:
this.$ = new Declaracion("Declaracion",$$[$0-2],$$[$0],$$[$0-3],Tipo.VALOR,yylineno,this._$.first_column);
break;
case 74:
this.$ = new Declaracion("Declaracion",$$[$0],null,$$[$0-1],Tipo.VALOR,yylineno,this._$.first_column);
break;
case 75:
this.$ = Tipo.ENTERO;
break;
case 76:
this.$ = Tipo.DECIMAL;
break;
case 77:
this.$ = Tipo.BOOLEAN;
break;
case 78:
this.$ = Tipo.CARACTER;
break;
case 79:
this.$ = Tipo.CADENA;
break;
case 80:
this.$ = new Logica("Logica",$$[$0-2],$$[$0],Tipo.OR,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 81: case 83:
this.$ = $$[$0]
break;
case 82:
this.$ = new Logica("Logica",$$[$0-2],$$[$0],Tipo.AND,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 84:
this.$ = new Relacion("Relacion",$$[$0-2],$$[$0],Tipo.IGUAL,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 85:
this.$ = new Relacion("Relacion",$$[$0-2],$$[$0],Tipo.DIFERENTE,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 87:
this.$ = new Relacion("Relacion",$$[$0-2],$$[$0],Tipo.MAYOR,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 88:
this.$ = new Relacion("Relacion",$$[$0-2],$$[$0],Tipo.MENOR,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 89:
this.$ = new Relacion("Relacion",$$[$0-2],$$[$0],Tipo.MAYOR_IGUAL,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 90:
this.$ = new Relacion("Relacion",$$[$0-2],$$[$0],Tipo.MENOR_IGUAL,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 91:
this.$ = new Relacion("Relacion",$$[$0-2],$$[$0],Tipo.INCERTEZA,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 93:
this.$ = new Operacion("Operacion",$$[$0-2],$$[$0],Tipo.SUMA,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 94:
this.$ = new Operacion("Operacion",$$[$0-2],$$[$0],Tipo.RESTA,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 96:
this.$ = new Operacion("Operacion",$$[$0-2],$$[$0],Tipo.MULTIPLICACION,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 97:
this.$ = new Operacion("Operacion",$$[$0-2],$$[$0],Tipo.DIVISION,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 98:
this.$ = new Operacion("Operacion",$$[$0-2],$$[$0],Tipo.MODULO,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 99:
this.$ = new Operacion("Operacion",$$[$0-2],$$[$0],Tipo.POTENCIA,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 101:
this.$ = new Logica("Logica",$$[$0],null,Tipo.NOT,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 103:
this.$ = new Valor(Number($$[$0]),Tipo.DECIMAL,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 104:
this.$ = new Valor(Number($$[$0]),Tipo.ENTERO,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 105:
this.$ = new Valor(-1*Number($$[$0]),Tipo.DECIMAL,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 106:
this.$ = new Valor(-1*Number($$[$0]),Tipo.ENTERO,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 107:
this.$ = $$[$0-1];
break;
case 108:
this.$ = new Valor($$[$0],Tipo.CADENA,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 109:
this.$ = new Valor($$[$0],Tipo.CARACTER,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 110:
this.$ = new Valor(true,Tipo.BOOLEAN,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 111:
this.$ = new Valor(false,Tipo.BOOLEAN,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 112:
this.$ = new Valor($$[$0],Tipo.ID,Tipo.VALOR,yylineno,this._$.first_column);
break;
}
},
table: [{2:[1,5],3:1,4:2,5:[1,3],6:4,7:$V0,8:6,9:7,10:8,21:$V1,45:9,48:$V2,55:$V3,56:$V4,57:$V5,58:$V6,59:$V7},{1:[3]},{5:[1,17],6:18,7:$V0,8:6,9:7,10:8,21:$V1,45:9,48:$V2,55:$V3,56:$V4,57:$V5,58:$V6,59:$V7},{1:[2,2]},{7:[1,19]},o($V8,[2,5]),{7:[2,6]},{7:[2,7]},{7:[2,8]},{20:[1,20]},{20:[1,21],50:[1,22]},{13:[1,23]},{20:[2,75]},{20:[2,76]},{20:[2,77]},{20:[2,78]},{20:[2,79]},{1:[2,1]},{7:[1,24]},o($V8,[2,4]),{7:$V9,13:[1,26],54:$Va},{13:[1,27]},{13:[1,28]},{13:$Vb,14:29,20:$Vc,35:47,61:30,63:31,66:32,72:33,74:$Vd,75:34,80:35,81:$Ve,82:37,83:$Vf,84:$Vg,85:$Vh,86:$Vi,87:$Vj,88:$Vk},o($V8,[2,3]),{13:$Vb,14:48,20:$Vc,35:47,61:30,63:31,66:32,72:33,74:$Vd,75:34,80:35,81:$Ve,82:37,83:$Vf,84:$Vg,85:$Vh,86:$Vi,87:$Vj,88:$Vk},{15:[1,50],45:51,46:49,55:$V3,56:$V4,57:$V5,58:$V6,59:$V7},{15:[1,53],45:51,46:52,55:$V3,56:$V4,57:$V5,58:$V6,59:$V7},{15:[1,54]},{15:[1,55],60:$Vl},o($Vm,[2,81],{62:[1,57]}),o($Vn,[2,83],{64:[1,58],65:[1,59]}),o($Vo,[2,86],{67:[1,60],68:[1,61],69:[1,62],70:[1,63],71:[1,64]}),o($Vp,[2,92],{73:[1,65],74:[1,66]}),o($Vq,[2,95],{76:[1,67],77:[1,68],78:[1,69],79:$Vr}),o($Vs,[2,100]),{13:$Vb,20:$Vc,35:47,74:$Vd,80:71,81:$Ve,82:37,83:$Vf,84:$Vg,85:$Vh,86:$Vi,87:$Vj,88:$Vk},o($Vs,[2,102]),o($Vs,[2,103]),o($Vs,[2,104]),{83:[1,72],84:[1,73]},{13:$Vb,14:74,20:$Vc,35:47,61:30,63:31,66:32,72:33,74:$Vd,75:34,80:35,81:$Ve,82:37,83:$Vf,84:$Vg,85:$Vh,86:$Vi,87:$Vj,88:$Vk},o($Vs,[2,108]),o($Vs,[2,109]),o($Vs,[2,110]),o($Vs,[2,111]),o($Vs,[2,112],{13:$Vt}),o($Vs,[2,113]),o($Vu,[2,73],{60:$Vl}),{15:[1,76],53:$Vv},{24:[1,78]},{20:[1,79]},{15:[1,80],53:$Vv},{24:[1,81]},{24:[1,82]},{7:[2,13]},{13:$Vb,14:83,20:$Vc,35:47,61:30,63:31,66:32,72:33,74:$Vd,75:34,80:35,81:$Ve,82:37,83:$Vf,84:$Vg,85:$Vh,86:$Vi,87:$Vj,88:$Vk},{13:$Vb,20:$Vc,35:47,61:84,63:31,66:32,72:33,74:$Vd,75:34,80:35,81:$Ve,82:37,83:$Vf,84:$Vg,85:$Vh,86:$Vi,87:$Vj,88:$Vk},{13:$Vb,20:$Vc,35:47,63:85,66:32,72:33,74:$Vd,75:34,80:35,81:$Ve,82:37,83:$Vf,84:$Vg,85:$Vh,86:$Vi,87:$Vj,88:$Vk},{13:$Vb,20:$Vc,35:47,63:86,66:32,72:33,74:$Vd,75:34,80:35,81:$Ve,82:37,83:$Vf,84:$Vg,85:$Vh,86:$Vi,87:$Vj,88:$Vk},{13:$Vb,20:$Vc,35:47,66:87,72:33,74:$Vd,75:34,80:35,81:$Ve,82:37,83:$Vf,84:$Vg,85:$Vh,86:$Vi,87:$Vj,88:$Vk},{13:$Vb,20:$Vc,35:47,66:88,72:33,74:$Vd,75:34,80:35,81:$Ve,82:37,83:$Vf,84:$Vg,85:$Vh,86:$Vi,87:$Vj,88:$Vk},{13:$Vb,20:$Vc,35:47,66:89,72:33,74:$Vd,75:34,80:35,81:$Ve,82:37,83:$Vf,84:$Vg,85:$Vh,86:$Vi,87:$Vj,88:$Vk},{13:$Vb,20:$Vc,35:47,66:90,72:33,74:$Vd,75:34,80:35,81:$Ve,82:37,83:$Vf,84:$Vg,85:$Vh,86:$Vi,87:$Vj,88:$Vk},{13:$Vb,20:$Vc,35:47,66:91,72:33,74:$Vd,75:34,80:35,81:$Ve,82:37,83:$Vf,84:$Vg,85:$Vh,86:$Vi,87:$Vj,88:$Vk},{13:$Vb,20:$Vc,35:47,72:92,74:$Vd,75:34,80:35,81:$Ve,82:37,83:$Vf,84:$Vg,85:$Vh,86:$Vi,87:$Vj,88:$Vk},{13:$Vb,20:$Vc,35:47,72:93,74:$Vd,75:34,80:35,81:$Ve,82:37,83:$Vf,84:$Vg,85:$Vh,86:$Vi,87:$Vj,88:$Vk},{13:$Vb,20:$Vc,35:47,74:$Vd,75:94,80:35,81:$Ve,82:37,83:$Vf,84:$Vg,85:$Vh,86:$Vi,87:$Vj,88:$Vk},{13:$Vb,20:$Vc,35:47,74:$Vd,75:95,80:35,81:$Ve,82:37,83:$Vf,84:$Vg,85:$Vh,86:$Vi,87:$Vj,88:$Vk},{13:$Vb,20:$Vc,35:47,74:$Vd,75:96,80:35,81:$Ve,82:37,83:$Vf,84:$Vg,85:$Vh,86:$Vi,87:$Vj,88:$Vk},{13:$Vb,20:$Vc,35:47,74:$Vd,75:97,80:35,81:$Ve,82:37,83:$Vf,84:$Vg,85:$Vh,86:$Vi,87:$Vj,88:$Vk},o($Vs,[2,101]),o($Vs,[2,105]),o($Vs,[2,106]),{15:[1,98],60:$Vl},{13:$Vb,14:101,15:[1,100],20:$Vc,35:47,52:99,61:30,63:31,66:32,72:33,74:$Vd,75:34,80:35,81:$Ve,82:37,83:$Vf,84:$Vg,85:$Vh,86:$Vi,87:$Vj,88:$Vk},{24:[1,102]},{45:103,55:$V3,56:$V4,57:$V5,58:$V6,59:$V7},{7:[1,104]},o($Vw,[2,71]),{24:[1,105]},{7:[1,106]},{7:[1,107]},o($Vm,[2,80]),o($Vn,[2,82]),o($Vo,[2,84]),o($Vo,[2,85]),o($Vp,[2,87]),o($Vp,[2,88]),o($Vp,[2,89]),o($Vp,[2,90]),o($Vp,[2,91]),o($Vq,[2,93]),o($Vq,[2,94]),o($Vx,[2,96],{79:$Vr}),o($Vx,[2,97],{79:$Vr}),o($Vx,[2,98],{79:$Vr}),o($Vx,[2,99],{79:$Vr}),o($Vs,[2,107]),{15:[1,108],53:[1,109]},o($Vs,[2,67]),o($Vw,[2,69],{60:$Vl}),{7:[1,110]},{20:[1,111]},{32:$Vy,43:112},{7:[1,114]},{32:$Vy,43:115},{2:$Vz,7:$VA,8:117,10:120,11:122,12:$VB,16:123,17:$VC,18:121,19:$VD,20:$VE,21:$V1,22:126,23:$VF,26:125,27:$VG,34:118,35:119,38:124,39:$VH,44:116,45:128,55:$V3,56:$V4,57:$V5,58:$V6,59:$V7},o($Vs,[2,66]),{13:$Vb,14:136,20:$Vc,35:47,61:30,63:31,66:32,72:33,74:$Vd,75:34,80:35,81:$Ve,82:37,83:$Vf,84:$Vg,85:$Vh,86:$Vi,87:$Vj,88:$Vk},{32:$Vy,43:137},o($Vw,[2,70]),{32:[1,138]},{2:$Vz,7:$VA,8:117,10:120,11:122,12:$VB,16:123,17:$VC,18:121,19:$VD,20:$VE,21:$V1,22:126,23:$VF,26:125,27:$VG,34:118,35:119,38:124,39:$VH,44:139,45:128,55:$V3,56:$V4,57:$V5,58:$V6,59:$V7},{32:$Vy,43:140},{7:$VI,32:$VJ,49:141},{7:[2,61]},{7:[2,45]},{7:[2,46]},{7:[2,47]},{7:[2,48]},{7:[2,49]},{7:[2,50]},{7:[2,51]},{7:[2,52]},{7:[2,53]},{7:[2,54]},{7:[2,56]},{20:[1,143]},{13:$Vt,54:[1,144]},{13:[1,145]},{13:[1,146]},{13:[1,147]},{13:[1,148]},{13:[1,149]},{13:[1,150]},o($Vw,[2,68],{60:$Vl}),{32:[1,151]},{2:$Vz,7:$VA,8:117,10:120,11:122,12:$VB,16:123,17:$VC,18:121,19:$VD,20:$VE,21:$V1,22:126,23:$VF,26:125,27:$VG,34:118,35:119,38:124,39:$VH,44:153,45:128,47:152,51:$VK,55:$V3,56:$V4,57:$V5,58:$V6,59:$V7},{7:[1,155]},{7:$VI,32:$VJ,49:156},{7:[1,157]},{2:$Vz,7:$VA,8:117,10:120,11:122,12:$VB,16:123,17:$VC,18:121,19:$VD,20:$VE,21:$V1,22:126,23:$VF,26:125,27:$VG,34:118,35:119,38:124,39:$VH,44:153,45:128,51:[1,158],55:$V3,56:$V4,57:$V5,58:$V6,59:$V7},o($Vu,$V9,{54:$Va}),{13:$Vb,14:159,20:$Vc,35:47,61:30,63:31,66:32,72:33,74:$Vd,75:34,80:35,81:$Ve,82:37,83:$Vf,84:$Vg,85:$Vh,86:$Vi,87:$Vj,88:$Vk},{20:[1,160]},{13:$Vb,14:161,20:$Vc,35:47,61:30,63:31,66:32,72:33,74:$Vd,75:34,80:35,81:$Ve,82:37,83:$Vf,84:$Vg,85:$Vh,86:$Vi,87:$Vj,88:$Vk},{15:[1,162]},{13:$Vb,14:163,20:$Vc,35:47,61:30,63:31,66:32,72:33,74:$Vd,75:34,80:35,81:$Ve,82:37,83:$Vf,84:$Vg,85:$Vh,86:$Vi,87:$Vj,88:$Vk},{8:164,45:128,55:$V3,56:$V4,57:$V5,58:$V6,59:$V7},{13:$Vb,14:165,20:$Vc,35:47,61:30,63:31,66:32,72:33,74:$Vd,75:34,80:35,81:$Ve,82:37,83:$Vf,84:$Vg,85:$Vh,86:$Vi,87:$Vj,88:$Vk},{2:$Vz,7:$VA,8:117,10:120,11:122,12:$VB,16:123,17:$VC,18:121,19:$VD,20:$VE,21:$V1,22:126,23:$VF,26:125,27:$VG,34:118,35:119,38:124,39:$VH,44:153,45:128,47:166,51:$VK,55:$V3,56:$V4,57:$V5,58:$V6,59:$V7},{7:[1,167]},{7:[1,168]},{7:[2,63],13:$Vb,14:169,20:$Vc,35:47,61:30,63:31,66:32,72:33,74:$Vd,75:34,80:35,81:$Ve,82:37,83:$Vf,84:$Vg,85:$Vh,86:$Vi,87:$Vj,88:$Vk},o($VL,[2,44]),{7:[1,170]},{7:[2,60]},{7:[2,64]},{7:[2,72],60:$Vl},{15:[1,171]},{15:[1,172],60:$Vl},{7:[2,11]},{15:[1,173],60:$Vl},{28:[1,174]},{15:[1,175],60:$Vl},{7:[1,176]},{7:[2,59]},o($VL,[2,43]),{7:[2,62],60:$Vl},{7:[2,58]},{7:[2,12]},{7:[2,10]},{24:[1,177]},{13:$Vb,14:178,20:$Vc,35:47,61:30,63:31,66:32,72:33,74:$Vd,75:34,80:35,81:$Ve,82:37,83:$Vf,84:$Vg,85:$Vh,86:$Vi,87:$Vj,88:$Vk},{24:[1,179]},{7:[2,57]},{7:[1,180]},{28:[1,181],60:$Vl},{7:[1,182]},{32:$VM,40:183},{29:185,30:[1,186],31:[1,187]},{25:188,32:$VN},{7:[2,31],32:[1,190]},{32:[1,191]},{15:[1,192]},{15:[2,16]},{15:[2,17]},{7:[2,14],32:$VO},{32:[1,194]},{32:$VP,41:[1,195]},{2:$VQ,7:$VR,8:198,10:201,11:203,12:$VB,16:204,17:$VC,18:202,19:$VD,20:$VE,21:$V1,34:199,35:200,42:197,45:128,55:$V3,56:$V4,57:$V5,58:$V6,59:$V7},{24:[1,206]},{32:[1,207]},{7:$VS,8:209,10:214,11:216,12:$VB,16:217,17:$VC,18:215,19:$VD,20:$VE,21:$V1,33:208,34:210,35:211,36:$VT,37:$VU,45:128,55:$V3,56:$V4,57:$V5,58:$V6,59:$V7},{24:[1,218]},{2:$VQ,7:$VR,8:198,10:201,11:203,12:$VB,16:204,17:$VC,18:202,19:$VD,20:$VE,21:$V1,34:199,35:200,42:219,45:128,55:$V3,56:$V4,57:$V5,58:$V6,59:$V7},{7:[1,220]},{7:[2,34]},{7:[2,35]},{7:[2,36]},{7:[2,37]},{7:[2,38]},{7:[2,39]},{7:[2,40]},{7:[2,42]},{7:[1,221]},{7:$VS,8:209,10:214,11:216,12:$VB,16:217,17:$VC,18:215,19:$VD,20:$VE,21:$V1,33:222,34:210,35:211,36:$VT,37:$VU,45:128,55:$V3,56:$V4,57:$V5,58:$V6,59:$V7},{7:[1,223]},{7:[2,20]},{7:[2,21]},{7:[2,22]},{7:[2,23]},{7:[2,24]},{7:[2,25]},{7:[2,26]},{7:[2,27]},{7:[2,28]},{7:[1,224]},{7:[1,225]},o($VL,[2,33]),{25:226,32:$VN},{7:[1,227]},o($VL,[2,19]),{32:$VM,40:228},o($VL,[2,32]),{7:[2,15],32:$VO},o($VL,[2,18]),{7:[2,30],32:[1,229]},{32:$VP}],
defaultActions: {3:[2,2],6:[2,6],7:[2,7],8:[2,8],12:[2,75],13:[2,76],14:[2,77],15:[2,78],16:[2,79],17:[2,1],55:[2,13],116:[2,61],117:[2,45],118:[2,46],119:[2,47],120:[2,48],121:[2,49],122:[2,50],123:[2,51],124:[2,52],125:[2,53],126:[2,54],127:[2,56],157:[2,60],158:[2,64],162:[2,11],167:[2,59],170:[2,58],171:[2,12],172:[2,10],176:[2,57],186:[2,16],187:[2,17],198:[2,34],199:[2,35],200:[2,36],201:[2,37],202:[2,38],203:[2,39],204:[2,40],205:[2,42],209:[2,20],210:[2,21],211:[2,22],212:[2,23],213:[2,24],214:[2,25],215:[2,26],216:[2,27],217:[2,28]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	const Tipo = require('./clases/Tipo');
	const Tabla = require('./clases/Tabla');
	const Salida = require("./clases/Salida");
	const Valor = require('./clases/Valor');
	const Operacion = require('./clases/Operacion');
	const Relacion = require('./clases/Relacion');
	const Logica = require('./clases/Logica');
	const Declaracion = require('./clases/Declaracion');
	const Mostrar = require('./clases/Mostrar');
	const Asignacion = require('./clases/Asignacion');
	var tabla = new Tabla(null);
	var salida = new Salida();
	var operaciones = [];


/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:return 32;
break;
case 2:return 7;
break;
case 3:
break;
case 4:// Comentario de una linea
break;
case 5:// comentario multiple lÃ­neas
break;
case 6:return 'IMPORTAR';
break;
case 7:return 'INCERTEZA';
break;
case 8:return 56;
break;
case 9:return 57;
break;
case 10:return 59;
break;
case 11:return 55;
break;
case 12:return 58;
break;
case 13:return 48;
break;
case 14:return 87;
break;
case 15:return 88;
break;
case 16:return 51;
break;
case 17:return 50;
break;
case 18:return 39;
break;
case 19:return 41;
break;
case 20:return 27;
break;
case 21:return 23;
break;
case 22:return 36;
break;
case 23:return 37;
break;
case 24:return 21;
break;
case 25:return 19;
break;
case 26:return 12;
break;
case 27:return 17;
break;
case 28:return 53;
break;
case 29:return 24;
break;
case 30:return 28;
break;
case 31:return 'LLAVIZQ';
break;
case 32:return 'LLAVDER';
break;
case 33:return 13;
break;
case 34:return 15;
break;
case 35:return 30;
break;
case 36:return 31;
break;
case 37:return 73;
break;
case 38:return 74;
break;
case 39:return 76;
break;
case 40:return 77;
break;
case 41:return 78;
break;
case 42:return 79;
break;
case 43:return 70;
break;
case 44:return 69;
break;
case 45:return 64;
break;
case 46:return 65;
break;
case 47:return 68;
break;
case 48:return 67;
break;
case 49:return 54;
break;
case 50:return 71;
break;
case 51:return 62
break;
case 52:return 60;
break;
case 53:return 'XOR';
break;
case 54:return 81;
break;
case 55:return 86;
break;
case 56:return 83;
break;
case 57:return 84;
break;
case 58:return 85;
break;
case 59:return 20;
break;
case 60:return 5;
break;
case 61: console.error('Este es un error lÃ©xico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:[ ]+)/,/^(?:[	])/,/^(?:\n)/,/^(?:[\r]+)/,/^(?:!!.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:Importar\b)/,/^(?:Incerteza\b)/,/^(?:Double\b)/,/^(?:Boolean\b)/,/^(?:String\b)/,/^(?:Int\b)/,/^(?:Char\b)/,/^(?:Void\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:Retorno\b)/,/^(?:Principal\b)/,/^(?:Si\b)/,/^(?:Sino\b)/,/^(?:Para\b)/,/^(?:Mientras\b)/,/^(?:Detener\b)/,/^(?:Continuar\b)/,/^(?:Mostrar\b)/,/^(?:DibujarAST\b)/,/^(?:DibujarEXP\b)/,/^(?:DibujarTS\b)/,/^(?:,)/,/^(?::)/,/^(?:;)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\^)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:!=)/,/^(?:<)/,/^(?:>)/,/^(?:=)/,/^(?:~)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!&)/,/^(?:!)/,/^(?:'([^']|\\n|\\r|\\t)')/,/^(?:[0-9]+\.[0-9]+\b)/,/^(?:[0-9]+\b)/,/^(?:([\"](\\"|[^"])*[^\\][\"])|[\"][\"])/,/^(?:([a-zA-Z"_"])[a-z0-9A-Z"_""Ã±""Ã"]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}