/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,17],$V1=[1,25],$V2=[1,26],$V3=[1,24],$V4=[1,18],$V5=[1,23],$V6=[1,22],$V7=[1,21],$V8=[1,32],$V9=[1,19],$Va=[1,27],$Vb=[1,28],$Vc=[1,29],$Vd=[1,30],$Ve=[1,31],$Vf=[5,7,19,23,24,25,26,27,30,41,50,56,57,58,59,60],$Vg=[2,80],$Vh=[1,51],$Vi=[1,65],$Vj=[1,70],$Vk=[1,64],$Vl=[1,60],$Vm=[1,62],$Vn=[1,63],$Vo=[1,66],$Vp=[1,67],$Vq=[1,68],$Vr=[1,69],$Vs=[1,89],$Vt=[7,22,31,54,61],$Vu=[7,22,31,54,61,63],$Vv=[7,22,31,54,61,63,65,66],$Vw=[7,22,31,54,61,63,65,66,68,69,70,71,72],$Vx=[7,22,31,54,61,63,65,66,68,69,70,71,72,74,75],$Vy=[1,103],$Vz=[7,22,31,54,61,63,65,66,68,69,70,71,72,74,75,77,78,79,80],$VA=[22,54],$VB=[7,31],$VC=[1,122],$VD=[1,147],$VE=[1,146],$VF=[7,22,31,54,61,63,65,66,68,69,70,71,72,74,75,77,78,79],$VG=[1,157],$VH=[2,53],$VI=[7,35,43],$VJ=[1,172],$VK=[2,64],$VL=[1,184],$VM=[1,192],$VN=[1,191],$VO=[1,195],$VP=[1,201],$VQ=[2,38],$VR=[1,206],$VS=[1,207],$VT=[7,35];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion":6,"SALTO":7,"declaracion":8,"asignacion":9,"funcion":10,"llamada":11,"sentencia_si":12,"para":13,"mientras":14,"mostrar":15,"dibujar_AST":16,"dibujar_EXP":17,"dibujar_TS":18,"DIBUJAREXP":19,"PARIZQ":20,"expresion":21,"PARDER":22,"DIBUJARTS":23,"DIBUJARAST":24,"ID":25,"MOSTRAR":26,"MIENTRAS":27,"DOSPTS":28,"instrucciones_para":29,"PARA":30,"PTCOMA":31,"aumentar":32,"INCREMENTO":33,"DECREMENTO":34,"TAB":35,"instruccion_para":36,"DETENER":37,"CONTINUAR":38,"si":39,"sino":40,"SI":41,"instrucciones_if":42,"SINO":43,"instruccion_if":44,"instrucciones_funcion":45,"instruccion_funcion":46,"retorno":47,"tipo":48,"parametros":49,"VOID":50,"PRINCIPAL":51,"RETORNO":52,"lista_valores":53,"COMA":54,"IGUAL":55,"INT":56,"DOUBLE":57,"BOOLEAN":58,"CHAR":59,"STRING":60,"OR":61,"expresion_1":62,"AND":63,"expresion_relacional":64,"DOBLE_IGUAL":65,"DIFERENTE":66,"expresion_relacional_1":67,"MAYOR":68,"MENOR":69,"MAYOR_IGUAL":70,"MENOR_IGUAL":71,"INCERT":72,"expresion_aritmetica":73,"MAS":74,"MENOS":75,"expresion_aritmetica_1":76,"POR":77,"DIVIDIDO":78,"MODULO":79,"POTENCIA":80,"expresion_not":81,"NOT":82,"valores":83,"DECIMAL":84,"ENTERO":85,"CADENA":86,"CARACTER":87,"TRUE":88,"FALSE":89,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"SALTO",19:"DIBUJAREXP",20:"PARIZQ",22:"PARDER",23:"DIBUJARTS",24:"DIBUJARAST",25:"ID",26:"MOSTRAR",27:"MIENTRAS",28:"DOSPTS",30:"PARA",31:"PTCOMA",33:"INCREMENTO",34:"DECREMENTO",35:"TAB",37:"DETENER",38:"CONTINUAR",41:"SI",43:"SINO",50:"VOID",51:"PRINCIPAL",52:"RETORNO",54:"COMA",55:"IGUAL",56:"INT",57:"DOUBLE",58:"BOOLEAN",59:"CHAR",60:"STRING",61:"OR",63:"AND",65:"DOBLE_IGUAL",66:"DIFERENTE",68:"MAYOR",69:"MENOR",70:"MAYOR_IGUAL",71:"MENOR_IGUAL",72:"INCERT",74:"MAS",75:"MENOS",77:"POR",78:"DIVIDIDO",79:"MODULO",80:"POTENCIA",82:"NOT",84:"DECIMAL",85:"ENTERO",86:"CADENA",87:"CARACTER",88:"TRUE",89:"FALSE"},
productions_: [0,[3,2],[3,1],[4,3],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,0],[17,4],[18,3],[16,4],[15,4],[14,7],[13,11],[32,1],[32,1],[29,4],[29,3],[29,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,0],[12,2],[12,1],[39,7],[40,4],[42,4],[42,3],[42,1],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[44,0],[45,4],[45,3],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,0],[10,8],[10,8],[10,7],[10,7],[10,7],[47,2],[47,1],[11,4],[11,3],[53,3],[53,1],[49,4],[49,2],[9,3],[8,4],[8,2],[48,1],[48,1],[48,1],[48,1],[48,1],[21,3],[21,1],[62,3],[62,1],[64,3],[64,3],[64,1],[67,3],[67,3],[67,3],[67,3],[67,3],[67,1],[73,3],[73,3],[73,1],[76,3],[76,3],[76,3],[76,3],[76,1],[81,2],[81,1],[83,1],[83,1],[83,2],[83,2],[83,3],[83,1],[83,1],[83,1],[83,1],[83,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 5: case 28: case 45:
console.error('Este es un error sint√°ctico: ' + yytext + ', en la linea: ' + (this._$.first_line) + ', en la columna: ' + this._$.first_column)
break;
case 92: case 98: case 101: case 106: case 108:
this.$ = $$[$0];
break;
}
},
table: [{2:[1,5],3:1,4:2,5:[1,3],6:4,7:$V0,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,23:$V2,24:$V3,25:$V4,26:$V5,27:$V6,30:$V7,39:20,41:$V8,48:17,50:$V9,56:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve},{1:[3]},{5:[1,33],6:34,7:$V0,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,23:$V2,24:$V3,25:$V4,26:$V5,27:$V6,30:$V7,39:20,41:$V8,48:17,50:$V9,56:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve},{1:[2,2]},{7:[1,35]},o($Vf,[2,5]),{7:[2,6]},{7:[2,7]},{7:[2,8]},{7:[2,9]},{7:[2,10]},{7:[2,11]},{7:[2,12]},{7:[2,13]},{7:[2,14]},{7:[2,15]},{7:[2,16]},{25:[1,36]},{20:[1,38],55:[1,37]},{25:[1,39],51:[1,40]},{7:[2,40],40:41,43:[1,42]},{20:[1,43]},{20:[1,44]},{20:[1,45]},{20:[1,46]},{20:[1,47]},{20:[1,48]},{25:[2,81]},{25:[2,82]},{25:[2,83]},{25:[2,84]},{25:[2,85]},{20:[1,49]},{1:[2,1]},{7:[1,50]},o($Vf,[2,4]),{7:$Vg,20:[1,52],55:$Vh},{20:$Vi,21:53,25:$Vj,62:54,64:55,67:56,73:57,75:$Vk,76:58,81:59,82:$Vl,83:61,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr},{20:$Vi,21:73,22:[1,72],25:$Vj,53:71,62:54,64:55,67:56,73:57,75:$Vk,76:58,81:59,82:$Vl,83:61,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr},{20:[1,74]},{20:[1,75]},{7:[2,39]},{28:[1,76]},{8:77,48:78,56:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve},{20:$Vi,21:79,25:$Vj,62:54,64:55,67:56,73:57,75:$Vk,76:58,81:59,82:$Vl,83:61,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr},{20:$Vi,21:80,25:$Vj,62:54,64:55,67:56,73:57,75:$Vk,76:58,81:59,82:$Vl,83:61,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr},{25:[1,81]},{20:$Vi,21:82,25:$Vj,62:54,64:55,67:56,73:57,75:$Vk,76:58,81:59,82:$Vl,83:61,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr},{22:[1,83]},{20:$Vi,21:84,25:$Vj,62:54,64:55,67:56,73:57,75:$Vk,76:58,81:59,82:$Vl,83:61,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr},o($Vf,[2,3]),{20:$Vi,21:85,25:$Vj,62:54,64:55,67:56,73:57,75:$Vk,76:58,81:59,82:$Vl,83:61,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr},{22:[1,87],48:88,49:86,56:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve},{7:[2,78],61:$Vs},o($Vt,[2,87],{63:[1,90]}),o($Vu,[2,89],{65:[1,91],66:[1,92]}),o($Vv,[2,92],{68:[1,93],69:[1,94],70:[1,95],71:[1,96],72:[1,97]}),o($Vw,[2,98],{74:[1,98],75:[1,99]}),o($Vx,[2,101],{77:[1,100],78:[1,101],79:[1,102],80:$Vy}),o($Vz,[2,106]),{20:$Vi,25:$Vj,75:$Vk,81:104,82:$Vl,83:61,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr},o($Vz,[2,108]),o($Vz,[2,109]),o($Vz,[2,110]),{84:[1,105],85:[1,106]},{20:$Vi,21:107,25:$Vj,62:54,64:55,67:56,73:57,75:$Vk,76:58,81:59,82:$Vl,83:61,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr},o($Vz,[2,114]),o($Vz,[2,115]),o($Vz,[2,116]),o($Vz,[2,117]),o($Vz,[2,118]),{22:[1,108],54:[1,109]},{7:[2,73]},o($VA,[2,75],{61:$Vs}),{22:[1,111],48:88,49:110,56:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve},{22:[1,112]},{7:[1,113]},{31:[1,114]},{25:[1,115]},{22:[1,116],61:$Vs},{22:[1,117],61:$Vs},{22:[1,118]},{22:[1,119],61:$Vs},{7:[2,19]},{22:[1,120],61:$Vs},o($VB,[2,79],{61:$Vs}),{22:[1,121],54:$VC},{28:[1,123]},{25:[1,124]},{20:$Vi,21:125,25:$Vj,62:54,64:55,67:56,73:57,75:$Vk,76:58,81:59,82:$Vl,83:61,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr},{20:$Vi,25:$Vj,62:126,64:55,67:56,73:57,75:$Vk,76:58,81:59,82:$Vl,83:61,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr},{20:$Vi,25:$Vj,64:127,67:56,73:57,75:$Vk,76:58,81:59,82:$Vl,83:61,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr},{20:$Vi,25:$Vj,64:128,67:56,73:57,75:$Vk,76:58,81:59,82:$Vl,83:61,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr},{20:$Vi,25:$Vj,67:129,73:57,75:$Vk,76:58,81:59,82:$Vl,83:61,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr},{20:$Vi,25:$Vj,67:130,73:57,75:$Vk,76:58,81:59,82:$Vl,83:61,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr},{20:$Vi,25:$Vj,67:131,73:57,75:$Vk,76:58,81:59,82:$Vl,83:61,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr},{20:$Vi,25:$Vj,67:132,73:57,75:$Vk,76:58,81:59,82:$Vl,83:61,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr},{20:$Vi,25:$Vj,67:133,73:57,75:$Vk,76:58,81:59,82:$Vl,83:61,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr},{20:$Vi,25:$Vj,73:134,75:$Vk,76:58,81:59,82:$Vl,83:61,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr},{20:$Vi,25:$Vj,73:135,75:$Vk,76:58,81:59,82:$Vl,83:61,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr},{20:$Vi,25:$Vj,75:$Vk,76:136,81:59,82:$Vl,83:61,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr},{20:$Vi,25:$Vj,75:$Vk,76:137,81:59,82:$Vl,83:61,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr},{20:$Vi,25:$Vj,75:$Vk,76:138,81:59,82:$Vl,83:61,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr},{20:$Vi,25:$Vj,75:$Vk,76:139,81:59,82:$Vl,83:61,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr},o($Vz,[2,107]),o($Vz,[2,111]),o($Vz,[2,112]),{22:[1,140],61:$Vs},{7:[2,72]},{20:$Vi,21:141,25:$Vj,62:54,64:55,67:56,73:57,75:$Vk,76:58,81:59,82:$Vl,83:61,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr},{22:[1,142],54:$VC},{28:[1,143]},{28:[1,144]},{2:$VD,35:$VE,42:145},{20:$Vi,21:148,25:$Vj,62:54,64:55,67:56,73:57,75:$Vk,76:58,81:59,82:$Vl,83:61,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr},o($VB,$Vg,{55:$Vh}),{28:[1,149]},{7:[2,21]},{7:[2,20]},{7:[2,18]},{28:[1,150]},{28:[1,151]},{48:152,56:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve},{7:[1,153]},o($VA,[2,77]),o($Vt,[2,86]),o($Vu,[2,88]),o($Vv,[2,90]),o($Vv,[2,91]),o($Vw,[2,93]),o($Vw,[2,94]),o($Vw,[2,95]),o($Vw,[2,96]),o($Vw,[2,97]),o($Vx,[2,99]),o($Vx,[2,100]),o($VF,[2,102],{80:$Vy}),o($VF,[2,103],{80:$Vy}),o($VF,[2,104],{80:$Vy}),o($VF,[2,105],{80:$Vy}),o($Vz,[2,113]),o($VA,[2,74],{61:$Vs}),{28:[1,154]},{7:[1,155]},{7:[1,156]},{7:[2,42],35:$VG},{7:$VH,8:159,9:160,11:161,15:162,16:163,17:164,18:165,19:$V1,23:$V2,24:$V3,25:$V4,26:$V5,44:158,48:78,56:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve},o($VI,[2,45]),{31:[1,166],61:$Vs},{7:[1,167]},{7:[1,168]},{7:[1,169]},{25:[1,170]},{35:$VJ,45:171},{7:[1,173]},{35:$VJ,45:174},{7:$VK,8:176,9:177,11:178,15:180,16:181,17:182,18:183,19:$V1,23:$V2,24:$V3,25:$V4,26:$V5,46:175,47:179,48:78,52:$VL,56:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve},{7:$VH,8:159,9:160,11:161,15:162,16:163,17:164,18:165,19:$V1,23:$V2,24:$V3,25:$V4,26:$V5,44:185,48:78,56:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve},{7:[1,186]},{7:[2,46]},{7:[2,47]},{7:[2,48]},{7:[2,49]},{7:[2,50]},{7:[2,51]},{7:[2,52]},{32:187,33:[1,188],34:[1,189]},{2:$VM,29:190,35:$VN},{2:$VD,35:$VE,42:193},{35:$VJ,45:194},o($VA,[2,76]),{7:[2,67],35:$VO},{7:$VK,8:176,9:177,11:178,15:180,16:181,17:182,18:183,19:$V1,23:$V2,24:$V3,25:$V4,26:$V5,46:196,47:179,48:78,52:$VL,56:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve},{35:$VJ,45:197},{7:[2,68],35:$VO},{7:[2,69]},{7:[2,56]},{7:[2,57]},{7:[2,58]},{7:[2,59]},{7:[2,60]},{7:[2,61]},{7:[2,62]},{7:[2,63]},{7:[2,71],20:$Vi,21:198,25:$Vj,62:54,64:55,67:56,73:57,75:$Vk,76:58,81:59,82:$Vl,83:61,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr},{7:[1,199]},o($VI,[2,44]),{22:[1,200]},{22:[2,24]},{22:[2,25]},{7:[2,22],35:$VP},{7:$VQ,8:203,9:204,11:205,15:208,16:209,17:210,18:211,19:$V1,23:$V2,24:$V3,25:$V4,26:$V5,36:202,37:$VR,38:$VS,48:78,56:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve},o($VT,[2,28]),o([7,43],[2,41],{35:$VG}),{7:[2,65],35:$VO},{7:$VK,8:176,9:177,11:178,15:180,16:181,17:182,18:183,19:$V1,23:$V2,24:$V3,25:$V4,26:$V5,46:212,47:179,48:78,52:$VL,56:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve},{7:[1,213]},{7:[2,66],35:$VO},{7:[2,70],61:$Vs},o($VI,[2,43]),{28:[1,214]},{7:$VQ,8:203,9:204,11:205,15:208,16:209,17:210,18:211,19:$V1,23:$V2,24:$V3,25:$V4,26:$V5,36:215,37:$VR,38:$VS,48:78,56:$Va,57:$Vb,58:$Vc,59:$Vd,60:$Ve},{7:[1,216]},{7:[2,29]},{7:[2,30]},{7:[2,31]},{7:[2,32]},{7:[2,33]},{7:[2,34]},{7:[2,35]},{7:[2,36]},{7:[2,37]},{7:[1,217]},o($VT,[2,55]),{7:[1,218]},{7:[1,219]},o($VT,[2,27]),o($VT,[2,54]),{2:$VM,29:220,35:$VN},o($VT,[2,26]),{7:[2,23],35:$VP}],
defaultActions: {3:[2,2],6:[2,6],7:[2,7],8:[2,8],9:[2,9],10:[2,10],11:[2,11],12:[2,12],13:[2,13],14:[2,14],15:[2,15],16:[2,16],27:[2,81],28:[2,82],29:[2,83],30:[2,84],31:[2,85],33:[2,1],41:[2,39],72:[2,73],83:[2,19],108:[2,72],117:[2,21],118:[2,20],119:[2,18],159:[2,46],160:[2,47],161:[2,48],162:[2,49],163:[2,50],164:[2,51],165:[2,52],175:[2,69],176:[2,56],177:[2,57],178:[2,58],179:[2,59],180:[2,60],181:[2,61],182:[2,62],183:[2,63],188:[2,24],189:[2,25],203:[2,29],204:[2,30],205:[2,31],206:[2,32],207:[2,33],208:[2,34],209:[2,35],210:[2,36],211:[2,37]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};


/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:return 35;
break;
case 2:return 7;
break;
case 3:
break;
case 4:// Comentario de una linea
break;
case 5:// comentario multiple l√≠neas
break;
case 6:return 'IMPORTAR';
break;
case 7:return 'INCERTEZA';
break;
case 8:return 57;
break;
case 9:return 58;
break;
case 10:return 60;
break;
case 11:return 56;
break;
case 12:return 59;
break;
case 13:return 50;
break;
case 14:return 88;
break;
case 15:return 89;
break;
case 16:return 52;
break;
case 17:return 51;
break;
case 18:return 41;
break;
case 19:return 43;
break;
case 20:return 30;
break;
case 21:return 27;
break;
case 22:return 37;
break;
case 23:return 38;
break;
case 24:return 26;
break;
case 25:return 24;
break;
case 26:return 19;
break;
case 27:return 23;
break;
case 28:return 54;
break;
case 29:return 28;
break;
case 30:return 31;
break;
case 31:return 'LLAVIZQ';
break;
case 32:return 'LLAVDER';
break;
case 33:return 20;
break;
case 34:return 22;
break;
case 35:return 33;
break;
case 36:return 34;
break;
case 37:return 74;
break;
case 38:return 75;
break;
case 39:return 77;
break;
case 40:return 78;
break;
case 41:return 79;
break;
case 42:return 80;
break;
case 43:return 71;
break;
case 44:return 70;
break;
case 45:return 65;
break;
case 46:return 66;
break;
case 47:return 69;
break;
case 48:return 68;
break;
case 49:return 55;
break;
case 50:return 72;
break;
case 51:return 63
break;
case 52:return 61;
break;
case 53:return 'XOR';
break;
case 54:return 82;
break;
case 55:return 87;
break;
case 56:return 84;
break;
case 57:return 85;
break;
case 58:return 86;
break;
case 59:return 25;
break;
case 60:return 5;
break;
case 61: console.error('Este es un error l√©xico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:[ ]+)/,/^(?:[	])/,/^(?:\n)/,/^(?:[\r]+)/,/^(?:!!.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:Importar\b)/,/^(?:Incerteza\b)/,/^(?:Double\b)/,/^(?:Boolean\b)/,/^(?:String\b)/,/^(?:Int\b)/,/^(?:Char\b)/,/^(?:Void\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:Retorno\b)/,/^(?:Principal\b)/,/^(?:Si\b)/,/^(?:Sino\b)/,/^(?:Para\b)/,/^(?:Mientras\b)/,/^(?:Detener\b)/,/^(?:Continuar\b)/,/^(?:Mostrar\b)/,/^(?:DibujarAST\b)/,/^(?:DibujarEXP\b)/,/^(?:DibujarTS\b)/,/^(?:,)/,/^(?::)/,/^(?:;)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\^)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:!=)/,/^(?:<)/,/^(?:>)/,/^(?:=)/,/^(?:~)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!&)/,/^(?:!)/,/^(?:'([^']|\\n|\\r|\\t)')/,/^(?:[0-9]+\.[0-9]+\b)/,/^(?:[0-9]+\b)/,/^(?:([\"](\\"|[^"])*[^\\][\"])|[\"][\"])/,/^(?:([a-zA-Z"_"])[a-z0-9A-Z"_""√±""√ë"]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}