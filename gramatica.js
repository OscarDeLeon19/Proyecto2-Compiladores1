/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,9],$V1=[1,8],$V2=[1,10],$V3=[1,11],$V4=[1,12],$V5=[1,13],$V6=[1,14],$V7=[5,7,10,57,58,59,60,61],$V8=[2,86],$V9=[1,24],$Va=[1,42],$Vb=[1,47],$Vc=[1,41],$Vd=[1,37],$Ve=[1,39],$Vf=[1,40],$Vg=[1,43],$Vh=[1,44],$Vi=[1,45],$Vj=[1,46],$Vk=[1,53],$Vl=[7,31],$Vm=[1,56],$Vn=[7,13,31,55,62],$Vo=[7,13,31,55,62,64],$Vp=[7,13,31,55,62,64,66,67],$Vq=[7,13,31,55,62,64,66,67,69,70,71,72,73],$Vr=[7,13,31,55,62,64,66,67,69,70,71,72,73,75,76],$Vs=[1,70],$Vt=[7,13,31,55,62,64,66,67,69,70,71,72,73,75,76,78,79,80,81],$Vu=[1,75],$Vv=[13,55],$Vw=[1,105],$Vx=[1,104],$Vy=[7,13,31,55,62,64,66,67,69,70,71,72,73,75,76,78,79,80],$Vz=[1,124],$VA=[2,72],$VB=[1,131],$VC=[1,132],$VD=[1,130],$VE=[1,126],$VF=[1,127],$VG=[1,129],$VH=[1,128],$VI=[7,35],$VJ=[2,77],$VK=[1,135],$VL=[1,139],$VM=[1,195],$VN=[2,43],$VO=[2,30],$VP=[1,217],$VQ=[1,218],$VR=[1,232],$VS=[2,54];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion":6,"SALTO":7,"declaracion":8,"funcion":9,"VOID":10,"PRINCIPAL":11,"PARIZQ":12,"PARDER":13,"DOSPTS":14,"instrucciones_funcion":15,"dibujar_EXP":16,"DIBUJAREXP":17,"expresion":18,"dibujar_TS":19,"DIBUJARTS":20,"dibujar_AST":21,"DIBUJARAST":22,"ID":23,"mostrar":24,"MOSTRAR":25,"mientras":26,"MIENTRAS":27,"instrucciones_para":28,"para":29,"PARA":30,"PTCOMA":31,"aumentar":32,"INCREMENTO":33,"DECREMENTO":34,"TAB":35,"instruccion_para":36,"asignacion":37,"llamada":38,"DETENER":39,"CONTINUAR":40,"si":41,"SI":42,"instrucciones_if":43,"SINO":44,"instrucciones_else":45,"instruccion_if":46,"instruccion_else":47,"tipo":48,"parametros":49,"retorno_metodo":50,"retorno":51,"instruccion_funcion":52,"RETORNO":53,"lista_valores":54,"COMA":55,"IGUAL":56,"INT":57,"DOUBLE":58,"BOOLEAN":59,"CHAR":60,"STRING":61,"OR":62,"expresion_1":63,"AND":64,"expresion_relacional":65,"DOBLE_IGUAL":66,"DIFERENTE":67,"expresion_relacional_1":68,"MAYOR":69,"MENOR":70,"MAYOR_IGUAL":71,"MENOR_IGUAL":72,"INCERT":73,"expresion_aritmetica":74,"MAS":75,"MENOS":76,"expresion_aritmetica_1":77,"POR":78,"DIVIDIDO":79,"MODULO":80,"POTENCIA":81,"expresion_not":82,"NOT":83,"valores":84,"DECIMAL":85,"ENTERO":86,"CADENA":87,"CARACTER":88,"TRUE":89,"FALSE":90,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"SALTO",10:"VOID",11:"PRINCIPAL",12:"PARIZQ",13:"PARDER",14:"DOSPTS",17:"DIBUJAREXP",20:"DIBUJARTS",22:"DIBUJARAST",23:"ID",25:"MOSTRAR",27:"MIENTRAS",30:"PARA",31:"PTCOMA",33:"INCREMENTO",34:"DECREMENTO",35:"TAB",39:"DETENER",40:"CONTINUAR",42:"SI",44:"SINO",53:"RETORNO",55:"COMA",56:"IGUAL",57:"INT",58:"DOUBLE",59:"BOOLEAN",60:"CHAR",61:"STRING",62:"OR",64:"AND",66:"DOBLE_IGUAL",67:"DIFERENTE",69:"MAYOR",70:"MENOR",71:"MAYOR_IGUAL",72:"MENOR_IGUAL",73:"INCERT",75:"MAS",76:"MENOS",78:"POR",79:"DIVIDIDO",80:"MODULO",81:"POTENCIA",83:"NOT",85:"DECIMAL",86:"ENTERO",87:"CADENA",88:"CARACTER",89:"TRUE",90:"FALSE"},
productions_: [0,[3,2],[3,1],[4,3],[4,2],[4,1],[6,1],[6,1],[6,7],[6,0],[16,4],[19,3],[21,4],[24,4],[26,7],[29,11],[32,1],[32,1],[28,5],[28,4],[28,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,0],[41,12],[41,7],[43,5],[43,4],[43,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,0],[46,1],[45,5],[45,4],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,0],[47,1],[9,10],[9,10],[9,9],[9,9],[15,4],[15,3],[15,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,0],[52,1],[50,3],[50,2],[51,2],[51,0],[38,4],[38,3],[54,3],[54,1],[49,4],[49,2],[37,3],[8,4],[8,2],[48,1],[48,1],[48,1],[48,1],[48,1],[18,3],[18,1],[63,3],[63,1],[65,3],[65,3],[65,1],[68,3],[68,3],[68,3],[68,3],[68,3],[68,1],[74,3],[74,3],[74,1],[77,3],[77,3],[77,3],[77,3],[77,1],[82,2],[82,1],[84,1],[84,1],[84,2],[84,2],[84,3],[84,1],[84,1],[84,1],[84,1],[84,1],[84,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

	
		var nuevaTabla = new Tabla(tabla);
		
		for(var i = 0; i< $$[$0-1].length; i++){
            if($$[$0-1][i]){
                $$[$0-1][i].operar(tabla, salida);
			}	
        }
		var funcionPrincipal = tabla.obtenerFuncion('Principal',0);
		if (funcionPrincipal != null){
			funcionPrincipal.operar(nuevaTabla, salida);		
		} else {
			console.log("error");
		}
		
		return salida;
		
	
break;
case 3:
this.$ = operaciones; if($$[$0-1] != null){operaciones.push($$[$0-1])};
break;
case 4:
if($$[$0-1] != null){operaciones.push($$[$0-1])};
break;
case 5: case 44: case 55: case 73:
console.error('Este es un error sintÃ¡ctico: ' + yytext + ', en la linea: ' + (yylineno) + ', en la columna: ' + this._$.first_column)
break;
case 6:
if ($$[$0]!=null){this.$ = $$[$0]}
break;
case 7:
 this.$ = null;
break;
case 8:
this.$ = null; tabla.agregarFuncion(new Funcion("Funcion","Principal",null,operaciones_funcion,null,Tipo.VOID,Tipo.VALOR,yylineno,this._$.first_column)); operaciones_funcion = [];
break;
case 9: case 24: case 25: case 27: case 28: case 29: case 30: case 40: case 41: case 42: case 43: case 51: case 52: case 53: case 54: case 69: case 70: case 71: case 72:
this.$ = null
break;
case 13:
this.$ = new Mostrar("Mostrar",$$[$0-1],Tipo.VALOR,yylineno,this._$.first_column);
break;
case 15:
this.$ = new Para("Para",$$[$0-8],$$[$0-6],$$[$0-4],operaciones_ciclo,operaciones_ciclo.length,yylineno,this._$.first_column); operaciones_ciclo = [];
break;
case 16:
this.$ = new Iteracion("Iteracion",Tipo.INCREMENTO,yylineno,this._$.first_column);
break;
case 17:
this.$ = new Iteracion("Iteracion",Tipo.DECREMENTO,yylineno,this._$.first_column);
break;
case 21:
if ($$[$0]!=null){operaciones_ciclo.push($$[$0]);}
break;
case 22: case 23: case 26:
operaciones_ciclo.push($$[$0]);
break;
case 31:
this.$ = new Si("Si",$$[$0-9],Tipo.SI,operaciones_si,operaciones_si.length,operaciones_else,operaciones_else.length,yylineno,this._$.first_column); console.log(operaciones_si.length);operaciones_si = []; operaciones_else = [];
break;
case 32:
this.$ = new Si("Si",$$[$0-4],Tipo.SI,operaciones_si,operaciones_si.length,null,0,yylineno,this._$.first_column); operaciones_si = [];
break;
case 36:
if ($$[$0]!=null){operaciones_si.push($$[$0]);}
break;
case 37: case 38: case 39:
operaciones_si.push($$[$0]);
break;
case 47:
if ($$[$0]!=null){operaciones_else.push($$[$0]);}
break;
case 48: case 49: case 50:
operaciones_else.push($$[$0]);
break;
case 56:
this.$ = null; tabla.agregarFuncion(new Funcion("Funcion",$$[$0-8],parametros_metodo,operaciones_funcion,$$[$0-1],$$[$0-9],Tipo.VALOR,yylineno,this._$.first_column)); operaciones_funcion = []; parametros_metodo = []; 
break;
case 57:
this.$ = null; tabla.agregarFuncion(new Funcion("Funcion",$$[$0-8],parametros_metodo,operaciones_funcion,$$[$0-1],Tipo.VOID,Tipo.VALOR,yylineno,this._$.first_column)); operaciones_funcion = []; parametros_metodo = [];
break;
case 58:
this.$ = null; tabla.agregarFuncion(new Funcion("Funcion",$$[$0-7],null,operaciones_funcion,$$[$0-1],$$[$0-8],Tipo.VALOR,yylineno,this._$.first_column)); operaciones_funcion = [];
break;
case 59:
this.$ = null; tabla.agregarFuncion(new Funcion("Funcion",$$[$0-7],null,operaciones_funcion,$$[$0-1],Tipo.VOID,Tipo.VALOR,yylineno,this._$.first_column)); operaciones_funcion = []; 
break;
case 63:
if ($$[$0]!=null){operaciones_funcion.push($$[$0]);}
break;
case 64: case 65: case 66: case 67: case 68:
operaciones_funcion.push($$[$0]);
break;
case 74:
this.$ = new Retorno("Retorno",$$[$0], yylineno,this._$.first_column);
break;
case 75: case 76: case 77:
this.$ = new Retorno("Retorno",null, yylineno,this._$.first_column);
break;
case 78:
this.$ = new Llamada("Llamada",$$[$0-3],valores_llamada,Tipo.LLAMADA,Tipo.VALOR,yylineno,this._$.first_column); valores_llamada = []
break;
case 79:
this.$ = new Llamada("Llamada",$$[$0-2],null,Tipo.LLAMADA,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 80: case 81:
valores_llamada.push($$[$0]);
break;
case 82:
this.$ = parametros_metodo; parametros_metodo.push(new Declaracion("Declaracion",$$[$0],null,$$[$0-1],Tipo.VALOR,yylineno,this._$.first_column));
break;
case 83:
parametros_metodo.push(new Declaracion("Declaracion",$$[$0],null,$$[$0-1],Tipo.VALOR,yylineno,this._$.first_column));
break;
case 84:
this.$ = new Asignacion("Asignacion",$$[$0-2],$$[$0],yylineno,this._$.first_column);
break;
case 85:
this.$ = new Declaracion("Declaracion",$$[$0-2],$$[$0],$$[$0-3],Tipo.VALOR,yylineno,this._$.first_column);
break;
case 86:
this.$ = new Declaracion("Declaracion",$$[$0],null,$$[$0-1],Tipo.VALOR,yylineno,this._$.first_column);
break;
case 87:
this.$ = Tipo.ENTERO;
break;
case 88:
this.$ = Tipo.DECIMAL;
break;
case 89:
this.$ = Tipo.BOOLEAN;
break;
case 90:
this.$ = Tipo.CARACTER;
break;
case 91:
this.$ = Tipo.CADENA;
break;
case 92:
this.$ = new Logica("Logica",$$[$0-2],$$[$0],Tipo.OR,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 93: case 95:
this.$ = $$[$0]
break;
case 94:
this.$ = new Logica("Logica",$$[$0-2],$$[$0],Tipo.AND,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 96:
this.$ = new Relacion("Relacion",$$[$0-2],$$[$0],Tipo.IGUAL,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 97:
this.$ = new Relacion("Relacion",$$[$0-2],$$[$0],Tipo.DIFERENTE,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 98: case 104: case 107: case 112: case 114:
this.$ = $$[$0];
break;
case 99:
this.$ = new Relacion("Relacion",$$[$0-2],$$[$0],Tipo.MAYOR,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 100:
this.$ = new Relacion("Relacion",$$[$0-2],$$[$0],Tipo.MENOR,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 101:
this.$ = new Relacion("Relacion",$$[$0-2],$$[$0],Tipo.MAYORIGUAL,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 102:
this.$ = new Relacion("Relacion",$$[$0-2],$$[$0],Tipo.MENORIGUAL,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 103:
this.$ = new Relacion("Relacion",$$[$0-2],$$[$0],Tipo.INCERTEZA,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 105:
this.$ = new Operacion("Operacion",$$[$0-2],$$[$0],Tipo.SUMA,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 106:
this.$ = new Operacion("Operacion",$$[$0-2],$$[$0],Tipo.RESTA,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 108:
this.$ = new Operacion("Operacion",$$[$0-2],$$[$0],Tipo.MULTIPLICACION,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 109:
this.$ = new Operacion("Operacion",$$[$0-2],$$[$0],Tipo.DIVISION,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 110:
this.$ = new Operacion("Operacion",$$[$0-2],$$[$0],Tipo.MODULO,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 111:
this.$ = new Operacion("Operacion",$$[$0-2],$$[$0],Tipo.POTENCIA,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 113:
this.$ = new Logica("Logica",$$[$0],null,Tipo.NOT,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 115:
this.$ = new Valor(Number($$[$0]),Tipo.DECIMAL,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 116:
this.$ = new Valor(Number($$[$0]),Tipo.ENTERO,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 117:
this.$ = new Valor(-1*Number($$[$0]),Tipo.DECIMAL,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 118:
this.$ = new Valor(-1*Number($$[$0]),Tipo.ENTERO,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 119:
this.$ = $$[$0-1];
break;
case 120:
this.$ = new Valor($$[$0],Tipo.CADENA,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 121:
this.$ = new Valor($$[$0],Tipo.CARACTER,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 122:
this.$ = new Valor(true,Tipo.BOOLEAN,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 123:
this.$ = new Valor(false,Tipo.BOOLEAN,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 124:
this.$ = new Valor($$[$0],Tipo.ID,Tipo.VALOR,yylineno,this._$.first_column);
break;
case 125:
this.$ = new Valor($$[$0],Tipo.LLAMADA,Tipo.VALOR,yylineno,this._$.first_column);
break;
}
},
table: [{2:[1,5],3:1,4:2,5:[1,3],6:4,7:$V0,8:6,9:7,10:$V1,48:9,57:$V2,58:$V3,59:$V4,60:$V5,61:$V6},{1:[3]},{5:[1,15],6:16,7:$V0,8:6,9:7,10:$V1,48:9,57:$V2,58:$V3,59:$V4,60:$V5,61:$V6},{1:[2,2]},{7:[1,17]},o($V7,[2,5]),{7:[2,6]},{7:[2,7]},{11:[1,18],23:[1,19]},{23:[1,20]},{23:[2,87]},{23:[2,88]},{23:[2,89]},{23:[2,90]},{23:[2,91]},{1:[2,1]},{7:[1,21]},o($V7,[2,4]),{12:[1,22]},{12:[1,23]},{7:$V8,12:[1,25],56:$V9},o($V7,[2,3]),{13:[1,26]},{13:[1,28],48:29,49:27,57:$V2,58:$V3,59:$V4,60:$V5,61:$V6},{12:$Va,18:30,23:$Vb,38:48,63:31,65:32,68:33,74:34,76:$Vc,77:35,82:36,83:$Vd,84:38,85:$Ve,86:$Vf,87:$Vg,88:$Vh,89:$Vi,90:$Vj},{13:[1,50],48:29,49:49,57:$V2,58:$V3,59:$V4,60:$V5,61:$V6},{14:[1,51]},{13:[1,52],55:$Vk},{14:[1,54]},{23:[1,55]},o($Vl,[2,85],{62:$Vm}),o($Vn,[2,93],{64:[1,57]}),o($Vo,[2,95],{66:[1,58],67:[1,59]}),o($Vp,[2,98],{69:[1,60],70:[1,61],71:[1,62],72:[1,63],73:[1,64]}),o($Vq,[2,104],{75:[1,65],76:[1,66]}),o($Vr,[2,107],{78:[1,67],79:[1,68],80:[1,69],81:$Vs}),o($Vt,[2,112]),{12:$Va,23:$Vb,38:48,76:$Vc,82:71,83:$Vd,84:38,85:$Ve,86:$Vf,87:$Vg,88:$Vh,89:$Vi,90:$Vj},o($Vt,[2,114]),o($Vt,[2,115]),o($Vt,[2,116]),{85:[1,72],86:[1,73]},{12:$Va,18:74,23:$Vb,38:48,63:31,65:32,68:33,74:34,76:$Vc,77:35,82:36,83:$Vd,84:38,85:$Ve,86:$Vf,87:$Vg,88:$Vh,89:$Vi,90:$Vj},o($Vt,[2,120]),o($Vt,[2,121]),o($Vt,[2,122]),o($Vt,[2,123]),o($Vt,[2,124],{12:$Vu}),o($Vt,[2,125]),{13:[1,76],55:$Vk},{14:[1,77]},{7:[1,78]},{14:[1,79]},{48:80,57:$V2,58:$V3,59:$V4,60:$V5,61:$V6},{7:[1,81]},o($Vv,[2,83]),{12:$Va,18:82,23:$Vb,38:48,63:31,65:32,68:33,74:34,76:$Vc,77:35,82:36,83:$Vd,84:38,85:$Ve,86:$Vf,87:$Vg,88:$Vh,89:$Vi,90:$Vj},{12:$Va,23:$Vb,38:48,63:83,65:32,68:33,74:34,76:$Vc,77:35,82:36,83:$Vd,84:38,85:$Ve,86:$Vf,87:$Vg,88:$Vh,89:$Vi,90:$Vj},{12:$Va,23:$Vb,38:48,65:84,68:33,74:34,76:$Vc,77:35,82:36,83:$Vd,84:38,85:$Ve,86:$Vf,87:$Vg,88:$Vh,89:$Vi,90:$Vj},{12:$Va,23:$Vb,38:48,65:85,68:33,74:34,76:$Vc,77:35,82:36,83:$Vd,84:38,85:$Ve,86:$Vf,87:$Vg,88:$Vh,89:$Vi,90:$Vj},{12:$Va,23:$Vb,38:48,68:86,74:34,76:$Vc,77:35,82:36,83:$Vd,84:38,85:$Ve,86:$Vf,87:$Vg,88:$Vh,89:$Vi,90:$Vj},{12:$Va,23:$Vb,38:48,68:87,74:34,76:$Vc,77:35,82:36,83:$Vd,84:38,85:$Ve,86:$Vf,87:$Vg,88:$Vh,89:$Vi,90:$Vj},{12:$Va,23:$Vb,38:48,68:88,74:34,76:$Vc,77:35,82:36,83:$Vd,84:38,85:$Ve,86:$Vf,87:$Vg,88:$Vh,89:$Vi,90:$Vj},{12:$Va,23:$Vb,38:48,68:89,74:34,76:$Vc,77:35,82:36,83:$Vd,84:38,85:$Ve,86:$Vf,87:$Vg,88:$Vh,89:$Vi,90:$Vj},{12:$Va,23:$Vb,38:48,68:90,74:34,76:$Vc,77:35,82:36,83:$Vd,84:38,85:$Ve,86:$Vf,87:$Vg,88:$Vh,89:$Vi,90:$Vj},{12:$Va,23:$Vb,38:48,74:91,76:$Vc,77:35,82:36,83:$Vd,84:38,85:$Ve,86:$Vf,87:$Vg,88:$Vh,89:$Vi,90:$Vj},{12:$Va,23:$Vb,38:48,74:92,76:$Vc,77:35,82:36,83:$Vd,84:38,85:$Ve,86:$Vf,87:$Vg,88:$Vh,89:$Vi,90:$Vj},{12:$Va,23:$Vb,38:48,76:$Vc,77:93,82:36,83:$Vd,84:38,85:$Ve,86:$Vf,87:$Vg,88:$Vh,89:$Vi,90:$Vj},{12:$Va,23:$Vb,38:48,76:$Vc,77:94,82:36,83:$Vd,84:38,85:$Ve,86:$Vf,87:$Vg,88:$Vh,89:$Vi,90:$Vj},{12:$Va,23:$Vb,38:48,76:$Vc,77:95,82:36,83:$Vd,84:38,85:$Ve,86:$Vf,87:$Vg,88:$Vh,89:$Vi,90:$Vj},{12:$Va,23:$Vb,38:48,76:$Vc,77:96,82:36,83:$Vd,84:38,85:$Ve,86:$Vf,87:$Vg,88:$Vh,89:$Vi,90:$Vj},o($Vt,[2,113]),o($Vt,[2,117]),o($Vt,[2,118]),{13:[1,97],62:$Vm},{12:$Va,13:[1,99],18:100,23:$Vb,38:48,54:98,63:31,65:32,68:33,74:34,76:$Vc,77:35,82:36,83:$Vd,84:38,85:$Ve,86:$Vf,87:$Vg,88:$Vh,89:$Vi,90:$Vj},{14:[1,101]},{7:[1,102]},{7:$Vw,15:103,35:$Vx},{7:[1,106]},{23:[1,107]},{7:$Vw,15:108,35:$Vx},o($Vn,[2,92]),o($Vo,[2,94]),o($Vp,[2,96]),o($Vp,[2,97]),o($Vq,[2,99]),o($Vq,[2,100]),o($Vq,[2,101]),o($Vq,[2,102]),o($Vq,[2,103]),o($Vr,[2,105]),o($Vr,[2,106]),o($Vy,[2,108],{81:$Vs}),o($Vy,[2,109],{81:$Vs}),o($Vy,[2,110],{81:$Vs}),o($Vy,[2,111],{81:$Vs}),o($Vt,[2,119]),{13:[1,109],55:[1,110]},o($Vt,[2,79]),o($Vv,[2,81],{62:$Vm}),{7:[1,111]},{7:$Vw,15:112,35:$Vx},{7:[2,8],35:[1,113]},{2:$Vz,7:$VA,8:115,16:122,17:$VB,19:123,20:$VC,21:121,22:$VD,23:$VE,24:118,25:$VF,29:120,30:$VG,37:116,38:117,41:119,42:$VH,48:125,52:114,57:$V2,58:$V3,59:$V4,60:$V5,61:$V6},o($VI,[2,62]),{7:$Vw,15:133,35:$Vx},o($Vv,[2,82]),{7:$VJ,35:$VK,51:134},o($Vt,[2,78]),{12:$Va,18:136,23:$Vb,38:48,63:31,65:32,68:33,74:34,76:$Vc,77:35,82:36,83:$Vd,84:38,85:$Ve,86:$Vf,87:$Vg,88:$Vh,89:$Vi,90:$Vj},{7:$Vw,15:137,35:$Vx},{35:$VL,50:138},{2:$Vz,7:$VA,8:115,16:122,17:$VB,19:123,20:$VC,21:121,22:$VD,23:$VE,24:118,25:$VF,29:120,30:$VG,37:116,38:117,41:119,42:$VH,48:125,52:140,57:$V2,58:$V3,59:$V4,60:$V5,61:$V6},{7:[1,141]},{7:[2,63]},{7:[2,64]},{7:[2,65]},{7:[2,66]},{7:[2,67]},{7:[2,68]},{7:[2,69]},{7:[2,70]},{7:[2,71]},{7:[2,73]},{23:[1,142]},{12:$Vu,56:[1,143]},{12:[1,144]},{12:[1,145]},{12:[1,146]},{12:[1,147]},{12:[1,148]},{12:[1,149]},{7:$VJ,35:$VK,51:150},{7:[1,151]},{2:$Vz,7:$VA,8:115,16:122,17:$VB,19:123,20:$VC,21:121,22:$VD,23:$VE,24:118,25:$VF,29:120,30:$VG,37:116,38:117,41:119,42:$VH,48:125,52:140,53:[1,152],57:$V2,58:$V3,59:$V4,60:$V5,61:$V6},o($Vv,[2,80],{62:$Vm}),{35:$VL,50:153},{7:[1,154]},{2:$Vz,7:$VA,8:115,16:122,17:$VB,19:123,20:$VC,21:121,22:$VD,23:$VE,24:118,25:$VF,29:120,30:$VG,37:116,38:117,41:119,42:$VH,48:125,52:140,53:[1,155],57:$V2,58:$V3,59:$V4,60:$V5,61:$V6},{7:[1,156]},o($VI,[2,61]),o($Vl,$V8,{56:$V9}),{12:$Va,18:157,23:$Vb,38:48,63:31,65:32,68:33,74:34,76:$Vc,77:35,82:36,83:$Vd,84:38,85:$Ve,86:$Vf,87:$Vg,88:$Vh,89:$Vi,90:$Vj},{12:$Va,18:158,23:$Vb,38:48,63:31,65:32,68:33,74:34,76:$Vc,77:35,82:36,83:$Vd,84:38,85:$Ve,86:$Vf,87:$Vg,88:$Vh,89:$Vi,90:$Vj},{12:$Va,18:159,23:$Vb,38:48,63:31,65:32,68:33,74:34,76:$Vc,77:35,82:36,83:$Vd,84:38,85:$Ve,86:$Vf,87:$Vg,88:$Vh,89:$Vi,90:$Vj},{8:160,48:125,57:$V2,58:$V3,59:$V4,60:$V5,61:$V6},{23:[1,161]},{12:$Va,18:162,23:$Vb,38:48,63:31,65:32,68:33,74:34,76:$Vc,77:35,82:36,83:$Vd,84:38,85:$Ve,86:$Vf,87:$Vg,88:$Vh,89:$Vi,90:$Vj},{13:[1,163]},{7:[1,164]},{7:[2,59]},{7:[2,76]},{7:[1,165]},{7:[2,58]},{7:[2,75],12:$Va,18:166,23:$Vb,38:48,63:31,65:32,68:33,74:34,76:$Vc,77:35,82:36,83:$Vd,84:38,85:$Ve,86:$Vf,87:$Vg,88:$Vh,89:$Vi,90:$Vj},o($VI,[2,60]),{7:[2,84],62:$Vm},{13:[1,167],62:$Vm},{13:[1,168],62:$Vm},{31:[1,169]},{13:[1,170]},{13:[1,171],62:$Vm},{7:[2,11]},{7:[2,57]},{7:[2,56]},{7:[2,74],62:$Vm},{7:[2,13]},{14:[1,172]},{12:$Va,18:173,23:$Vb,38:48,63:31,65:32,68:33,74:34,76:$Vc,77:35,82:36,83:$Vd,84:38,85:$Ve,86:$Vf,87:$Vg,88:$Vh,89:$Vi,90:$Vj},{7:[2,12]},{7:[2,10]},{7:[1,174]},{31:[1,175],62:$Vm},{7:[1,178],35:[1,177],43:176},{32:179,33:[1,180],34:[1,181]},{7:[2,32],35:[1,182]},{35:[1,183]},o($VI,[2,35]),{13:[1,184]},{13:[2,16]},{13:[2,17]},{35:[1,186],44:[1,185]},{2:$VM,7:$VN,8:188,16:193,17:$VB,19:194,20:$VC,21:192,22:$VD,23:$VE,24:191,25:$VF,37:189,38:190,46:187,48:125,57:$V2,58:$V3,59:$V4,60:$V5,61:$V6},{14:[1,196]},{14:[1,197]},{2:$VM,7:$VN,8:188,16:193,17:$VB,19:194,20:$VC,21:192,22:$VD,23:$VE,24:191,25:$VF,37:189,38:190,46:198,48:125,57:$V2,58:$V3,59:$V4,60:$V5,61:$V6},{7:[1,199]},{7:[2,36]},{7:[2,37]},{7:[2,38]},{7:[2,39]},{7:[2,40]},{7:[2,41]},{7:[2,42]},{7:[2,44]},{7:[1,200]},{7:[1,201]},{7:[1,202]},o($VI,[2,34]),{7:[1,205],28:203,35:[1,204]},{35:[1,207],45:206},o($VI,[2,33]),{7:[2,15],35:[1,208]},{35:[1,209]},o($VI,[2,20]),{7:[2,31],35:[1,210]},{35:[1,211]},{35:[1,212]},{7:$VO,8:214,16:221,17:$VB,19:222,20:$VC,21:220,22:$VD,23:$VE,24:219,25:$VF,36:213,37:215,38:216,39:$VP,40:$VQ,48:125,57:$V2,58:$V3,59:$V4,60:$V5,61:$V6},{35:[1,223]},{2:$VR,7:$VS,8:225,16:230,17:$VB,19:231,20:$VC,21:229,22:$VD,23:$VE,24:228,25:$VF,37:226,38:227,47:224,48:125,57:$V2,58:$V3,59:$V4,60:$V5,61:$V6},{7:$VO,8:214,16:221,17:$VB,19:222,20:$VC,21:220,22:$VD,23:$VE,24:219,25:$VF,36:233,37:215,38:216,39:$VP,40:$VQ,48:125,57:$V2,58:$V3,59:$V4,60:$V5,61:$V6},{7:[1,234]},{7:[2,21]},{7:[2,22]},{7:[2,23]},{7:[2,24]},{7:[2,25]},{7:[2,26]},{7:[2,27]},{7:[2,28]},{7:[2,29]},{2:$VR,7:$VS,8:225,16:230,17:$VB,19:231,20:$VC,21:229,22:$VD,23:$VE,24:228,25:$VF,37:226,38:227,47:235,48:125,57:$V2,58:$V3,59:$V4,60:$V5,61:$V6},{7:[1,236]},{7:[2,47]},{7:[2,48]},{7:[2,49]},{7:[2,50]},{7:[2,51]},{7:[2,52]},{7:[2,53]},{7:[2,55]},{7:[1,237]},o($VI,[2,19]),{7:[1,238]},o($VI,[2,46]),o($VI,[2,18]),o($VI,[2,45])],
defaultActions: {3:[2,2],6:[2,6],7:[2,7],10:[2,87],11:[2,88],12:[2,89],13:[2,90],14:[2,91],15:[2,1],115:[2,63],116:[2,64],117:[2,65],118:[2,66],119:[2,67],120:[2,68],121:[2,69],122:[2,70],123:[2,71],124:[2,73],151:[2,59],152:[2,76],154:[2,58],163:[2,11],164:[2,57],165:[2,56],167:[2,13],170:[2,12],171:[2,10],180:[2,16],181:[2,17],188:[2,36],189:[2,37],190:[2,38],191:[2,39],192:[2,40],193:[2,41],194:[2,42],195:[2,44],214:[2,21],215:[2,22],216:[2,23],217:[2,24],218:[2,25],219:[2,26],220:[2,27],221:[2,28],222:[2,29],225:[2,47],226:[2,48],227:[2,49],228:[2,50],229:[2,51],230:[2,52],231:[2,53],232:[2,55]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	const Tipo = require('./clases/Tipo');
	const Tabla = require('./clases/Tabla');
	const Salida = require("./clases/Salida");
	const Valor = require('./clases/Valor');
	const Operacion = require('./clases/Operacion');
	const Relacion = require('./clases/Relacion');
	const Logica = require('./clases/Logica');
	const Declaracion = require('./clases/Declaracion');
	const Mostrar = require('./clases/Mostrar');
	const Asignacion = require('./clases/Asignacion');
	const Funcion = require('./clases/Funcion');
	const Retorno = require('./clases/Retorno');
	const Llamada = require('./clases/Llamada');
	const Si = require('./clases/Si');
	const Para = require('./clases/Para');
	const Iteracion = require('./clases/Iteracion');
	var tabla = new Tabla(null);
	var salida = new Salida();
	var operaciones = [];
	var operaciones_funcion = [];
	var operaciones_si = [];
	var operaciones_else = [];
	var parametros_metodo = [];
	var valores_llamada = [];
	var operaciones_ciclo = [];


/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:return 35;
break;
case 2:return 7;
break;
case 3:
break;
case 4:// Comentario de una linea
break;
case 5:// comentario multiple lÃ­neas
break;
case 6:return 'IMPORTAR';
break;
case 7:return 'INCERTEZA';
break;
case 8:return 58;
break;
case 9:return 59;
break;
case 10:return 61;
break;
case 11:return 57;
break;
case 12:return 60;
break;
case 13:return 10;
break;
case 14:return 89;
break;
case 15:return 90;
break;
case 16:return 53;
break;
case 17:return 11;
break;
case 18:return 42;
break;
case 19:return 44;
break;
case 20:return 30;
break;
case 21:return 27;
break;
case 22:return 39;
break;
case 23:return 40;
break;
case 24:return 25;
break;
case 25:return 22;
break;
case 26:return 17;
break;
case 27:return 20;
break;
case 28:return 55;
break;
case 29:return 14;
break;
case 30:return 31;
break;
case 31:return 'LLAVIZQ';
break;
case 32:return 'LLAVDER';
break;
case 33:return 12;
break;
case 34:return 13;
break;
case 35:return 33;
break;
case 36:return 34;
break;
case 37:return 75;
break;
case 38:return 76;
break;
case 39:return 78;
break;
case 40:return 79;
break;
case 41:return 80;
break;
case 42:return 81;
break;
case 43:return 72;
break;
case 44:return 71;
break;
case 45:return 66;
break;
case 46:return 67;
break;
case 47:return 70;
break;
case 48:return 69;
break;
case 49:return 56;
break;
case 50:return 73;
break;
case 51:return 64
break;
case 52:return 62;
break;
case 53:return 'XOR';
break;
case 54:return 83;
break;
case 55:return 88;
break;
case 56:return 85;
break;
case 57:return 86;
break;
case 58:return 87;
break;
case 59:return 23;
break;
case 60:return 5;
break;
case 61: console.error('Este es un error lÃ©xico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:[ ]+)/,/^(?:[	])/,/^(?:\n)/,/^(?:[\r]+)/,/^(?:!!.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:Importar\b)/,/^(?:Incerteza\b)/,/^(?:Double\b)/,/^(?:Boolean\b)/,/^(?:String\b)/,/^(?:Int\b)/,/^(?:Char\b)/,/^(?:Void\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:Retorno\b)/,/^(?:Principal\b)/,/^(?:Si\b)/,/^(?:Sino\b)/,/^(?:Para\b)/,/^(?:Mientras\b)/,/^(?:Detener\b)/,/^(?:Continuar\b)/,/^(?:Mostrar\b)/,/^(?:DibujarAST\b)/,/^(?:DibujarEXP\b)/,/^(?:DibujarTS\b)/,/^(?:,)/,/^(?::)/,/^(?:;)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\^)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:!=)/,/^(?:<)/,/^(?:>)/,/^(?:=)/,/^(?:~)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!&)/,/^(?:!)/,/^(?:'([^']|\\n|\\r|\\t)')/,/^(?:[0-9]+\.[0-9]+\b)/,/^(?:[0-9]+\b)/,/^(?:([\"](\\"|[^"])*[^\\][\"])|[\"][\"])/,/^(?:([a-zA-Z"_"])[a-z0-9A-Z"_""Ã±""Ã"]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}